{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./datasources/lib/types.ts","webpack:///./datasources/lib/transformations.ts","webpack:///./datasources/lib/pcp_query_ctrl.ts","webpack:///./datasources/bpftrace/script_registry.ts","webpack:///./datasources/bpftrace/datasource.ts","webpack:///./datasources/bpftrace/query_ctrl.ts","webpack:///./datasources/bpftrace/module.ts","webpack:///./datasources/lib/datastore.ts","webpack:///./datasources/lib/endpoint_registry.ts","webpack:///./datasources/lib/poller.ts","webpack:///./datasources/lib/utils.ts","webpack:///./datasources/lib/context.ts","webpack:///external \"app/core/utils/kbn\"","webpack:///external \"app/plugins/sdk\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","TargetFormat","__webpack_exports__","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","_types__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_2__","Transformations","templateSrv","this","getLabel","target","legendFormat","targetSpl","split","vars","instance","metric0","length","replace","updateLabel","targetResult","datapoints","transformToTimeSeries","queryResult","a","flatten","map","row","instances","transformToHeatmap","targetResults","_i","targetResults_1","match","dataPoint","Math","floor","transformStringToTable","tableText","table","columns","rows","type","lines","columnSizes","line","trim","includes","tableHeaders","colStartAt","indexOf","colEndAt","undefined","push","text","colSize","substring","lines_1","transformMultipleMetricsToTable","queryResultRow","queryResult_1","find","instances_1","keys","sort","b","parseInt","transformToTable","targets","transform","format","TimeSeries","Heatmap","Table","message","PcpQueryCtrl","_super","$scope","$injector","typingDebounceTime","_this","stopTypingDebounced","debounce","stopTyping","__extends","isTyping","startTyping","targetChanged","panelCtrl","refresh","grafana_app_plugins_sdk__WEBPACK_IMPORTED_MODULE_1__","ScriptRegistry","context","poller","datastore","keepPollingMs","scripts","failedScripts","hasScriptFailed","script","status","exit_code","ensureActive","code","allowRestart","register","_a","sent","lastRequested","Date","getTime","controlMetrics","ensurePolling","validMetrics","missingMetrics","external_lodash_default","difference","console","debug","join","queryMetrics","Infinity","metric","metric_field","lastIndexOf","removeMetricsFromPolling","lib_context","url","store","data","error_1","fetch","response","JSON","parse","values","isEmpty","cleanupExpiredScripts","scriptExpiry","pickBy","datasource_PCPBPFtraceDatasource","PCPBPFtraceDatasource","instanceSettings","backendSrv","variableSrv","withCredentials","headers","Content-Type","basicAuth","pollIntervalMs","kbn_default","interval_to_ms","jsonData","pollInterval","keepPolling","localHistoryAgeMs","localHistoryAge","datasourceRequest","doRequest","endpointRegistry","endpoint_registry","transformations","setInterval","doPollAll","$inject","list","endpoint","cleanExpiredMetrics","cleanupExpiredMetrics","scriptRegistry","promises","poll","Promise","all","getOrCreateEndpoint","utils","script_registry","options","container","title","_b","datasource_generator","var_","metricMetadata","labels","metrictype","types","hide","metrics","result","query","range","from","valueOf","to","output","refId","panelData","query_ctrl_PCPBPFtraceDatasourceQueryCtrl","formats","getDefaultFormat","PCPBPFtraceDatasourceQueryCtrl","panel","templateUrl","PCPBPFtraceConfigCtrl","PCPBPFtraceAnnotationsQueryCtrl","DataStore","ingestCounterMetric","instanceStore","pollTimeEpochMs","prevTimeMs","prevOrigVal","deltaSec","label","metadata","info","instanceName","metricStore","sem","results","filter","queryMetric","keepExpiry","lib_poller","Poller","requestedMetrics","returnedMetrics","missingMetrics_1","missingMetric","failOnError","intersection","metadatas","invalidMetrics","now","validMetrics_1","metrics_1","pollExpiry","endpoint_registry_EndpointRegistry","EndpointRegistry","generateId","id","lib_datastore","endpoints","synchronized","isBlank","getConnectionParams","method","descriptor","inflightCalls","propertyKey","apply","arguments","then","reason","str","isString","dashboardVariables","variables","variableValue","variable","current","isEqual","allValue","slice","textValuePair","getDashboardVariables","Context","indomCache","contextUrl","contextResponse","params","trys","isObject","requiredMetrics","metricMetadataCache","names","metadata_1","indoms","indoms_1","indom","_f","_c","refreshed","_d","_e","instanceNames","prefix","__decorate","_utils__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"./datasources/bpftrace/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 135);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export interface MetricMetadata {\n    name: string,\n    pmid: number,\n    sem: string,\n    type: string,\n    units: string,\n    labels: Record<string, any>\n}\n\nexport type Datapoint = [number | string, number];\n\nexport interface TimeSeriesData {\n    target: string;\n    datapoints: Datapoint[]\n}\n\nexport interface TableData {\n    columns: any[]\n    rows: (string | number)[][]\n    type: string\n}\n\nexport type PanelData = TimeSeriesData | TableData;\n\nexport enum TargetFormat {\n    TimeSeries = \"time_series\",\n    Table = \"table\",\n    Heatmap = \"heatmap\",\n}\n\nexport interface DatastoreQueryResultRow {\n    name: string;\n    instances: TimeSeriesData[];\n}\n\nexport type DatastoreQueryResult = DatastoreQueryResultRow[];\n","import _ from 'lodash';\nimport { Datapoint, TargetFormat, TimeSeriesData, DatastoreQueryResult, PanelData, TableData, DatastoreQueryResultRow } from './types';\nimport { isBlank } from './utils';\n\nexport default class Transformations {\n\n    constructor(private templateSrv: any) {\n    }\n\n    getLabel(target: string, legendFormat: string) {\n        if (isBlank(legendFormat)) {\n            return target;\n        }\n        else {\n            const targetSpl = target.split('.');\n            let vars = {\n                instance: { value: target },\n                metric0: { value: targetSpl[targetSpl.length - 1] }\n            };\n            return this.templateSrv.replace(legendFormat, vars);\n        }\n    }\n\n    updateLabel(target: any, targetResult: TimeSeriesData) {\n        return { target: this.getLabel(targetResult.target, target.legendFormat), datapoints: targetResult.datapoints }\n    }\n\n    transformToTimeSeries(queryResult: DatastoreQueryResult, target: any): TimeSeriesData[] {\n        const instances: TimeSeriesData[] = _.flatten(queryResult.map((row: DatastoreQueryResultRow) => row.instances));\n        return instances.map(this.updateLabel.bind(this, target));\n    }\n\n    transformToHeatmap(queryResult: DatastoreQueryResult) {\n        const targetResults: TimeSeriesData[] = queryResult[0].instances;\n        for (const target of targetResults) {\n            // target name is the upper bound\n            const match = target.target.match(/^(.+?)\\-(.+?)$/);\n            if (match) {\n                target.target = match[2];\n            }\n\n            // round timestamps to one second - the heatmap panel calculates the x-axis size accordingly\n            target.datapoints = target.datapoints.map(\n                (dataPoint: Datapoint) => [dataPoint[0], Math.floor(dataPoint[1] / 1000) * 1000]\n            );\n        }\n        return targetResults;\n    }\n\n    transformStringToTable(tableText: string) {\n        let table: TableData = { columns: [], rows: [], type: 'table' };\n        let lines = tableText.split('\\n');\n        let columnSizes: [number, number | undefined][] = [];\n\n        for (let line of lines) {\n            line = line.trim();\n            if (line.length === 0 || line.includes(\"Ctrl-C\"))\n                continue;\n\n            if (table.columns.length === 0) {\n                let tableHeaders = line.split(/\\s\\s+/);\n                for (let i = 0; i < tableHeaders.length; i++) {\n                    const colStartAt = line.indexOf(tableHeaders[i]);\n                    const colEndAt = i + 1 < tableHeaders.length ? line.indexOf(tableHeaders[i + 1]) - 1 : undefined;\n                    table.columns.push({ text: tableHeaders[i] });\n                    columnSizes.push([colStartAt, colEndAt]);\n                }\n            }\n            else {\n                let row = columnSizes.map((colSize: any) => line.substring(colSize[0], colSize[1]).trim());\n                table.rows.push(row);\n            }\n        }\n        return table;\n    }\n\n    transformMultipleMetricsToTable(queryResult: DatastoreQueryResult) {\n        let table: TableData = { columns: [], rows: [], type: 'table' };\n        table.columns = queryResult.map((queryResultRow) => ({ text: queryResultRow.name }));\n        const instances = Object.keys(queryResult[0].instances).sort((a, b) => parseInt(a) - parseInt(b));\n        for (const instance of instances) {\n            const row: (string | number)[] = [];\n            for (const queryResultRow of queryResult) {\n                const target = queryResultRow.instances.find((target: TimeSeriesData) => target.target === instance);\n                if (target && target.datapoints.length > 0)\n                    row.push(target.datapoints[target.datapoints.length - 1][0]);\n                else\n                    row.push('?');\n            }\n            table.rows.push(row);\n\n        }\n        return table;\n    }\n\n    transformToTable(queryResult: DatastoreQueryResult) {\n        if (queryResult.length > 1) {\n            return this.transformMultipleMetricsToTable(queryResult);\n        }\n        else if (queryResult.length === 1) {\n            const targets = queryResult[0].instances;\n            if (targets.length > 0 && targets[0].datapoints.length > 0)\n                return this.transformStringToTable(targets[0].datapoints[0][0] as string);\n        }\n        return { columns: [], rows: [], type: 'table' };\n    }\n\n    transform(queryResult: DatastoreQueryResult, target: any): PanelData[] {\n        if (target.format === TargetFormat.TimeSeries)\n            return this.transformToTimeSeries(queryResult, target);\n        else if (target.format === TargetFormat.Heatmap)\n            return this.transformToHeatmap(queryResult);\n        else if (target.format == TargetFormat.Table)\n            return [this.transformToTable(queryResult)];\n        else\n            throw { message: `Invalid target format '${target.format}', possible options: ${TargetFormat.TimeSeries}, ${TargetFormat.Heatmap}, ${TargetFormat.Table}` };\n    }\n\n\n}\n","import _ from \"lodash\";\nimport { QueryCtrl } from 'grafana/app/plugins/sdk';\n\nexport abstract class PcpQueryCtrl extends QueryCtrl {\n\n    constructor($scope: any, $injector: any, private typingDebounceTime: number = 1000) {\n        super($scope, $injector);\n    }\n\n    stopTyping() {\n        // we don't want this property in the saved/exported JSON\n        delete this.target.isTyping;\n    }\n\n    // this method is called 1s after the last keypress\n    stopTypingDebounced = _.debounce(this.stopTyping, this.typingDebounceTime);\n\n    startTyping() {\n        this.target.isTyping = true;\n        this.stopTypingDebounced();\n    }\n\n    targetChanged() {\n        this.stopTyping();\n        this.panelCtrl.refresh();\n    }\n\n}\n","import _ from 'lodash';\nimport Context from \"../lib/context\";\nimport Poller from '../lib/poller';\nimport DataStore from '../lib/datastore';\n\nexport interface BPFtraceScript {\n    // from PMDA\n    readonly name: string;\n    readonly vars: string[];\n    status: string;\n    exit_code: number | null;\n    output: string;\n\n    // additional properties by ScriptRegistry\n    code: string;\n    lastRequested: number;\n}\n\nexport default class ScriptRegistry {\n\n    // currently active (requested) scripts\n    private scripts: Record<string, BPFtraceScript> = {}; // {code: BPFtraceScript}\n\n    // a script which failed immediately will fail every time\n    // reasons: no variable found, invalid name, ...\n    private failedScripts: Record<string, BPFtraceScript> = {}; // {code: BPFtraceScript}\n\n    constructor(private context: Context, private poller: Poller, private datastore: DataStore, private keepPollingMs: number) {\n    }\n\n    hasScriptFailed(script: BPFtraceScript) {\n        return script.status === \"stopped\" && script.exit_code !== 0;\n    }\n\n    async ensureActive(code: string, allowRestart: boolean = true) {\n        if (code in this.failedScripts) {\n            return this.failedScripts[code];\n        }\n\n        let script = this.scripts[code];\n        if (!script) {\n            script = await this.register(code);\n            if (this.hasScriptFailed(script)) {\n                this.failedScripts[code] = script;\n                return script;\n            }\n            else {\n                this.scripts[code] = script;\n            }\n        }\n        script.lastRequested = new Date().getTime();\n        const controlMetrics = [\n            `bpftrace.scripts.${script.name}.status`,\n            `bpftrace.scripts.${script.name}.exit_code`,\n            `bpftrace.scripts.${script.name}.output`\n        ];\n        const validMetrics = await this.poller.ensurePolling(controlMetrics, false);\n\n        // missing script metrics on the PMDA and script is not starting, register again\n        if (validMetrics.length < controlMetrics.length && script.status !== \"starting\") {\n            const missingMetrics = _.difference(controlMetrics, validMetrics);\n            console.debug(`script ${script.name} got deregistered on the PMDA (missing metrics: ${missingMetrics.join(', ')})`);\n            delete this.scripts[code];\n            return allowRestart ? this.ensureActive(code, false) : script;\n        }\n\n        const queryResult = this.datastore.queryMetrics(controlMetrics, 0, Infinity);\n        for (const metric of queryResult) {\n            if (metric.instances.length > 0 && metric.instances[0].datapoints.length > 0) {\n                const metric_field = metric.name.substring(metric.name.lastIndexOf('.') + 1);\n                script[metric_field] = metric.instances[0].datapoints[0][0];\n            }\n        }\n\n        if (script.status === \"stopped\") {\n            if (script.exit_code === 0) {\n                console.debug(`script ${script.name} was stopped on the server, restarting...`);\n                delete this.scripts[code];\n                return allowRestart ? this.ensureActive(code, false) : script;\n            }\n            else {\n                // script failed, move to failed scripts\n                console.debug(`script ${script.name} failed, moving to failedScripts`);\n                this.poller.removeMetricsFromPolling(controlMetrics);\n                delete this.scripts[code];\n                this.failedScripts[code] = script;\n            }\n        }\n        return script;\n    }\n\n    async register(code: string) {\n        console.debug(\"registering script\", code);\n\n        // create temporary context, required so that the PMDA can identify\n        // the client who sent the pmStore message\n        const context = new Context(this.context.url);\n        try {\n            await context.store(\"bpftrace.control.register\", code);\n        }\n        catch (error) {\n            if (error.data && error.data.includes(\"-12400\")) {\n                // PMDA returned PM_ERR_BADSTORE\n                // next fetch will show error reason\n            }\n            else {\n                // other error\n                error.message = error.data ? error.data : \"unknown error\";\n                throw error;\n            }\n        }\n        const response = await context.fetch([\"bpftrace.control.register\"]);\n\n        const script: BPFtraceScript = JSON.parse(response.values[0].instances[0].value);\n        if (_.isEmpty(script))\n            throw { message: \"PMDA returned an empty response when registering this script.\" };\n        script.code = code;\n\n        console.debug(\"script register response\", script);\n        return script;\n    }\n\n    cleanupExpiredScripts() {\n        // clean up any not required scripts\n        const scriptExpiry = new Date().getTime() - this.keepPollingMs;\n        this.scripts = _.pickBy(this.scripts, (script: BPFtraceScript) => script.lastRequested > scriptExpiry);\n    }\n\n}\n","///<reference path=\"../../../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\nimport _ from 'lodash';\nimport kbn from 'grafana/app/core/utils/kbn';\nimport Context from '../lib/context';\nimport EndpointRegistry from '../lib/endpoint_registry';\nimport ScriptRegistry, { BPFtraceScript } from './script_registry';\nimport Transformations from '../lib/transformations';\nimport BPFtraceEndpoint from './bpftrace_endpoint';\nimport { TargetFormat, PanelData } from '../lib/types';\nimport { getConnectionParams } from '../lib/utils';\n\nexport class PCPBPFtraceDatasource {\n\n    name: string;\n    withCredentials: boolean;\n    headers: any;\n\n    pollIntervalMs: number; // poll metric sources every X ms\n    keepPollingMs: number; // we will keep polling a metric for up to X ms after it was last requested\n    localHistoryAgeMs: number; // age out time\n\n    endpointRegistry: EndpointRegistry<BPFtraceEndpoint>;\n    transformations: Transformations;\n\n    /** @ngInject **/\n    constructor(private instanceSettings: any, private backendSrv: any, private templateSrv: any, private variableSrv: any) {\n        this.name = instanceSettings.name;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n        this.pollIntervalMs = kbn.interval_to_ms(instanceSettings.jsonData.pollInterval || '1s');\n        this.keepPollingMs = kbn.interval_to_ms(instanceSettings.jsonData.keepPolling || '20s');\n        this.localHistoryAgeMs = kbn.interval_to_ms(instanceSettings.jsonData.localHistoryAge || '5m');\n\n        Context.datasourceRequest = this.doRequest.bind(this);\n        this.endpointRegistry = new EndpointRegistry();\n        this.transformations = new Transformations(this.templateSrv);\n\n        if (this.pollIntervalMs > 0)\n            setInterval(this.doPollAll.bind(this), this.pollIntervalMs);\n    }\n\n    doPollAll() {\n        let promises: Promise<void>[] = [];\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.datastore.cleanExpiredMetrics();\n            endpoint.poller.cleanupExpiredMetrics();\n            endpoint.scriptRegistry.cleanupExpiredScripts();\n            promises.push(endpoint.poller.poll());\n        }\n        return Promise.all(promises);\n    }\n\n    getOrCreateEndpoint(target: any) {\n        const [url,] = getConnectionParams(this.variableSrv, target, this.instanceSettings);\n        let endpoint = this.endpointRegistry.find(url);\n        if (!endpoint) {\n            endpoint = this.endpointRegistry.create(url, undefined, this.keepPollingMs, this.localHistoryAgeMs);\n            endpoint.scriptRegistry = new ScriptRegistry(endpoint.context, endpoint.poller, endpoint.datastore, this.keepPollingMs);\n        }\n        return endpoint;\n    }\n\n    async doRequest(options: any) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n        return await this.backendSrv.datasourceRequest(options);\n    }\n\n    async testDatasource() {\n        const [url, container] = getConnectionParams(this.variableSrv, {}, this.instanceSettings);\n        const context = new Context(url, container);\n        try {\n            await context.createContext();\n            return { status: 'success', message: \"Data source is working\", title: \"Success\" };\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                message: `Cannot connect to ${context.url}`,\n                title: 'Error',\n            };\n        }\n    }\n\n    async metricFindQuery(query: any) {\n        return [];\n    }\n\n    private async getMetricNameForMetricType(context: Context, script: BPFtraceScript, metrictype: string) {\n        for (const var_ of script.vars) {\n            const metric = `bpftrace.scripts.${script.name}.data.${var_}`;\n            const metricMetadata = await context.metricMetadata(metric);\n            if (metricMetadata && metricMetadata.labels && metricMetadata.labels.metrictype === metrictype)\n                return metric;\n        }\n        return null;\n    }\n\n    private async getMetricNamesForTarget(context: Context, target: any, script: BPFtraceScript) {\n        if (target.format === TargetFormat.TimeSeries) {\n            return script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n        }\n        else if (target.format === TargetFormat.Heatmap) {\n            const metric = await this.getMetricNameForMetricType(context, script, \"histogram\");\n            if (metric)\n                return [metric];\n            else\n                throw { message: \"Cannot find any histogram in this BPFtrace script.\" };\n        }\n        else if (target.format === TargetFormat.Table) {\n            const metric = await this.getMetricNameForMetricType(context, script, \"output\");\n            if (metric)\n                return [metric];\n            else\n                throw { message: \"Table format is only supported with printf() BPFtrace scripts.\" };\n        }\n        return [];\n    }\n\n    async query(query: any) {\n        const panelData: PanelData[] = [];\n        for (const target of query.targets) {\n            if (target.hide || !target.code || target.isTyping)\n                continue;\n\n            // TODO: allow templating of bpftrace script code?\n            // possible clashes of grafana templating syntax with bpftrace syntax\n            const code = target.code.trim();\n            if (code.length === 0)\n                continue;\n\n            let endpoint = this.getOrCreateEndpoint(target);\n            let script: BPFtraceScript;\n            try {\n                // ensureActive registers the script (if required)\n                // register is async\n                script = await endpoint.scriptRegistry.ensureActive(code);\n\n                if (script.status === \"started\" || script.status === \"starting\") {\n                    const metrics = await this.getMetricNamesForTarget(endpoint.context, target, script);\n                    endpoint.poller.ensurePolling(metrics);\n\n                    let result = endpoint.datastore.queryMetrics(metrics, query.range.from.valueOf(), query.range.to.valueOf());\n                    panelData.push(...this.transformations.transform(result, target));\n                }\n                else {\n                    throw { message: `BPFtrace error:\\n\\n${script.output}` };\n                }\n            }\n            catch (error) {\n                // catch all exceptions and add the refId of the panel\n                error.refId = target.refId;\n                throw error;\n            }\n        }\n\n        return { data: panelData };\n    }\n}\n","import { TargetFormat } from '../lib/types';\nimport { PcpQueryCtrl } from '../lib/pcp_query_ctrl';\n\nexport class PCPBPFtraceDatasourceQueryCtrl extends PcpQueryCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/query.editor.html';\n\n    formats: any = [];\n\n    /** @ngInject **/\n    constructor($scope: any, $injector: any) {\n        super($scope, $injector, 5000);\n\n        this.target.code = this.target.code || \"\";\n        this.target.format = this.target.format || this.getDefaultFormat();\n        this.target.url = this.target.url || null;\n\n        this.formats = [\n            { text: \"Time series\", value: TargetFormat.TimeSeries },\n            { text: \"Table\", value: TargetFormat.Table },\n            { text: \"Heatmap\", value: TargetFormat.Heatmap },\n        ];\n    }\n\n    getDefaultFormat() {\n        if (this.panelCtrl.panel.type === 'table') {\n            return TargetFormat.Table;\n        } else if (this.panelCtrl.panel.type === 'heatmap') {\n            return TargetFormat.Heatmap;\n        }\n        return TargetFormat.TimeSeries;\n    }\n\n}\n","import { PCPBPFtraceDatasource } from './datasource';\nimport { PCPBPFtraceDatasourceQueryCtrl } from './query_ctrl';\n\nclass PCPBPFtraceConfigCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/config.html';\n}\n\nclass PCPBPFtraceAnnotationsQueryCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/annotations.editor.html';\n}\n\nexport {\n    PCPBPFtraceDatasource as Datasource,\n    PCPBPFtraceDatasourceQueryCtrl as QueryCtrl,\n    PCPBPFtraceConfigCtrl as ConfigCtrl,\n    PCPBPFtraceAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\nimport Context from './context';\nimport { Datapoint, TimeSeriesData, DatastoreQueryResultRow } from './types';\n\ntype StoredDatapoint = [number | string | undefined, number, number?];\n\nexport default class DataStore {\n    private store: Record<string, Record<string, StoredDatapoint[]>> = {}; // store[metric][instance] = [val,ts,origVal]\n\n    constructor(private context: Context, private localHistoryAgeMs: number) {\n    }\n\n    private ingestCounterMetric(instanceStore: StoredDatapoint[], instance: any, pollTimeEpochMs: number) {\n        // first value: store it as undefined, to be filtered by queryTimeSeries()\n        // subsequent values: perform rate conversation\n        if (instanceStore.length > 0) {\n            let [, prevTimeMs, prevOrigVal] = instanceStore[instanceStore.length - 1];\n            const deltaSec = (pollTimeEpochMs - prevTimeMs) / 1000;\n            instanceStore.push([(instance.value - prevOrigVal!) / deltaSec, pollTimeEpochMs, instance.value]);\n        }\n        else {\n            instanceStore.push([undefined, pollTimeEpochMs, instance.value]);\n        }\n    }\n\n    private async ingestMetric(metricStore: Record<string, StoredDatapoint[]>, metric: any, pollTimeEpochMs: number) {\n        const metadata = await this.context.metricMetadata(metric.name);\n        if (!metadata) {\n            console.info(`skipping ingestion of ${metric.name}: metadata not available`);\n            return;\n        }\n\n        for (const instance of metric.instances) {\n            // do not store history for the bpftrace control and output metrics\n            if (!(instance.instanceName in metricStore) ||\n                (metadata.labels && [\"control\", \"output\"].includes(metadata.labels.metrictype))) {\n                metricStore[instance.instanceName] = [];\n            }\n\n            if (metadata.sem === \"counter\") {\n                this.ingestCounterMetric(metricStore[instance.instanceName], instance, pollTimeEpochMs);\n            }\n            else {\n                metricStore[instance.instanceName].push([instance.value, pollTimeEpochMs]);\n            }\n        }\n    }\n\n    async ingest(data: any) {\n        if (_.isEmpty(data))\n            return;\n\n        const pollTimeEpochMs = data.timestamp.s ? data.timestamp.s * 1000 + data.timestamp.us / 1000 : data.timestamp * 1000;\n        for (const metric of data.values) {\n            if (!(metric.name in this.store)) {\n                this.store[metric.name] = {};\n            }\n\n            await this.ingestMetric(this.store[metric.name], metric, pollTimeEpochMs);\n        }\n    }\n\n    queryMetric(metric: string, from: number, to: number) {\n        const results: TimeSeriesData[] = [];\n        for (const instance in this.store[metric]) {\n            let target = {\n                // for metrics without instance domains, show metric name\n                target: instance === \"null\" ? metric : instance,\n                datapoints: this.store[metric][instance].filter((dataPoint: StoredDatapoint) => (\n                    from <= dataPoint[1] && dataPoint[1] <= to && dataPoint[0] != undefined\n                )) as Datapoint[]\n            };\n            results.push(target);\n        }\n        return results;\n    }\n\n    queryMetrics(metrics: string[], from: number, to: number) : DatastoreQueryResultRow[] {\n        return metrics.map((metric: string) => ({ name: metric, instances: this.queryMetric(metric, from, to) }));\n    }\n\n    cleanExpiredMetrics() {\n        const keepExpiry = new Date().getTime() - this.localHistoryAgeMs\n        for (const metric in this.store) {\n            for (const instance in this.store[metric]) {\n                this.store[metric][instance] = this.store[metric][instance].filter(\n                    (dataPoint: Datapoint) => dataPoint[1] > keepExpiry\n                );\n            }\n        }\n    }\n}\n","import Context from \"./context\";\nimport DataStore from \"./datastore\";\nimport Poller from './poller';\n\nexport interface Endpoint {\n    id: string;\n    context: Context;\n    poller: Poller;\n    datastore: DataStore;\n}\n\nexport default class EndpointRegistry<T extends Endpoint> {\n    private endpoints: Record<string, T> = {};\n\n    private generateId(url: string, container?: string) {\n        if (!container)\n            container = \"\";\n        return `${url}::${container}`;\n    }\n\n    find(url: string, container?: string) {\n        const id = this.generateId(url, container);\n        return this.endpoints[id];\n    }\n\n    create(url: string, container: string | undefined, keepPollingMs: number, localHistoryAgeMs: number) {\n        const id = this.generateId(url, container);\n        const context = new Context(url, container);\n        const datastore = new DataStore(context, localHistoryAgeMs);\n        const poller = new Poller(context, datastore, keepPollingMs);\n\n        this.endpoints[id] = { id, context, datastore, poller } as T;\n        return this.endpoints[id];\n    }\n\n    list() {\n        return Object.values(this.endpoints);\n    }\n\n}","import _ from \"lodash\";\nimport Context from \"./context\";\nimport DataStore from \"./datastore\";\n\nexport default class Poller {\n    private requestedMetrics: Record<string, number> = {}; // {metric: lastRequested}\n\n    constructor(private context: Context, private datastore: DataStore, private keepPollingMs: number) {\n    }\n\n    async poll() {\n        const metrics = Object.keys(this.requestedMetrics);\n        if (metrics.length == 0) {\n            return;\n        }\n\n        const data = await this.context.fetch(metrics, true);\n        await this.datastore.ingest(data);\n\n        const returnedMetrics = data.values.map((metric: any) => metric.name);\n        const missingMetrics = _.difference(metrics, returnedMetrics);\n        if (missingMetrics.length > 0) {\n            console.debug(`fetch didn't include result for ${missingMetrics.join(', ')}, clearing it from requested metrics`);\n            for (const missingMetric of missingMetrics) {\n                delete this.requestedMetrics[missingMetric];\n            }\n        }\n    }\n\n    async ensurePolling(metrics: string[], failOnError: boolean = true) {\n        const metadatas = await this.context.metricMetadatas(metrics);\n        const validMetrics = _.intersection(metrics, Object.keys(metadatas));\n\n        if (failOnError && validMetrics.length < metrics.length) {\n            const invalidMetrics = _.difference(metrics, validMetrics);\n            const s = invalidMetrics.length !== 1 ? 's' : '';\n            throw { message: `Cannot find metric${s} ${invalidMetrics.join(', ')}. Please check if the PMDA is enabled.` };\n        }\n\n        const now = new Date().getTime()\n        for (const metric of validMetrics) {\n            this.requestedMetrics[metric] = now\n        }\n        return validMetrics;\n    }\n\n    removeMetricsFromPolling(metrics: string[]) {\n        for (const metric of metrics) {\n            delete this.requestedMetrics[metric];\n        }\n    }\n\n    cleanupExpiredMetrics() {\n        // clean up any not required metrics\n        const pollExpiry = new Date().getTime() - this.keepPollingMs;\n        this.requestedMetrics = _.pickBy(this.requestedMetrics, (lastRequested: number) => lastRequested > pollExpiry);\n    }\n}\n","import _ from \"lodash\";\n\n// typescript decorator which makes sure that this function\n// is called only once at a time\n// subsequent calls return the promise of the first call\nexport function synchronized(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    let method = descriptor.value;\n\n    descriptor.value = function () {\n        if (!this.inflightCalls)\n            this.inflightCalls = {};\n        if (this.inflightCalls[propertyKey])\n            return this.inflightCalls[propertyKey];\n\n        this.inflightCalls[propertyKey] = method.apply(this, arguments);\n        return this.inflightCalls[propertyKey].then((result: any) => {\n            this.inflightCalls[propertyKey] = null;\n            return result;\n        }, (reason: any) => {\n            this.inflightCalls[propertyKey] = null;\n            throw reason;\n        });\n    }\n}\n\nexport function isBlank(str: string) {\n    return !(_.isString(str) && str.trim().length > 0);\n}\n\nexport function getDashboardVariables(variableSrv: any): any {\n    const variables = {};\n    if (!variableSrv.variables) {\n        // variables are not defined on the datasource settings page\n        return {};\n    }\n\n    variableSrv.variables.forEach((variable) => {\n        let variableValue = variable.current.value;\n        if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n            if (variable.allValue === null) {\n                variableValue = variable.options.slice(1).map((textValuePair: any) => textValuePair.value);\n            } else {\n                variableValue = variable.allValue;\n            }\n        }\n\n        variables[variable.name] = {\n            text: variable.current.text,\n            value: variableValue,\n        };\n    });\n\n    return variables;\n}\n\nexport function getConnectionParams(variableSrv: any, target: any, instanceSettings: any): [string, string?] {\n    const dashboardVariables = getDashboardVariables(variableSrv);\n    let url: string = \"\";\n    let container: string | undefined;\n\n    if (!isBlank(target.url))\n        url = target.url;\n    else if (dashboardVariables.url && !isBlank(dashboardVariables.url.value))\n        url = dashboardVariables.url.value;\n    else if (!isBlank(instanceSettings.url))\n        url = instanceSettings.url;\n    else\n        throw { message: \"Cannot find any connection url.\" };\n\n    if (!isBlank(target.container))\n        container = target.container;\n    else if (dashboardVariables.container && !isBlank(dashboardVariables.container.value))\n        container = dashboardVariables.container.value;\n    else if (!isBlank(instanceSettings.container))\n        container = instanceSettings.container;\n\n    return [url, container];\n}\n","import _ from 'lodash';\nimport { synchronized } from './utils';\nimport { MetricMetadata } from './types';\n\nexport default class Context {\n\n    static datasourceRequest: (options: any) => any;\n    private context: string;\n    private metricMetadataCache: Record<string, MetricMetadata> = {};\n    private indomCache: Record<string, Record<number, string>> = {}; // indomCache[metric][instance_id] = instance_name\n    private d: string = '';\n\n    constructor(readonly url: string, readonly container?: string) {\n        // if port != 44322, use pmwebd API with underscore\n        // TODO: remove once transition to pmproxy is done\n        if (!url.includes(\":44322\")) {\n            this.d = '_';\n        }\n    }\n\n    @synchronized\n    async createContext() {\n        let contextUrl = `${this.url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`;\n\n        const contextResponse = await Context.datasourceRequest({ url: contextUrl });\n        this.context = contextResponse.data.context;\n\n        if (this.container) {\n            await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: \"pmcd.client.container\", value: this.container }\n            });\n        }\n    }\n\n    private async ensureContext(fn: () => any) {\n        if (!this.context) {\n            await this.createContext();\n        }\n\n        try {\n            return await fn();\n        } catch (error) {\n            if ((_.isString(error.data) && error.data.includes(\"12376\")) ||\n                (_.isObject(error.data) && error.data.message.includes(\"unknown context identifier\"))) {\n                console.debug(\"context expired, creating new context...\");\n                await this.createContext();\n                return await fn();\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n\n    async metricMetadatas(metrics: string[]): Promise<{ [key: string]: MetricMetadata }> {\n        const requiredMetrics = _.difference(metrics, Object.keys(this.metricMetadataCache));\n        if (requiredMetrics.length > 0) {\n            requiredMetrics.push(\"pmcd.control.timeout\"); // TODO: remove workaround - server should return empty list if no metrics were found\n            const metadata = await this.ensureContext(async () => {\n                const response = await Context.datasourceRequest({\n                    //url: `${this.url}/pmapi/${this.context}/${this.d}metric`,\n                    url: `http://localhost:44322/pmapi/metric`,\n                    params: { names: requiredMetrics.join(',') }\n                });\n                return response.data.metrics;\n            });\n\n            for (const metric of metadata) {\n                this.metricMetadataCache[metric.name] = metric;\n            }\n        }\n        return _.pick(this.metricMetadataCache, metrics); // _.pick ignores non-existing keys\n    }\n\n    async metricMetadata(metric: string) {\n        const metadata = await this.metricMetadatas([metric]);\n        return metadata[metric];\n    }\n\n    private async refreshIndoms(metric: string) {\n        const indoms = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}indom`,\n                params: { name: metric }\n            });\n            return response.data.instances;\n        });\n\n        // convert [{instance: X, name: Y}] to {instance: name}\n        this.indomCache[metric] = {};\n        for (const indom of indoms) {\n            this.indomCache[metric][indom.instance] = indom.name;\n        }\n        return this.indomCache[metric];\n    }\n\n    private async updateInstanceNames(metric: any) {\n        if (metric.instances.length == 0) {\n            return;\n        } else if (metric.instances[0].instance === null || metric.instances[0].instance === -1) {\n            // this metric has no instances (single value)\n            metric.instances[0].instanceName = null;\n            return;\n        }\n\n        if (!(metric.name in this.indomCache))\n            this.indomCache[metric.name] = await this.refreshIndoms(metric.name);\n\n        let refreshed = false;\n        for (const instance of metric.instances) {\n            instance.instanceName = this.indomCache[metric.name][instance.instance];\n            if (!instance.instanceName && !refreshed) {\n                // refresh instances at max once per metric\n                this.indomCache[metric.name] = await this.refreshIndoms(metric.name);\n                instance.instanceName = this.indomCache[metric.name][instance.instance];\n                refreshed = true;\n            }\n        }\n    }\n\n    async fetch(metrics: string[], instanceNames: boolean = false) {\n        metrics.push(\"pmcd.control.timeout\"); // TODO: remove workaround - server should return empty list if no metrics were found\n\n        const data = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}fetch`,\n                params: { names: metrics.join(',') }\n            });\n            return response.data;\n        });\n\n        const returnedMetrics = data.values.map((metric: any) => metric.name);\n        const missingMetrics = _.difference(metrics, returnedMetrics);\n        if (missingMetrics.length > 0) {\n            console.debug(`fetch didn't include result for ${missingMetrics.join(', ')}, clearing it from metric metadata and indom cache`);\n            for (const missingMetric of missingMetrics) {\n                delete this.metricMetadataCache[missingMetric];\n                delete this.indomCache[missingMetric];\n            }\n        }\n\n        if (instanceNames) {\n            for (const metric of data.values) {\n                await this.updateInstanceNames(metric);\n            }\n        }\n\n        return data;\n    }\n\n    async store(metric: string, value: string) {\n        return await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: metric, value: value }\n            });\n            return response.data;\n        });\n    }\n\n    async children(prefix: string) {\n        return await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}children`,\n                params: { prefix: prefix }\n            });\n            return response.data;\n        });\n    }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;"],"sourceRoot":""}