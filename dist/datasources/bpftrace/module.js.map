{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./datasources/bpftrace/datasource.ts","webpack:///./datasources/bpftrace/context.ts","webpack:///./datasources/bpftrace/datastore.ts","webpack:///./datasources/bpftrace/script_registry.ts","webpack:///./datasources/bpftrace/poller.ts","webpack:///./datasources/bpftrace/endpoint_registry.ts","webpack:///./datasources/bpftrace/transformations.ts","webpack:///./datasources/bpftrace/query_ctrl.ts","webpack:///./datasources/bpftrace/module.ts","webpack:///external \"app/plugins/sdk\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","TargetFormat","Context","url","container","this","contextPromise","metricMetadataCache","indomCache","includes","_createContext","contextUrl","datasourceRequest","contextResponse","_a","sent","context","data","params","createContext","ensureContext","fn","error_1","console","debug","fetchMetricMetadata","prefix","__awaiter","_this","metrics","_i","metrics_1","length","metric","findMetricMetadata","refreshIndoms","instances","indoms","indoms_1","indom","instance","fetch","instanceNames","names","join","_d","values","instanceName","indomsForMetric","refreshed","_c","_b","store","DataStore","oldestDataMs","ingestMetric","metricStore","pollTimeEpochMs","metadata","info","instanceStore","labels","metrictype","sem","prevTimeMs","prevOrigVal","deltaSec","push","ingest","external_lodash_default","a","isEmpty","timestamp","us","queryTimeSeries","from","to","targetResults","target","datapoints","filter","dataPoint","cleanExpiredMetrics","keepExpiry","Date","getTime","ScriptRegistry","poller","keepPollingMs","scripts","failedScripts","ensureActive","code","script","find","lastRequested","register","bpftrace_context","response","JSON","parse","status","message","output","cleanupExpiredScripts","scriptExpiry","pickBy","syncState","status_metric","output_metric","this_1","script_metrics","vars","map","var_","removeMetricsFromPolling","metric_split","split","script_name","metric_field","Poller","datastore","requestedMetrics","poll","keys","ensurePolling","now","metrics_2","cleanupExpiredMetrics","pollExpiry","EndpointRegistry","endpoints","generateId","id","bpftrace_datastore","bpftrace_poller","scriptRegistry","script_registry","list","Transformations","templateSrv","getLabel","legendFormat","replace","updateLabels","transformToHistogram","targetResults_1","Math","ceil","transformToTable","tableText","table","columns","rows","type","lines","columnSizes","line","trim","tableHeaders","colStartAt","indexOf","colEndAt","undefined","text","row","colSize","substring","lines_1","transform","format","TimeSeries","Heatmap","Table","POLL_INTERVAL_MS","SCRIPT_SYNC_INTERVAL_MS","datasource_PCPBPFtraceDatasource","PCPBPFtraceDatasource","instanceSettings","$q","backendSrv","variableSrv","q","withCredentials","headers","Content-Type","basicAuth","doRequest","endpointRegistry","endpoint_registry","transformations","setInterval","doPollAll","syncScriptStates","$inject","endpoint","getMetricNameForMetricType","metricMetadata","getMetricNamesForTarget","targets","dashboardVariables","getVariables","hide","result","options","range","valueOf","apply","handleError","error","refId","title","datasource_generator","variables","variable","variableValue","isEqual","allValue","slice","textValuePair","current","query_ctrl_PCPBPFtraceDatasourceQueryCtrl","_super","$scope","$injector","formats","getDefaultFormat","__extends","PCPBPFtraceDatasourceQueryCtrl","panelCtrl","panel","refreshMetricData","templateUrl","__webpack_exports__","PCPBPFtraceConfigCtrl","PCPBPFtraceQueryOptionsCtrl","PCPBPFtraceAnnotationsQueryCtrl"],"mappings":"qEACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,uBClFAhC,EAAAD,QAAAkC,+CC+BYC,g0CCtBZ,WASI,SAAAC,EAAqBC,EAAsBC,QAAA,IAAAA,MAAA,MAAtBC,KAAAF,MAAsBE,KAAAD,YALnCC,KAAAC,eAAuC,KACvCD,KAAAE,oBAAsD,GACtDF,KAAAG,WAAqD,GACrDH,KAAA/B,EAAY,GAKX6B,EAAIM,SAAS,YACdJ,KAAK/B,EAAI,KAyIrB,OArIkB4B,EAAAN,UAAAc,eAAd,2GAG4B,OAFpBC,EAAgBN,KAAKF,IAAG,mDAEJ,GAAMD,EAAQU,kBAAkB,CAAET,IAAKQ,mBAAzDE,EAAkBC,EAAAC,OACxBV,KAAKW,QAAUH,EAAgBI,KAAKD,QAEhCX,KAAKD,UACL,GAAMF,EAAQU,kBAAkB,CAC5BT,IAAQE,KAAKF,IAAG,UAAUE,KAAKW,QAAO,IAAIX,KAAK/B,EAAC,QAChD4C,OAAQ,CAAE3C,KAAM,wBAAyBU,MAAOoB,KAAKD,cAHzD,aACAU,EAAAC,wCAUFb,EAAAN,UAAAuB,cAAN,mGACI,OAAId,KAAKC,eACL,GAAOD,KAAKC,iBAEhBD,KAAKC,eAAiBD,KAAKK,iBAC3B,GAAML,KAAKC,+BAAXQ,EAAAC,OACAV,KAAKC,eAAiB,eAGpBJ,EAAAN,UAAAwB,cAAN,SAAoBC,wGACXhB,KAAKW,QAAN,MACA,GAAMX,KAAKc,wBAAXL,EAAAC,wBAIO,gCAAMM,YAAb,SAAOP,EAAAC,kCAEGE,MAAQK,EAAML,KAAKR,SAAS,+BAClCc,QAAQC,MAAM,4CACd,GAAMnB,KAAKc,kBAFX,aAGO,OADPL,EAAAC,OACO,GAAMM,YAAb,SAAOP,EAAAC,eAGP,MAAMO,4CAKZpB,EAAAN,UAAA6B,oBAAN,SAA0BC,gHAKN,OAJZR,EAAc,GACdQ,IACAR,EAAOQ,OAASA,GAEJ,GAAMrB,KAAKe,cAAc,kBAAAO,EAAAC,OAAA,qEAEpB,SAAM1B,EAAQU,kBAAkB,CAC7CT,IAAK,sCACLe,OAAMA,YAEV,SAJiBJ,EAAAC,OAIDE,KAAKY,wBAIzB,IAVMA,EAAUf,EAAAC,OAShBV,KAAKE,oBAAsB,GAC3BuB,EAAA,EAAqBC,EAAAF,EAAAC,EAAAC,EAAAC,OAAAF,IAAVG,EAAMF,EAAAD,GACbzB,KAAKE,oBAAoB0B,EAAO1D,MAAQ0D,kBAIhD/B,EAAAN,UAAAsC,mBAAA,SAAmBD,GACf,OAAO5B,KAAKE,oBAAoB0B,IAG9B/B,EAAAN,UAAAuC,cAAN,SAAoBF,8GACD,SAAM5B,KAAKe,cAAc,kBAAAO,EAAAC,OAAA,qEACnB,SAAM1B,EAAQU,kBAAkB,CAC7CT,IAAQE,KAAKF,IAAG,UAAUE,KAAKW,QAAO,IAAIX,KAAK/B,EAAC,QAChD4C,OAAQ,CAAE3C,KAAM0D,aAEpB,SAJiBnB,EAAAC,OAIDE,KAAKmB,0BAKzB,IAVMC,EAASvB,EAAAC,OASfV,KAAKG,WAAWyB,GAAU,GAC1BH,EAAA,EAAoBQ,EAAAD,EAAAP,EAAAQ,EAAAN,OAAAF,IAATS,EAAKD,EAAAR,GACZzB,KAAKG,WAAWyB,GAAQM,EAAMC,UAAYD,EAAMhE,KAEpD,SAAO8B,KAAKG,WAAWyB,UAGrB/B,EAAAN,UAAA6C,MAAN,SAAYZ,EAAmBa,eAAA,IAAAA,OAAA,iHACd,SAAMrC,KAAKe,cAAc,kBAAAO,EAAAC,OAAA,qEACjB,SAAM1B,EAAQU,kBAAkB,CAC7CT,IAAQE,KAAKF,IAAG,UAAUE,KAAKW,QAAO,IAAIX,KAAK/B,EAAC,QAChD4C,OAAQ,CAAEyB,MAAOd,EAAQe,KAAK,gBAElC,SAJiB9B,EAAAC,OAIDE,wBALdA,EAAO4B,EAAA9B,QAQT2B,EAAA,cAEgC,EAAX5B,EAAAG,EAAK6B,+BAALhB,EAAAhB,EAAAkB,OACc,IADxBC,EAAMnB,EAAAgB,IACFM,UAAUJ,OACjB,OACyC,IAAlCC,EAAOG,UAAU,GAAGI,UAC3BP,EAAOG,UAAU,GAAGW,aAAe,KACnC,QAGAC,EAAkB3C,KAAKG,WAAWyB,EAAO1D,OACzC,MACkB,GAAM8B,KAAK8B,cAAcF,EAAO1D,OAV1B,aAUxByE,EAAkBH,EAAA9B,wBAElBkC,GAAY,IACuB,EAAhBC,EAAAjB,EAAOG,kCAAPe,EAAAD,EAAAlB,SAAZQ,EAAQU,EAAAC,IACNJ,aAAeC,EAAgBR,EAASA,UAC5CA,EAASO,cAAiBE,EAA3B,MAEkB,GAAM5C,KAAK8B,cAAcF,EAAO1D,QAJnB,aAI/ByE,EAAkBH,EAAA9B,OAClByB,EAASO,aAAeC,EAAgBR,EAASA,UACjDS,GAAY,0BANGE,wBAbNrB,iBAyBzB,SAAOb,SAGLf,EAAAN,UAAAwD,MAAN,SAAYnB,EAAgBhD,sGACjB,SAAMoB,KAAKe,cAAc,WAC5B,OAAOlB,EAAQU,kBAAkB,CAC7BT,IAAQyB,EAAKzB,IAAG,UAAUyB,EAAKZ,QAAO,IAAIY,EAAKtD,EAAC,QAChD4C,OAAQ,CAAE3C,KAAM0D,EAAQhD,MAAOA,eAHvC,SAAO6B,EAAAC,cAOfb,EAtJA,KCLA,WAGI,SAAAmD,EAAoBrC,EAA0BsC,GAA1BjD,KAAAW,UAA0BX,KAAAiD,eAFtCjD,KAAA+C,MAAqD,GAgFjE,OA3EIC,EAAAzD,UAAA2D,aAAA,SAAaC,EAAkBvB,EAAawB,GACxC,IAAMC,EAAWrD,KAAKW,QAAQkB,mBAAmBD,EAAO1D,MACnDmF,GACDnC,QAAQoC,KAAK,yBAAyB1B,EAAO1D,KAAI,4BAGrD,IAAuB,IAAAuD,EAAA,EAAAhB,EAAAmB,EAAOG,UAAPN,EAAAhB,EAAAkB,OAAAF,IAAkB,CAApC,IAAMU,EAAQ1B,EAAAgB,GACX8B,EAAgBJ,EAAYhB,EAASO,cAOzC,KAJKa,GAAkBF,EAASG,QAAyC,WAA/BH,EAASG,OAAOC,cACtDF,EAAgBJ,EAAYhB,EAASO,cAAgB,IAGpC,YAAjBW,EAASK,IACT,GAAIH,EAAc5B,OAAS,EAAG,CACtB,IAAAmB,EAAAS,IAAA5B,OAAA,GAAGgC,EAAAb,EAAA,GAAYc,EAAAd,EAAA,GACbe,GAAYT,EAAkBO,GAAc,IAClDJ,EAAcO,KAAK,EAAE3B,EAASvD,MAAQgF,GAAgBC,EAAUT,EAAiBjB,EAASvD,aAG1F2E,EAAcO,KAAK,CAAC3B,EAASvD,MAAOwE,EAAiBjB,EAASvD,aAIlE2E,EAAcO,KAAK,CAAC3B,EAASvD,MAAOwE,MAKhDJ,EAAAzD,UAAAwE,OAAA,SAAOnD,GACH,IAAIoD,EAAAC,EAAEC,QAAQtD,GAId,IADA,IAAMwC,EAAqC,IAAnBxC,EAAKuD,UAAUzE,EAAWkB,EAAKuD,UAAUC,GAAK,IACjD3C,EAAA,EAAAhB,EAAAG,EAAK6B,OAALhB,EAAAhB,EAAAkB,OAAAF,IAAa,CAA7B,IAAMG,EAAMnB,EAAAgB,GACRzB,KAAK+C,MAAMnB,EAAO1D,QACnB8B,KAAK+C,MAAMnB,EAAO1D,MAAQ,IAG9B8B,KAAKkD,aAAalD,KAAK+C,MAAMnB,EAAO1D,MAAO0D,EAAQwB,KAI3DJ,EAAAzD,UAAA8E,gBAAA,SAAgB7C,EAAmB8C,EAAcC,GAE7C,IADA,IAAIC,EAAoC,GACnB/C,EAAA,EAAAC,EAAAF,EAAAC,EAAAC,EAAAC,OAAAF,IAAS,CAAzB,IAAMG,EAAMF,EAAAD,GACb,GAAMG,KAAU5B,KAAK+C,MAGrB,IAAK,IAAMZ,KAAYnC,KAAK+C,MAAMnB,GAAS,CACvC,IAAI6C,EAAS,CAETA,OAAqB,SAAbtC,EAAsBP,EAASO,EACvCuC,WAAY1E,KAAK+C,MAAMnB,GAAQO,GAAUwC,OAAO,SAACC,GAAyB,OACtEN,GAAQM,EAAU,IAAMA,EAAU,IADoCL,KAK9EC,EAAcV,KAAKW,IAG3B,OAAOD,GAGXxB,EAAAzD,UAAAsF,oBAAA,WACI,IAAMC,GAAa,IAAIC,MAAOC,UAAYhF,KAAKiD,aAC/C,IAAK,IAAMrB,KAAU5B,KAAK+C,MACtB,IAAK,IAAMZ,KAAYnC,KAAK+C,MAAMnB,GAC9B5B,KAAK+C,MAAMnB,GAAQO,GAAYnC,KAAK+C,MAAMnB,GAAQO,GAAUwC,OACxD,SAACC,GAAyB,OAAAA,EAAU,GAAVE,KAK9C9B,EAjFA,izCCSA,WAWI,SAAAiC,EAAoBtE,EAA0BuE,EAAwBC,GAAlDnF,KAAAW,UAA0BX,KAAAkF,SAAwBlF,KAAAmF,gBAR9DnF,KAAAoF,QAA0C,GAM1CpF,KAAAqF,cAAgD,GAiH5D,OA5GUJ,EAAA1F,UAAA+F,aAAN,SAAmBC,iGACf,OAAIA,KAAQvF,KAAKqF,cACb,GAAOrF,KAAKqF,cAAcE,KAGxBC,EAASxB,EAAAC,EAAEwB,KAAKpH,OAAOoE,OAAOzC,KAAKoF,SAAU,SAACI,GAA2B,OAAAA,EAAOD,OAAPA,MAE3EC,EAAOE,eAAgB,IAAIX,MAAOC,UAClC,GAAOQ,IAFP,aAKO,SAAMxF,KAAK2F,SAASJ,WAA3B,SAAO9E,EAAAC,cAITuE,EAAA1F,UAAAoG,SAAN,SAAeJ,uGACXrE,QAAQC,MAAM,qBAAsBoE,GAI9B5E,EAAU,IAAIiF,EAAQ5F,KAAKW,QAAQb,sBAErC,gCAAMa,EAAQoC,MAAM,4BAA6BwC,kBAAjD9E,EAAAC,oBAGA,iBAAUE,OAAQK,EAAML,KAAKR,SAAS,UAMlC,MAAMa,qBAGG,SAAMN,EAAQyB,MAAM,CAAC,yCAAhCyD,EAAWpF,EAAAC,QAEX8E,EAAyBM,KAAKC,MAAMF,EAASpD,OAAO,GAAGV,UAAU,GAAGnD,QACnE2G,KAAOA,EACdC,EAAOE,eAAgB,IAAIX,MAAOC,UAElC9D,QAAQC,MAAM,qCAAsCqE,GAC9B,YAAlBA,EAAOQ,OAAP,YAGA,MADAhG,KAAKqF,cAAcE,GAAQC,EACrB,CAAES,QAAS,sBAAsBT,EAAOU,eAK9C,OAFAlG,KAAKoF,QAAQI,EAAOtH,MAAQsH,EAE5B,GAAMxF,KAAKW,QAAQS,oBAAoB,oBAAvCX,EAAAC,wBAGJ,SAAO8E,SAGXP,EAAA1F,UAAA4G,sBAAA,WAEI,IAAMC,GAAe,IAAIrB,MAAOC,UAAYhF,KAAKmF,cACjDnF,KAAKoF,QAAUpB,EAAAC,EAAEoC,OAAOrG,KAAKoF,QAAS,SAACI,GAA2B,OAAAA,EAAOE,cAAPU,KAGhEnB,EAAA1F,UAAA+G,UAAN,iIACI,OAAItC,EAAAC,EAAEC,QAAQlE,KAAKoF,SACf,IAGJ,GAAMpF,KAAKW,QAAQS,oBAAoB,oBAGvC,IAHAoB,EAAA9B,OAEIc,EAAoB,cACbgE,GACP,IAAMe,EAAgB,oBAAoBf,EAAOtH,KAAI,UAC/CsI,EAAgB,oBAAoBhB,EAAOtH,KAAI,UAErD,GAAIuI,EAAK9F,QAAQkB,mBAAmB0E,IAAkBE,EAAK9F,QAAQkB,mBAAmB2E,GAClFhF,EAAQsC,KAAKyC,EAAeC,QAG3B,GAAsB,aAAlBhB,EAAOQ,OAAuB,CACnC9E,QAAQoC,KAAK,UAAUkC,EAAOtH,KAAI,2BAA2BsH,EAAOQ,QACpE,IAAMU,EAAiBlB,EAAOmB,KAAKC,IAAI,SAAAC,GAAQ,0BAAoBrB,EAAOtH,KAAI,SAA/B2I,WACxCJ,EAAKrB,QAAQI,EAAOtH,MAC3BuI,EAAKvB,OAAO4B,yBAAyBJ,YAZ7CjF,EAAA,EAAqBhB,EAAApC,OAAOoE,OAAOzC,KAAKoF,SAAnB3D,EAAAhB,EAAAkB,OAAAF,IAAV+D,EAAM/E,EAAAgB,KAAN+D,GAgBX,OAAuB,IAAnBhE,EAAQG,OACR,IAEa,GAAM3B,KAAKW,QAAQyB,MAAMZ,WAC1C,IADMqE,EAAWrD,EAAA9B,OACjBoC,EAAA,EAAqBD,EAAAgD,EAASpD,OAATK,EAAAD,EAAAlB,OAAAmB,IAAVlB,EAAMiB,EAAAC,GACPiE,EAAenF,EAAO1D,KAAK8I,MAAM,KACjCC,EAAcF,EAAa,GAC3BG,EAAeH,EAAa,IAE5BvB,EAASxF,KAAKoF,QAAQ6B,MAMF,WAAjBC,EACL1B,EAAOQ,OAASpE,EAAOG,UAAU,GAAGnD,MAEd,WAAjBsI,IACL1B,EAAOU,OAAStE,EAAOG,UAAU,GAAGnD,wBAIpDqG,EA1HA,izCCTA,WAGI,SAAAkC,EAAoBxG,EAA0ByG,EAA8BjC,GAAxDnF,KAAAW,UAA0BX,KAAAoH,YAA8BpH,KAAAmF,gBAFpEnF,KAAAqH,iBAA2C,GAiCvD,OA5BUF,EAAA5H,UAAA+H,KAAN,2GAEI,OAAsB,IADhB9F,EAAUnD,OAAOkJ,KAAKvH,KAAKqH,mBACrB1F,OACR,IAGS,GAAM3B,KAAKW,QAAQyB,MAAMZ,GAAS,kBAAzCZ,EAAOH,EAAAC,OACbV,KAAKoH,UAAUrD,OAAOnD,aAG1BuG,EAAA5H,UAAAiI,cAAA,SAAchG,GAEV,IADA,IAAMiG,GAAM,IAAI1C,MAAOC,UACFvD,EAAA,EAAAC,EAAAF,EAAAC,EAAAC,EAAAC,OAAAF,IAAS,CAAzB,IAAMG,EAAMF,EAAAD,GACbzB,KAAKqH,iBAAiBzF,GAAU6F,IAIxCN,EAAA5H,UAAAuH,yBAAA,SAAyBtF,GACrB,IAAqB,IAAAC,EAAA,EAAAiG,EAAAlG,EAAAC,EAAAiG,EAAA/F,OAAAF,IAAS,CAAzB,IAAMG,EAAM8F,EAAAjG,UACNzB,KAAKqH,iBAAiBzF,KAIrCuF,EAAA5H,UAAAoI,sBAAA,WAEI,IAAMC,GAAa,IAAI7C,MAAOC,UAAYhF,KAAKmF,cAC/CnF,KAAKqH,iBAAmBrD,EAAAC,EAAEoC,OAAOrG,KAAKqH,iBAAkB,SAAC3B,GAA0B,OAAAA,EAAAkC,KAE3FT,EAlCA,KCQA,oBAAAU,IACY7H,KAAA8H,UAAsC,GA0BlD,OAxBYD,EAAAtI,UAAAwI,WAAR,SAAmBjI,EAAaC,GAC5B,YAD4B,IAAAA,MAAA,MAClBD,EAAG,KAAKC,GAGtB8H,EAAAtI,UAAAkG,KAAA,SAAK3F,EAAaC,QAAA,IAAAA,MAAA,MACd,IAAMiI,EAAKhI,KAAK+H,WAAWjI,EAAKC,GAChC,OAAOC,KAAK8H,UAAUE,IAG1BH,EAAAtI,UAAAN,OAAA,SAAOa,EAAaC,EAA0BoF,EAAuBlC,GACjE,IAAM+E,EAAKhI,KAAK+H,WAAWjI,EAAKC,GAC1BY,EAAU,IAAIiF,EAAQ9F,EAAKC,GAC3BqH,EAAY,IAAIa,EAAUtH,EAASsC,GACnCiC,EAAS,IAAIgD,EAAOvH,EAASyG,EAAWjC,GACxCgD,EAAiB,IAAIC,EAAezH,EAASuE,EAAQC,GAG3D,OADAnF,KAAK8H,UAAUE,GAAM,CAAErH,QAAOA,EAAEyG,UAASA,EAAElC,OAAMA,EAAEiD,eAAcA,GAC1DnI,KAAK8H,UAAUE,IAG1BH,EAAAtI,UAAA8I,KAAA,WACI,OAAOhK,OAAOoE,OAAOzC,KAAK8H,YAGlCD,EA3BA,KCTA,WAEI,SAAAS,EAAoBC,GAAAvI,KAAAuI,cA6ExB,OA1EID,EAAA/I,UAAAiJ,SAAA,SAAS/D,EAAgBgE,GACrB,GAAIzE,EAAAC,EAAEC,QAAQuE,GACV,OAAOhE,EAGP,IAAIkC,EAAO,CACPxE,SAAU,CAAEvD,MAAO6F,IAEvB,OAAOzE,KAAKuI,YAAYG,QAAQD,EAAc9B,IAItD2B,EAAA/I,UAAAoJ,aAAA,SAAanE,EAAmCC,GAAhD,IAAAlD,EAAAvB,KACI,OAAOwE,EAAcoC,IAAI,SAAC/H,GACtB,MAAO,CAAE4F,OAAQlD,EAAKiH,SAAS3J,EAAE4F,OAAQA,EAAOgE,cAAe/D,WAAY7F,EAAE6F,eAIrF4D,EAAA/I,UAAAqJ,qBAAA,SAAqBpE,GACjB,IAAqB,IAAA/C,EAAA,EAAAoH,EAAArE,EAAA/C,EAAAoH,EAAAlH,OAAAF,IAAe,CAA/B,IAAMgD,EAAMoE,EAAApH,GAEbgD,EAAOA,OAASA,EAAOA,OAAOuC,MAAM,KAAK,GAGzCvC,EAAOC,WAAaD,EAAOC,WAAWkC,IAClC,SAAChC,GAAyB,OAACA,EAAU,GAAqC,IAAjCkE,KAAKC,KAAKnE,EAAU,GAAK,KAAcA,EAAtD,MAGlC,OAAOJ,GAGX8D,EAAA/I,UAAAyJ,iBAAA,SAAiBxE,GACb,IAAIyE,EAAY,GACZzE,EAAc7C,OAAS,IACvBsH,EAAYzE,EAAc,GAAGE,WAAW,GAAG,IAM/C,IAJA,IAAIwE,EAAqB,CAAEC,QAAS,GAAIC,KAAM,GAAIC,KAAM,SACpDC,EAAQL,EAAUjC,MAAM,MACxBuC,EAA8C,cAEzCC,GAEL,GAAoB,KADpBA,EAAOA,EAAKC,QACH9H,QAAgB6H,EAAKpJ,SAAS,gBAC1B,WAEb,GAAI4D,EAAAC,EAAEC,QAAQgF,EAAMC,SAEhB,IADA,IAAIO,EAAeF,EAAKxC,MAAM,SACrBrJ,EAAI,EAAGA,EAAI+L,EAAa/H,OAAQhE,IAAK,CAC1C,IAAMgM,EAAaH,EAAKI,QAAQF,EAAa/L,IACvCkM,EAAWlM,EAAI,EAAI+L,EAAa/H,OAAS6H,EAAKI,QAAQF,EAAa/L,EAAI,IAAM,OAAImM,EACvFZ,EAAMC,QAAQrF,KAAK,CAAEiG,KAAML,EAAa/L,KACxC4L,EAAYzF,KAAK,CAAC6F,EAAYE,QAGjC,CACD,IAAIG,EAAMT,EAAY3C,IAAI,SAACqD,GAAiB,OAAAT,EAAKU,UAAUD,EAAQ,GAAIA,EAAQ,IAAnCR,SAC5CP,EAAME,KAAKtF,KAAKkG,KAhBPvI,EAAA,EAAA0I,EAAAb,EAAA7H,EAAA0I,EAAAxI,OAAAF,IAAK,GAAT0I,EAAA1I,IAmBb,MAAO,CAACyH,IAGZZ,EAAA/I,UAAA6K,UAAA,SAAU5F,EAAmCC,GACzC,GAAIA,EAAO4F,SAAWzK,EAAa0K,WAC/B,OAAOtK,KAAK2I,aAAanE,EAAeC,GACvC,GAAIA,EAAO4F,SAAWzK,EAAa2K,QACpC,OAAOvK,KAAK4I,qBAAqBpE,GAChC,GAAIC,EAAO4F,QAAUzK,EAAa4K,MACnC,OAAOxK,KAAKgJ,iBAAiBxE,GAE7B,KAAM,CAAEyB,QAAS,0BAI7BqC,EA/EA,+yCNKMmC,EAAmB,IAEnBC,EAA0B,KAqBhC,SAAY9K,GACRA,EAAA,yBACAA,EAAA,cACAA,EAAA,kBAHJ,CAAYA,MAAY,KAMxB,MAAA+K,EAAA,WAgBQ,SAAKC,EAAwBC,EAA7BC,EAAAC,EAAAxC,EAAAyC,GACAhL,KAAK9B,KAAM2M,EAAiB3M,KAC5B8B,KAAKF,IAAL+K,EAAA/K,IACAE,KAAKiL,EAAAH,EACL9K,KAAK+K,WAALA,EACA/K,KAAKuI,YAAcA,EACnBvI,KAAKgL,cACLhL,KAAKkL,gBAAUL,EAAAK,gBAAElL,KAAAmL,QAAA,CAAjBC,eAAA,oBAEoC,iBAA3BP,EAAQQ,WAAoCR,EAAjDQ,UAAA1J,OAAA,IACH3B,KAAAmL,QAAA,cAAAN,EAAAQ,WAGDzF,EAAKrF,kBAAuBP,KAAAsL,UAA5BnM,KAAAa,MACAA,KAAKuL,iBAAkB,IAAIC,EAC3BxL,KAAAyL,gBAAiB,IAAUA,EAAYzL,KAAAuI,aACvCmD,YAAY1L,KAAK2L,UAAAxM,KAAAa,MAAsByK,GAC1CiB,YAAA1L,KAAA4L,iBAAAzM,KAAAa,MAAA0K,GAjCL,OAeIE,EAAAiB,QAAY,oBAAsB,kBAAY,cAAa,eAqBvDjB,EAAuBrL,UAAKoM,UAAA,WAAvB,QAAMlK,EAAQ,EAAAhB,EAAAT,KAAduL,iBAAAlD,OAAA5G,EAAAhB,EAAAkB,OAAAF,IAAA,CACD,IAAAqK,EAASrL,EAATgB,GACAqK,EAAS1E,UAAOvC,sBAChBiH,EAAS5G,OAAOyC,wBACnBmE,EAAA5G,OAAAoC,SAIDsD,EAAuBrL,UAAKqM,iBAAL,WAAlB,QAAMnK,EAAQ,EAAAhB,EAAAT,KAAduL,iBAAAlD,OAAA5G,EAAAhB,EAAAkB,OAAAF,IAAA,CACD,IAAAqK,EAASrL,EAAAgB,GACTqK,EAAS3D,eAAehC,wBAC3B2F,EAAA3D,eAAA7B,cAIDsE,EAAmBrL,UAAOwM,2BAAM,SAAApL,EAAA6E,EAAA/B,GAA3B,QAAMhC,EAAI,EAAAhB,EAAV+E,EAAAmB,KAAAlF,EAAAhB,EAAAkB,OAAAF,IAAA,CACD,IAAMoF,EAAMpG,EAAGgB,GACTG,EAAA,oBAAyB4D,EAAAtH,KAAmB,SAAlD2I,EACImF,EAAcrL,EAAIkB,mBAAyBD,GAElD,GAAAoK,KAAAxI,QAAAwI,EAAAxI,OAAAC,eAAA,OAAA7B,EANL,aAWIgJ,EAAIrL,UAAkB0M,wBAAyB,SAAAtL,EAAA8D,EAAAe,GAC3C,GAAAf,EAAO4F,SAAYzK,EAAI0K,WAAQ,OAAA9E,EAAAmB,KAAAC,IAAA,SAAoBC,GAAnD,0BAAArB,EAAAtH,KAAA,SAAA2I,IAGM,GAAApC,EAAS4F,SAAKzK,EAAA2K,QAA2B,CAInC,GAHR3I,EACA5B,KAAA+L,2BAEMpL,EAAA6E,EAAA,aAAW,OAAA5D,GAAA,MAAjBqE,QAAA,sDAGE,GAAAxB,EAAS4F,SAAKzK,EAAA4K,MAA2B,CAC/C,IAAI5I,EAGQ,GAHRA,EACA5B,KAAA+L,2BAEMpL,EAAA6E,EAAA,UAAW,OAAA5D,GAAA,MAAjBqE,QAAA,kEAhBZ,uJAsBU,OAEF,YAAAiG,QAAAvK,OAAA,SAAS,CAATf,KAAA,KAIEuL,EAAAnM,KAAAoM,iBACe,oCAAa,KAAA3K,EAAAhB,EAAAkB,QAAA,SAAvB,GAEH,IADJ8C,EAAIhE,EAAOgB,IACP4K,OAAA5H,EAAAc,KAAA,SAIE,GAEF,QADJA,EAAId,EAAKc,KAALkE,QACA9H,OAAA,SAGA,GACJ7B,OAAI,EAKAA,EAAAqM,EAAgBrM,KAAAqM,EAAhBrM,IAAAlB,MAAA+C,OAAA,EAAAwK,EAAArM,IAAAlB,MAAAoB,KAAAF,wCAGHgM,EAAA9L,KAAAuL,iBAAAtM,OAAAa,EAAA,KAtIW,IAED,gCA2IE,kEAHT,OAMU,GAAe,yBAARkG,QAAyC,aAAjCR,EAAwBQ,OAOrC,MAARC,QAAA,sBAAAT,EAAAU,eANA1E,EAASxB,KAATiM,wBAAAH,EAAAnL,QAAA8D,EAAAe,GAEIsG,EAAS5G,OAAAsC,cAAmBhG,GAChC8K,EAAAR,EAAA1E,UAAA/C,gBAAsB7C,EAAK+K,EAAgBC,MAAAlI,KAAUmI,UAAQF,EAA7DC,MAAAjI,GAAAkI,WALJjI,EAOKV,KAAA4I,MAAAlI,EAAAxE,KAAAyL,gBAAArB,UAAAkC,EAAA7H,iBAOL,kBAAAzE,KAAA2M,YAAA1L,EAAAwD,GAAA,MA3Ca,wBA+CrB,gBAAS,CAAT7D,KAAA4D,UAIAoG,EAAoBrL,UAApBoN,YAAA,SAAAC,EAAAnI,GADJ,MAEImI,EAAMC,MAANpI,EAAAoI,MAFJD,gIAMQ,+CAEA,0DACA,mBAAS,CAAmB5G,OAAO,UAA4BC,QAAO,yBAAtE6G,MAAA,mBAGA,OAAArM,EAAAC,OAAA,GACI,CACAsF,OAAO,QACPC,QAAO,qBAAAtF,EAAAb,IAHXgN,MAAA,gHASJ,OAAAC,EAAA/M,KAAA,SAAAS,GAAA,qIAIA,OAGO,OAFP8L,EAAQrB,gBAAelL,KAAvBkL,gBAEOqB,EAAApB,QAAAnL,KAAAmL,QAAA,yCAAP,gCAIAP,EAAArL,UAAA6M,aAAA,oBAEI,IAAApM,KAAAgL,YAAAgC,UAEH,SAEI,QAAIvL,EAAQ,EAAAhB,EAAAT,KAAZgL,YAAAgC,UAAAvL,EAAAhB,EAAAkB,OAAAF,IAAA,CACD,IAAIwL,EAAAxM,EAAagB,sBAEA,WAAbyL,GAAgClJ,EAAAC,EAAAkJ,QAAAD,EAAA,eACmCA,EAAvC,OAAxBD,EAAAG,SAA+DH,EAAAV,QAAAc,MAAA,GAAAzG,IAAA,SAAA0G,GAA/D,OAAAA,EAAA1O,QAGHqO,EAAAG,UAIDJ,EAAMC,EAAS/O,MAAQ,CACvB6L,KAAKkD,EAAEM,QAAAxD,KAFXnL,MAAAsO,GAjBR,OAAAF,GA1KJpC,EAAA,8TOlCA4C,EAAoD,SAAAC,mBAGlD,IAAAlM,EAAAkM,EAAA3P,KAAAkC,KAAA0N,EAAAC,IAAA3N,YAOEuB,EAAKqM,QAAO,GAEZrM,EAAKkD,OAALc,KACEhE,EAAAkD,OAAAc,MAAA,GAAEhE,EAAIkD,OAAE4F,OAAR9I,EAAAkD,OAAA4F,QAAA9I,EAAAsM,mBAAuBtM,EAAAqM,QAAO,EADjB7D,KAEb,cAAEnL,MAAMgB,EAAR0K,YAAiB,CAFJP,KAGb,QAAEnL,MAAMgB,EAAR4K,OAAmB,CAHrBT,KAAA,qCAPF+D,EAAAC,EAAAN,GACAM,EACElC,QAAc,UAAd,aAcEkC,EAAAxO,UAAAsO,iBAAA,WACD,MAA+B,UAFhC7N,KAEOgO,UAASC,MAAL5E,KACFzJ,EAAa4K,MACrB,YAAAxK,KAAAgO,UAAAC,MAAA5E,6BAMF0E,EAFDxO,UAAA2O,kBAAA,qCA5BkDH,EAApDI,YAAA,oDAAoD,cCHpD5Q,EAAAU,EAAAmQ,EAAA,+BAAAC,IAAA9Q,EAAAU,EAAAmQ,EAAA,qCAAAE,IAAA/Q,EAAAU,EAAAmQ,EAAA,yCAAAG,IAAAhR,EAAAU,EAAAmQ,EAAA,+BAAAzD,IACApN,EAAAU,EAAAmQ,EAAA,8BAAAZ,IAEA,IAAAa,aACS,SAAAA,YADTA,EAAAF,YAAA,iDAIAG,aACS,SAAAA,YADTA,EAAAH,YAAA,wDAIAI,aACS,SAAAA,YADTA,EAAAJ,YAAA,gECXA,SAAAzQ,EAAAD","file":"./datasources/bpftrace/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 127);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","///<reference path=\"../../../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\nimport _ from 'lodash';\nimport Context from './context';\nimport EndpointRegistry from './endpoint_registry';\nimport { BPFtraceScript } from './script_registry';\nimport Transformations from './transformations';\n\n// poll metric sources every X ms\nconst POLL_INTERVAL_MS = 1000\n// script sync interval\nconst SCRIPT_SYNC_INTERVAL_MS = 2000\n// we will keep polling a metric for up to X ms after it was last requested\nconst KEEP_POLLING_MS = 20000\n// age out time\nconst OLDEST_DATA_MS = 5 * 60 * 1000\n\nexport type Datapoint = [number | string, number, number?];\n\nexport interface TimeSeriesResult {\n    target: string;\n    datapoints: Datapoint[]\n}\n\nexport interface TableResult {\n    columns: any[]\n    rows: any[]\n    type: string\n}\n\nexport type TargetResult = TimeSeriesResult | TableResult;\n\nexport enum TargetFormat {\n    TimeSeries = \"time_series\",\n    Table = \"table\",\n    Heatmap = \"heatmap\",\n}\n\nexport class PCPBPFtraceDatasource {\n\n    name: string;\n    url: string;\n    q: any;\n    backendSrv: any;\n    templateSrv: any;\n    variableSrv: any;\n    withCredentials: boolean;\n    headers: any;\n\n    endpointRegistry: EndpointRegistry;\n    transformations: Transformations;\n\n    /** @ngInject **/\n    constructor(instanceSettings, $q, backendSrv, templateSrv, variableSrv) {\n        this.name = instanceSettings.name;\n        this.url = instanceSettings.url;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.variableSrv = variableSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n        Context.datasourceRequest = this.doRequest.bind(this);\n        this.endpointRegistry = new EndpointRegistry();\n        this.transformations = new Transformations(this.templateSrv);\n        setInterval(this.doPollAll.bind(this), POLL_INTERVAL_MS);\n        setInterval(this.syncScriptStates.bind(this), SCRIPT_SYNC_INTERVAL_MS);\n    }\n\n    doPollAll() {\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.datastore.cleanExpiredMetrics();\n            endpoint.poller.cleanupExpiredMetrics();\n            endpoint.poller.poll(); // poll() is async, but we don't wait for a result\n        }\n    }\n\n    syncScriptStates() {\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.scriptRegistry.cleanupExpiredScripts();\n            endpoint.scriptRegistry.syncState();\n        }\n    }\n\n    getMetricNameForMetricType(context: Context, script: BPFtraceScript, metrictype: string) {\n        for (const var_ of script.vars) {\n            const metric = `bpftrace.scripts.${script.name}.data.${var_}`;\n            const metricMetadata = context.findMetricMetadata(metric);\n            if (metricMetadata && metricMetadata.labels && metricMetadata.labels.metrictype === metrictype)\n                return metric;\n        }\n        return null;\n    }\n\n    getMetricNamesForTarget(context: Context, target: any, script: BPFtraceScript) {\n        if (target.format === TargetFormat.TimeSeries) {\n            return script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n        }\n        else if (target.format === TargetFormat.Heatmap) {\n            const metric = this.getMetricNameForMetricType(context, script, \"histogram\");\n            if (metric)\n                return [metric];\n            else\n                throw { message: \"Cannot find any histogram in this BPFtrace script.\" };\n        }\n        else if (target.format === TargetFormat.Table) {\n            const metric = this.getMetricNameForMetricType(context, script, \"output\");\n            if (metric)\n                return [metric];\n            else\n                throw { message: \"Table format is only supported with printf() BPFtrace scripts.\" };\n        }\n        return [];\n    }\n\n    async query(options: any) {\n        const query = options;\n        if (query.targets.length == 0) {\n            return { data: [] };\n        }\n\n        const dashboardVariables = this.getVariables();\n        const targetResults: TargetResult[] = [];\n        for (const target of query.targets) {\n            if (target.hide || !target.code)\n                continue;\n\n            // TODO: allow templating of bpftrace script code?\n            // possible clashes of grafana templating syntax with bpftrace syntax\n            const code = target.code.trim();\n            if (code.length === 0)\n                continue;\n\n            // TODO: also allow overriding of url in query editor\n            let url: string;\n            if (dashboardVariables.url && dashboardVariables.url.value.length > 0)\n                url = dashboardVariables.url.value;\n            else\n                url = this.url;\n\n            let endpoint = this.endpointRegistry.find(url);\n            if (!endpoint) {\n                endpoint = this.endpointRegistry.create(url, null, KEEP_POLLING_MS, OLDEST_DATA_MS);\n            }\n\n            let script: BPFtraceScript;\n            try {\n                // ensureActive registers the script (if required)\n                // need to wait for the promise to resolve, because the error\n                // has to be returned in the query() promise to show up in the panel\n                script = await endpoint.scriptRegistry.ensureActive(code);\n\n                if (script.status === \"started\" || script.status === \"starting\") {\n                    const metrics = this.getMetricNamesForTarget(endpoint.context, target, script);\n                    endpoint.poller.ensurePolling(metrics);\n\n                    let result = endpoint.datastore.queryTimeSeries(metrics, options.range.from.valueOf(), options.range.to.valueOf());\n                    targetResults.push(...this.transformations.transform(result, target));\n                }\n                else {\n                    throw { message: `BPFtrace error:\\n\\n${script.output}` };\n                }\n            }\n            catch (error) {\n                // catch all exceptions and handle them gracefully (by adding the refId of the panel)\n                this.handleError(error, target);\n                continue;\n            }\n        }\n\n        return { data: targetResults };\n    }\n\n    handleError(error: any, target: any) {\n        error.refId = target.refId;\n        throw error;\n    }\n\n    async testDatasource() {\n        let context = new Context(this.url, null);\n        try {\n            await context.createContext();\n            return { status: 'success', message: \"Data source is working\", title: \"Success\" };\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                message: `Cannot connect to ${context.url}`,\n                title: 'Error',\n            };\n        }\n    }\n\n    async metricFindQuery(query) {\n        return [];\n    }\n\n    async doRequest(options: any) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return await this.backendSrv.datasourceRequest(options);\n    }\n\n    getVariables(): any {\n        const variables = {};\n        if (!this.variableSrv.variables) {\n            // variables are not defined on the datasource settings page\n            return {};\n        }\n\n        for (let variable of this.variableSrv.variables) {\n            let variableValue = variable.current.value;\n            if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n                if (variable.allValue === null) {\n                    variableValue = variable.options.slice(1).map(textValuePair => textValuePair.value);\n                } else {\n                    variableValue = variable.allValue;\n                }\n            }\n\n            variables[variable.name] = {\n                text: variable.current.text,\n                value: variableValue,\n            };\n        }\n\n        return variables;\n    }\n}\n","import _ from 'lodash';\n\ninterface MetricMetadata {\n    name: string,\n    pmid: number,\n    sem: string,\n    labels: Record<string, any>\n}\n\nexport default class Context {\n\n    static datasourceRequest: (options: any) => any;\n    private context: string;\n    private contextPromise: Promise<void> | null = null;\n    private metricMetadataCache: Record<string, MetricMetadata> = {};\n    private indomCache: Record<string, Record<number, string>> = {}; // indomCache[metric][instance_id] = instance_name\n    private d: string = '';\n\n    constructor(readonly url: string, readonly container: string | null = null) {\n        // if port != 44322, use pmwebd API with underscore\n        // TODO: remove once transition to pmproxy is done\n        if (!url.includes(\":44322\")) {\n            this.d = '_';\n        }\n    }\n\n    private async _createContext() {\n        let contextUrl = `${this.url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`;\n\n        const contextResponse = await Context.datasourceRequest({ url: contextUrl });\n        this.context = contextResponse.data.context;\n\n        if (this.container) {\n            await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: \"pmcd.client.container\", value: this.container }\n            });\n        }\n    }\n\n    // this method ensures that only one context request will be sent at a time\n    // if there are 2 simultaneous calls to createContext(), the second call\n    // will return the promise of the first call\n    async createContext() {\n        if (this.contextPromise)\n            return this.contextPromise;\n\n        this.contextPromise = this._createContext();\n        await this.contextPromise;\n        this.contextPromise = null;\n    }\n\n    async ensureContext(fn: () => any) {\n        if (!this.context) {\n            await this.createContext();\n        }\n\n        try {\n            return await fn();\n        } catch (error) {\n            if (error.data && error.data.includes(\"unknown context identifier\")) {\n                console.debug(\"context expired, creating new context...\");\n                await this.createContext();\n                return await fn();\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n\n    async fetchMetricMetadata(prefix: string | null) {\n        let params: any = {};\n        if (prefix)\n            params.prefix = prefix;\n\n        const metrics = await this.ensureContext(async () => {\n            // TODO: use this.url again\n            const response = await Context.datasourceRequest({\n                url: `http://localhost:44322/pmapi/metric`,\n                params\n            });\n            return response.data.metrics;\n        });\n\n        this.metricMetadataCache = {};\n        for (const metric of metrics) {\n            this.metricMetadataCache[metric.name] = metric;\n        }\n    }\n\n    findMetricMetadata(metric: string) {\n        return this.metricMetadataCache[metric];\n    }\n\n    async refreshIndoms(metric: string) {\n        const indoms = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}indom`,\n                params: { name: metric }\n            });\n            return response.data.instances;\n        });\n\n        // convert [{instance: X, name: Y}] to {instance: name}\n        this.indomCache[metric] = {};\n        for (const indom of indoms) {\n            this.indomCache[metric][indom.instance] = indom.name;\n        }\n        return this.indomCache[metric];\n    }\n\n    async fetch(metrics: string[], instanceNames: boolean = false) {\n        const data = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}fetch`,\n                params: { names: metrics.join(',') }\n            });\n            return response.data;\n        });\n\n        if (instanceNames) {\n            // add instance names to instances\n            for (const metric of data.values) {\n                if (metric.instances.length == 0) {\n                    continue;\n                } else if (metric.instances[0].instance === -1) { // this metric has no instances (single value)\n                    metric.instances[0].instanceName = null;\n                    continue;\n                }\n\n                let indomsForMetric = this.indomCache[metric.name];\n                if (!indomsForMetric)\n                    indomsForMetric = await this.refreshIndoms(metric.name);\n\n                let refreshed = false;\n                for (const instance of metric.instances) {\n                    instance.instanceName = indomsForMetric[instance.instance];\n                    if (!instance.instanceName && !refreshed) {\n                        // refresh instances at max once per metric\n                        indomsForMetric = await this.refreshIndoms(metric.name);\n                        instance.instanceName = indomsForMetric[instance.instance];\n                        refreshed = true;\n                    }\n                }\n            }\n        }\n\n        return data;\n    }\n\n    async store(metric: string, value: string) {\n        return await this.ensureContext(() => {\n            return Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: metric, value: value }\n            })\n        });\n    }\n}\n","import _ from 'lodash';\nimport { Datapoint, TimeSeriesResult } from './datasource';\nimport Context from './context';\n\nexport default class DataStore {\n    private store: Record<string, Record<string, Datapoint[]>> = {}; // store[metric][instance] = [val,ts,origVal]\n\n    constructor(private context: Context, private oldestDataMs: number) {\n    }\n\n    ingestMetric(metricStore: any, metric: any, pollTimeEpochMs: number) {\n        const metadata = this.context.findMetricMetadata(metric.name);\n        if (!metadata) {\n            console.info(`skipping ingestion of ${metric.name}: metadata not available`);\n        }\n\n        for (const instance of metric.instances) {\n            let instanceStore = metricStore[instance.instanceName];\n\n            // for the bpftrace output variable, always recreate the metric store (do not store history)\n            if (!instanceStore || (metadata.labels && metadata.labels.metrictype === \"output\")) {\n                instanceStore = metricStore[instance.instanceName] = [];\n            }\n\n            if (metadata.sem === \"counter\") {\n                if (instanceStore.length > 0) {\n                    let [, prevTimeMs, prevOrigVal] = instanceStore[instanceStore.length - 1];\n                    const deltaSec = (pollTimeEpochMs - prevTimeMs) / 1000;\n                    instanceStore.push([(instance.value - prevOrigVal!) / deltaSec, pollTimeEpochMs, instance.value]);\n                }\n                else {\n                    instanceStore.push([instance.value, pollTimeEpochMs, instance.value]);\n                }\n            }\n            else {\n                instanceStore.push([instance.value, pollTimeEpochMs]);\n            }\n        }\n    }\n\n    ingest(data: any) {\n        if (_.isEmpty(data))\n            return;\n\n        const pollTimeEpochMs = data.timestamp.s * 1000 + data.timestamp.us / 1000;\n        for (const metric of data.values) {\n            if (!this.store[metric.name]) {\n                this.store[metric.name] = {};\n            }\n\n            this.ingestMetric(this.store[metric.name], metric, pollTimeEpochMs);\n        }\n    }\n\n    queryTimeSeries(metrics: string[], from: number, to: number) {\n        let targetResults: TimeSeriesResult[] = [];\n        for (const metric of metrics) {\n            if (!(metric in this.store))\n                continue;\n\n            for (const instance in this.store[metric]) {\n                let target = {\n                    // for metrics without instance domains, show metric name\n                    target: instance === \"null\" ? metric : instance,\n                    datapoints: this.store[metric][instance].filter((dataPoint: Datapoint) => (\n                        from <= dataPoint[1] && dataPoint[1] <= to\n                    ))\n                };\n\n                targetResults.push(target);\n            }\n        }\n        return targetResults;\n    }\n\n    cleanExpiredMetrics() {\n        const keepExpiry = new Date().getTime() - this.oldestDataMs\n        for (const metric in this.store) {\n            for (const instance in this.store[metric]) {\n                this.store[metric][instance] = this.store[metric][instance].filter(\n                    (dataPoint: Datapoint) => dataPoint[1] > keepExpiry\n                );\n            }\n        }\n    }\n}\n","import _ from 'lodash';\nimport Context from \"./context\";\nimport Poller from './poller';\n\nexport interface BPFtraceScript {\n    name: string;\n    vars: string[];\n    status: string;\n    output: string;\n    code: string;\n    lastRequested: number;\n}\n\nexport default class ScriptRegistry {\n\n    // currently active (requested) scripts\n    private scripts: Record<string, BPFtraceScript> = {}; // {name: BPFtraceScript}\n\n    // a script which failed once will fail every time\n    // store them in a separate object, otherwise the syncState()\n    // will clean them (as they don't exist on the PMDA)\n    // and the datasource will keep re-adding them\n    private failedScripts: Record<string, BPFtraceScript> = {}; // {code: BPFtraceScript}\n\n    constructor(private context: Context, private poller: Poller, private keepPollingMs: number) {\n    }\n\n    async ensureActive(code: string) {\n        if (code in this.failedScripts) {\n            return this.failedScripts[code];\n        }\n\n        const script = _.find(Object.values(this.scripts), (script: BPFtraceScript) => script.code === code);\n        if (script) {\n            script.lastRequested = new Date().getTime();\n            return script;\n        }\n        else {\n            return await this.register(code);\n        }\n    }\n\n    async register(code: string) {\n        console.debug(\"registering script\", code);\n\n        // create temporary context, required so that the PMDA can identify\n        // the client who sent the pmStore message\n        const context = new Context(this.context.url);\n        try {\n            await context.store(\"bpftrace.control.register\", code);\n        }\n        catch (error) {\n            if (error.data && error.data.includes(\"-12400\")) {\n                // PMDA returned PM_ERR_BADSTORE\n                // next fetch will show error reason\n            }\n            else {\n                // other error\n                throw error;\n            }\n        }\n        const response = await context.fetch([\"bpftrace.control.register\"]);\n\n        const script: BPFtraceScript = JSON.parse(response.values[0].instances[0].value);\n        script.code = code;\n        script.lastRequested = new Date().getTime();\n\n        console.debug(\"bpftrace.control.register response\", script);\n        if (script.status === \"stopped\") {\n            // script failed due to no variables found, invalid name etc.\n            this.failedScripts[code] = script;\n            throw { message: `BPFtrace error:\\n\\n${script.output}` };\n        }\n        else {\n            this.scripts[script.name] = script;\n            // script has registered new metric names, fetch them\n            await this.context.fetchMetricMetadata(\"bpftrace\");\n        }\n\n        return script;\n    }\n\n    cleanupExpiredScripts() {\n        // clean up any not required metrics\n        const scriptExpiry = new Date().getTime() - this.keepPollingMs;\n        this.scripts = _.pickBy(this.scripts, (script: BPFtraceScript) => script.lastRequested > scriptExpiry);\n    }\n\n    async syncState() {\n        if (_.isEmpty(this.scripts)) {\n            return;\n        }\n\n        await this.context.fetchMetricMetadata(\"bpftrace\");\n\n        let metrics: string[] = [];\n        for (const script of Object.values(this.scripts)) {\n            const status_metric = `bpftrace.scripts.${script.name}.status`;\n            const output_metric = `bpftrace.scripts.${script.name}.output`;\n\n            if (this.context.findMetricMetadata(status_metric) && this.context.findMetricMetadata(output_metric)) {\n                metrics.push(status_metric, output_metric);\n            }\n            // don't remove scripts which are currently starting and don't have their metrics registered yet\n            else if (script.status !== \"starting\") {\n                console.info(`script ${script.name} is missing on the PMDA ${script.status}`);\n                const script_metrics = script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n                delete this.scripts[script.name];\n                this.poller.removeMetricsFromPolling(script_metrics);\n            }\n        }\n\n        if (metrics.length === 0)\n            return;\n\n        const response = await this.context.fetch(metrics);\n        for (const metric of response.values) {\n            const metric_split = metric.name.split('.');\n            const script_name = metric_split[2];\n            const metric_field = metric_split[3];\n\n            const script = this.scripts[script_name];\n            if (!script) {\n                // script got removed by cleanupExpiredScripts()\n                // while waiting for values from the PMDA\n                continue;\n            }\n            else if (metric_field === \"status\") {\n                script.status = metric.instances[0].value;\n            }\n            else if (metric_field === \"output\") {\n                script.output = metric.instances[0].value;\n            }\n        }\n    }\n}\n","import _ from \"lodash\";\nimport Context from \"./context\";\nimport DataStore from \"./datastore\";\n\nexport default class Poller {\n    private requestedMetrics: Record<string, number> = {}; // {metric: lastRequested}\n\n    constructor(private context: Context, private datastore: DataStore, private keepPollingMs: number) {\n    }\n\n    async poll() {\n        const metrics = Object.keys(this.requestedMetrics);\n        if (metrics.length == 0) {\n            return;\n        }\n\n        const data = await this.context.fetch(metrics, true);\n        this.datastore.ingest(data);\n    }\n\n    ensurePolling(metrics: string[]) {\n        const now = new Date().getTime()\n        for (const metric of metrics) {\n            this.requestedMetrics[metric] = now\n        }\n    }\n\n    removeMetricsFromPolling(metrics: string[]) {\n        for (const metric of metrics) {\n            delete this.requestedMetrics[metric];\n        }\n    }\n\n    cleanupExpiredMetrics() {\n        // clean up any not required metrics\n        const pollExpiry = new Date().getTime() - this.keepPollingMs;\n        this.requestedMetrics = _.pickBy(this.requestedMetrics, (lastRequested: number) => lastRequested > pollExpiry);\n    }\n}\n","import Context from \"./context\";\nimport DataStore from \"./datastore\";\nimport ScriptRegistry from \"./script_registry\";\nimport Poller from './poller';\n\ninterface Endpoint {\n    context: Context;\n    scriptRegistry: ScriptRegistry;\n    poller: Poller;\n    datastore: DataStore;\n}\n\nexport default class EndpointRegistry {\n    private endpoints: Record<string, Endpoint> = {};\n\n    private generateId(url: string, container: string | null = null) {\n        return `${url}::${container}`;\n    }\n\n    find(url: string, container: string | null = null) {\n        const id = this.generateId(url, container);\n        return this.endpoints[id];\n    }\n\n    create(url: string, container: string | null, keepPollingMs: number, oldestDataMs: number) {\n        const id = this.generateId(url, container);\n        const context = new Context(url, container);\n        const datastore = new DataStore(context, oldestDataMs);\n        const poller = new Poller(context, datastore, keepPollingMs);\n        const scriptRegistry = new ScriptRegistry(context, poller, keepPollingMs);\n\n        this.endpoints[id] = { context, datastore, poller, scriptRegistry };\n        return this.endpoints[id];\n    }\n\n    list() {\n        return Object.values(this.endpoints);\n    }\n\n}","import _ from 'lodash';\nimport { Datapoint, TargetFormat, TimeSeriesResult, TableResult } from \"./datasource\";\n\nexport default class Transformations {\n\n    constructor(private templateSrv: any) {\n    }\n\n    getLabel(target: string, legendFormat: string) {\n        if (_.isEmpty(legendFormat)) {\n            return target;\n        }\n        else {\n            let vars = {\n                instance: { value: target }\n            };\n            return this.templateSrv.replace(legendFormat, vars);\n        }\n    }\n\n    updateLabels(targetResults: TimeSeriesResult[], target: any) {\n        return targetResults.map((t: TimeSeriesResult) => {\n            return { target: this.getLabel(t.target, target.legendFormat), datapoints: t.datapoints }\n        });\n    }\n\n    transformToHistogram(targetResults: TimeSeriesResult[]) {\n        for (const target of targetResults) {\n            // target name is the upper bound\n            target.target = target.target.split('-')[1];\n\n            // round timestamps to one second - the heatmap panel calculates the x-axis size accordingly\n            target.datapoints = target.datapoints.map(\n                (dataPoint: Datapoint) => [dataPoint[0], Math.ceil(dataPoint[1] / 1000) * 1000, dataPoint[2]]\n            );\n        }\n        return targetResults;\n    }\n\n    transformToTable(targetResults: TimeSeriesResult[]) {\n        let tableText = \"\";\n        if (targetResults.length > 0)\n            tableText = targetResults[0].datapoints[0][0] as string;\n\n        let table: TableResult = { columns: [], rows: [], type: 'table' };\n        let lines = tableText.split('\\n');\n        let columnSizes: [number, number | undefined][] = [];\n\n        for (let line of lines) {\n            line = line.trim();\n            if (line.length === 0 || line.includes(\"Ctrl-C\"))\n                continue;\n\n            if (_.isEmpty(table.columns)) {\n                let tableHeaders = line.split(/\\s\\s+/);\n                for (let i = 0; i < tableHeaders.length; i++) {\n                    const colStartAt = line.indexOf(tableHeaders[i]);\n                    const colEndAt = i + 1 < tableHeaders.length ? line.indexOf(tableHeaders[i + 1]) - 1 : undefined;\n                    table.columns.push({ text: tableHeaders[i] });\n                    columnSizes.push([colStartAt, colEndAt]);\n                }\n            }\n            else {\n                let row = columnSizes.map((colSize: any) => line.substring(colSize[0], colSize[1]).trim());\n                table.rows.push(row);\n            }\n        }\n        return [table];\n    }\n\n    transform(targetResults: TimeSeriesResult[], target: any) {\n        if (target.format === TargetFormat.TimeSeries)\n            return this.updateLabels(targetResults, target);\n        else if (target.format === TargetFormat.Heatmap)\n            return this.transformToHistogram(targetResults);\n        else if (target.format == TargetFormat.Table)\n            return this.transformToTable(targetResults);\n        else\n            throw { message: \"Invalid target format\" };\n    }\n\n\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\nimport { TargetFormat } from './datasource';\n\nexport class PCPBPFtraceDatasourceQueryCtrl extends QueryCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/query.editor.html';\n\n  formats: any = [];\n\n  /** @ngInject **/\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.code = this.target.code || \"\";\n    this.target.format = this.target.format || this.getDefaultFormat();\n\n    this.formats = [\n      { text: \"Time series\", value: TargetFormat.TimeSeries },\n      { text: \"Table\", value: TargetFormat.Table },\n      { text: \"Heatmap\", value: TargetFormat.Heatmap },\n    ];\n  }\n\n  getDefaultFormat() {\n    if (this.panelCtrl.panel.type === 'table') {\n      return TargetFormat.Table;\n    } else if (this.panelCtrl.panel.type === 'heatmap') {\n      return TargetFormat.Heatmap;\n    }\n    return TargetFormat.TimeSeries;\n  }\n\n  refreshMetricData() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n","import { PCPBPFtraceDatasource } from './datasource';\nimport { PCPBPFtraceDatasourceQueryCtrl } from './query_ctrl';\n\nclass PCPBPFtraceConfigCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/config.html';\n}\n\nclass PCPBPFtraceQueryOptionsCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/query.options.html';\n}\n\nclass PCPBPFtraceAnnotationsQueryCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/annotations.editor.html';\n}\n\nexport {\n  PCPBPFtraceDatasource as Datasource,\n  PCPBPFtraceDatasourceQueryCtrl as QueryCtrl,\n  PCPBPFtraceConfigCtrl as ConfigCtrl,\n  PCPBPFtraceQueryOptionsCtrl as QueryOptionsCtrl,\n  PCPBPFtraceAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;"],"sourceRoot":""}