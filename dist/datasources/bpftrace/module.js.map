{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./datasources/lib/types.ts","webpack:///external \"lodash\"","webpack:///./datasources/lib/transformations.ts","webpack:///./datasources/lib/datastore.ts","webpack:///./datasources/lib/poller.ts","webpack:///./datasources/lib/endpoint_registry.ts","webpack:///./datasources/bpftrace/script_registry.ts","webpack:///./datasources/bpftrace/datasource.ts","webpack:///./datasources/bpftrace/query_ctrl.ts","webpack:///./datasources/bpftrace/module.ts","webpack:///./datasources/lib/context.ts","webpack:///external \"app/plugins/sdk\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TargetFormat","__webpack_exports__","__WEBPACK_EXTERNAL_MODULE__1__","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","_types__WEBPACK_IMPORTED_MODULE_1__","Transformations","templateSrv","this","getLabel","target","legendFormat","a","isEmpty","targetSpl","split","vars","instance","metric0","length","replace","updateLabels","targetResults","_this","map","datapoints","transformToHeatmap","_i","targetResults_1","match","dataPoint","Math","floor","transformToTable","tableText","table","columns","rows","type","lines","columnSizes","line","trim","includes","tableHeaders","colStartAt","indexOf","colEndAt","undefined","push","text","row","colSize","substring","lines_1","transform","format","TimeSeries","Heatmap","Table","message","DataStore","context","oldestDataMs","store","ingestCounterMetric","instanceStore","pollTimeEpochMs","_a","prevTimeMs","prevOrigVal","deltaSec","ingestMetric","metricStore","metric","metadata","findMetricMetadata","instances","instanceName","labels","metrictype","sem","console","info","ingest","data","external_lodash_default","timestamp","us","values","queryTimeSeries","metrics","from","to","metrics_1","filter","cleanExpiredMetrics","keepExpiry","Date","getTime","Poller","datastore","keepPollingMs","requestedMetrics","poll","keys","fetch","sent","ensurePolling","now","removeMetricsFromPolling","metrics_2","cleanupExpiredMetrics","pollExpiry","pickBy","lastRequested","endpoint_registry_EndpointRegistry","EndpointRegistry","endpoints","generateId","url","container","find","id","lib_context","lib_datastore","poller","lib_poller","list","ScriptRegistry","scripts","failedScripts","ensureActive","code","script","status","exit_code","register","debug","error_1","response","JSON","parse","fetchMetricMetadata","cleanupExpiredScripts","scriptExpiry","syncState","_d","found_all_metrics","state_metrics_1","state_metric","this_1","script_metrics","var_","_b","_c","metric_split","script_name","metric_field","datasource_PCPBPFtraceDatasource","PCPBPFtraceDatasource","instanceSettings","$q","backendSrv","variableSrv","q","withCredentials","headers","Content-Type","basicAuth","pollIntervalMs","jsonData","scriptSyncIntervalMs","olderstDataMs","datasourceRequest","doRequest","endpointRegistry","endpoint_registry","transformations","setInterval","doPollAll","syncScriptStates","$inject","endpoint","promises","Promise","all","scriptRegistry","getMetricNameForMetricType","metricMetadata","getMetricNamesForTarget","types","targets","dashboardVariables","getVariables","hide","script_registry","output","result","options","range","valueOf","apply","refId","title","datasource_generator","variables","variable","variableValue","isEqual","allValue","slice","textValuePair","current","query_ctrl_PCPBPFtraceDatasourceQueryCtrl","_super","$scope","$injector","formats","getDefaultFormat","__extends","PCPBPFtraceDatasourceQueryCtrl","panelCtrl","panel","refreshMetricData","templateUrl","PCPBPFtraceConfigCtrl","PCPBPFtraceQueryOptionsCtrl","PCPBPFtraceAnnotationsQueryCtrl","Context","contextPromise","indomCache","label","contextUrl","contextResponse","params","_createContext","trys","isString","prefix","metricMetadataCache","getAllMetricNames","indoms","indoms_1","indom","instanceNames","names","join","indomsForMetric","refreshed","ensureContext"],"mappings":"qEACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,sCCnEA,IAAYC,EAAZpC,EAAAU,EAAA2B,EAAA,sBAAAD,IAAA,SAAYA,GACRA,EAAA,yBACAA,EAAA,cACAA,EAAA,kBAHJ,CAAYA,MAAY,sBCfxBjC,EAAAD,QAAAoC,mCCAA,IAAAC,EAAAvC,EAAA,GAAAwC,EAAAxC,EAAA6B,EAAAU,GAAAE,EAAAzC,EAAA,GAGA0C,EAAA,WAEI,SAAAA,EAAoBC,GAAAC,KAAAD,cAkFxB,OA/EID,EAAAV,UAAAa,SAAA,SAASC,EAAgBC,GACrB,GAAIP,EAAAQ,EAAEC,QAAQF,GACV,OAAOD,EAGP,IAAMI,EAAYJ,EAAOK,MAAM,KAC3BC,EAAO,CACPC,SAAU,CAAEhC,MAAOyB,GACnBQ,QAAS,CAAEjC,MAAO6B,EAAUA,EAAUK,OAAS,KAEnD,OAAOX,KAAKD,YAAYa,QAAQT,EAAcK,IAItDV,EAAAV,UAAAyB,aAAA,SAAaC,EAAmCZ,GAAhD,IAAAa,EAAAf,KACI,OAAOc,EAAcE,IAAI,SAACtC,GACtB,MAAO,CAAEwB,OAAQa,EAAKd,SAASvB,EAAEwB,OAAQA,EAAOC,cAAec,WAAYvC,EAAEuC,eAIrFnB,EAAAV,UAAA8B,mBAAA,SAAmBJ,GACf,IAAqB,IAAAK,EAAA,EAAAC,EAAAN,EAAAK,EAAAC,EAAAT,OAAAQ,IAAe,CAA/B,IAAMjB,EAAMkB,EAAAD,GAEPE,EAAQnB,EAAOA,OAAOmB,MAAM,kBAC9BA,IACAnB,EAAOA,OAASmB,EAAM,IAI1BnB,EAAOe,WAAaf,EAAOe,WAAWD,IAClC,SAACM,GAAyB,OAACA,EAAU,GAAX,IAAeC,KAAKC,MAAMF,EAAU,GAAK,QAG3E,OAAOR,GAGXhB,EAAAV,UAAAqC,iBAAA,SAAiBX,GACb,IAAIY,EAAY,GACZZ,EAAcH,OAAS,GAAKG,EAAc,GAAGG,WAAWN,OAAS,IACjEe,EAAYZ,EAAc,GAAGG,WAAW,GAAG,IAM/C,IAJA,IAAIU,EAAqB,CAAEC,QAAS,GAAIC,KAAM,GAAIC,KAAM,SACpDC,EAAQL,EAAUnB,MAAM,MACxByB,EAA8C,cAEzCC,GAEL,GAAoB,KADpBA,EAAOA,EAAKC,QACHvB,QAAgBsB,EAAKE,SAAS,gBAC1B,WAEb,GAAIvC,EAAAQ,EAAEC,QAAQsB,EAAMC,SAEhB,IADA,IAAIQ,EAAeH,EAAK1B,MAAM,SACrB/C,EAAI,EAAGA,EAAI4E,EAAazB,OAAQnD,IAAK,CAC1C,IAAM6E,EAAaJ,EAAKK,QAAQF,EAAa5E,IACvC+E,EAAW/E,EAAI,EAAI4E,EAAazB,OAASsB,EAAKK,QAAQF,EAAa5E,EAAI,IAAM,OAAIgF,EACvFb,EAAMC,QAAQa,KAAK,CAAEC,KAAMN,EAAa5E,KACxCwE,EAAYS,KAAK,CAACJ,EAAYE,QAGjC,CACD,IAAII,EAAMX,EAAYhB,IAAI,SAAC4B,GAAiB,OAAAX,EAAKY,UAAUD,EAAQ,GAAIA,EAAQ,IAAnCV,SAC5CP,EAAME,KAAKY,KAAKE,KAhBPxB,EAAA,EAAA2B,EAAAf,EAAAZ,EAAA2B,EAAAnC,OAAAQ,IAAK,GAAT2B,EAAA3B,IAmBb,MAAO,CAACQ,IAGZ7B,EAAAV,UAAA2D,UAAA,SAAUjC,EAAmCZ,GACzC,GAAIA,EAAO8C,SAAWnD,EAAA,EAAaoD,WAC/B,OAAOjD,KAAKa,aAAaC,EAAeZ,GACvC,GAAIA,EAAO8C,SAAWnD,EAAA,EAAaqD,QACpC,OAAOlD,KAAKkB,mBAAmBJ,GAC9B,GAAIZ,EAAO8C,QAAUnD,EAAA,EAAasD,MACnC,OAAOnD,KAAKyB,iBAAiBX,GAE7B,KAAM,CAAEsC,QAAS,0BAA0BlD,EAAO8C,OAAM,wBAAwBnD,EAAA,EAAaoD,WAAU,KAAKpD,EAAA,EAAaqD,QAAO,KAAKrD,EAAA,EAAasD,QAI9JrD,EApFA,uECCA,WAGI,SAAAuD,EAAoBC,EAA0BC,GAA1BvD,KAAAsD,UAA0BtD,KAAAuD,eAFtCvD,KAAAwD,MAAqD,GAuFjE,OAlFIH,EAAAjE,UAAAqE,oBAAA,SAAoBC,EAA4BjD,EAAekD,GAG3D,GAAID,EAAc/C,OAAS,EAAG,CACtB,IAAAiD,EAAAF,IAAA/C,OAAA,GAAGkD,EAAAD,EAAA,GAAYE,EAAAF,EAAA,GACbG,GAAYJ,EAAkBE,GAAc,IAClDH,EAAcjB,KAAK,EAAEhC,EAAShC,MAAQqF,GAAgBC,EAAUJ,EAAiBlD,EAAShC,aAG1FiF,EAAcjB,KAAK,MAACD,EAAWmB,EAAiBlD,EAAShC,SAIjE4E,EAAAjE,UAAA4E,aAAA,SAAaC,EAA0CC,EAAaP,GAChE,IAAMQ,EAAWnE,KAAKsD,QAAQc,mBAAmBF,EAAOnG,MACxD,GAAKoG,EAKL,IAAuB,IAAAhD,EAAA,EAAAyC,EAAAM,EAAOG,UAAPlD,EAAAyC,EAAAjD,OAAAQ,IAAkB,CAApC,IAAMV,EAAQmD,EAAAzC,GACXuC,EAAgBO,EAAYxD,EAAS6D,gBAGpCZ,GAAkBS,EAASI,QAAyC,WAA/BJ,EAASI,OAAOC,cACtDd,EAAgBO,EAAYxD,EAAS6D,cAAgB,IAGpC,YAAjBH,EAASM,IACTzE,KAAKyD,oBAAoBC,EAAejD,EAAUkD,GAGlDD,EAAcjB,KAAK,CAAChC,EAAShC,MAAOkF,SAhBxCe,QAAQC,KAAK,yBAAyBT,EAAOnG,KAAI,6BAqBzDsF,EAAAjE,UAAAwF,OAAA,SAAOC,GACH,IAAIC,EAAA1E,EAAEC,QAAQwE,GAId,IADA,IAAMlB,EAAqC,IAAnBkB,EAAKE,UAAUxF,EAAWsF,EAAKE,UAAUC,GAAK,IACjD7D,EAAA,EAAAyC,EAAAiB,EAAKI,OAAL9D,EAAAyC,EAAAjD,OAAAQ,IAAa,CAA7B,IAAM+C,EAAMN,EAAAzC,GACRnB,KAAKwD,MAAMU,EAAOnG,QACnBiC,KAAKwD,MAAMU,EAAOnG,MAAQ,IAG9BiC,KAAKgE,aAAahE,KAAKwD,MAAMU,EAAOnG,MAAOmG,EAAQP,KAI3DN,EAAAjE,UAAA8F,gBAAA,SAAgBC,EAAmBC,EAAcC,GAE7C,IADA,IAAIvE,EAAoC,GACnBK,EAAA,EAAAmE,EAAAH,EAAAhE,EAAAmE,EAAA3E,OAAAQ,IAAS,CAAzB,IAAM+C,EAAMoB,EAAAnE,GACb,GAAM+C,KAAUlE,KAAKwD,MAGrB,IAAK,IAAM/C,KAAYT,KAAKwD,MAAMU,GAAS,CACvC,IAAIhE,EAAS,CAETA,OAAqB,SAAbO,EAAsByD,EAASzD,EACvCQ,WAAYjB,KAAKwD,MAAMU,GAAQzD,GAAU8E,OAAO,SAACjE,GAAyB,OACtE8D,GAAQ9D,EAAU,IAAMA,EAAU,IAAM+D,GAD8B7C,MACxBlB,EAAU,MAIhER,EAAc2B,KAAKvC,IAG3B,OAAOY,GAGXuC,EAAAjE,UAAAoG,oBAAA,WACI,IAAMC,GAAa,IAAIC,MAAOC,UAAY3F,KAAKuD,aAC/C,IAAK,IAAMW,KAAUlE,KAAKwD,MACtB,IAAK,IAAM/C,KAAYT,KAAKwD,MAAMU,GAC9BlE,KAAKwD,MAAMU,GAAQzD,GAAYT,KAAKwD,MAAMU,GAAQzD,GAAU8E,OACxD,SAACjE,GAAyB,OAAAA,EAAU,GAAVmE,KAK9CpC,EAxFA,izCCAA,WAGI,SAAAuC,EAAoBtC,EAA0BuC,EAA8BC,GAAxD9F,KAAAsD,UAA0BtD,KAAA6F,YAA8B7F,KAAA8F,gBAFpE9F,KAAA+F,iBAA2C,GAmCvD,OA9BUH,EAAAxG,UAAA4G,KAAN,2GAEI,OAAsB,IADhBb,EAAUjH,OAAO+H,KAAKjG,KAAK+F,mBACrBpF,OACR,IAGS,GAAMX,KAAKsD,QAAQ4C,MAAMf,GAAS,kBAAzCN,EAAOjB,EAAAuC,OACbnG,KAAK6F,UAAUjB,OAAOC,aAG1Be,EAAAxG,UAAAgH,cAAA,SAAcjB,GAEV,IADA,IAAMkB,GAAM,IAAIX,MAAOC,UACFxE,EAAA,EAAAmE,EAAAH,EAAAhE,EAAAmE,EAAA3E,OAAAQ,IAAS,CAAzB,IAAM+C,EAAMoB,EAAAnE,GACb,IAAKnB,KAAKsD,QAAQc,mBAAmBF,GACjC,KAAM,CAAEd,QAAS,sBAAsBc,EAAM,aACjDlE,KAAK+F,iBAAiB7B,GAAUmC,IAIxCT,EAAAxG,UAAAkH,yBAAA,SAAyBnB,GACrB,IAAqB,IAAAhE,EAAA,EAAAoF,EAAApB,EAAAhE,EAAAoF,EAAA5F,OAAAQ,IAAS,CAAzB,IAAM+C,EAAMqC,EAAApF,UACNnB,KAAK+F,iBAAiB7B,KAIrC0B,EAAAxG,UAAAoH,sBAAA,WAEI,IAAMC,GAAa,IAAIf,MAAOC,UAAY3F,KAAK8F,cAC/C9F,KAAK+F,iBAAmBjB,EAAA1E,EAAEsG,OAAO1G,KAAK+F,iBAAkB,SAACY,GAA0B,OAAAA,EAAAF,KAE3Fb,EApCA,GCMAgB,EAAA,oBAAAC,IACY7G,KAAA8G,UAA+B,GA2B3C,OAzBYD,EAAAzH,UAAA2H,WAAR,SAAmBC,EAAaC,GAG5B,OAFKA,IACDA,EAAY,IACND,EAAG,KAAKC,GAGtBJ,EAAAzH,UAAA8H,KAAA,SAAKF,EAAaC,GACd,IAAME,EAAKnH,KAAK+G,WAAWC,EAAKC,GAChC,OAAOjH,KAAK8G,UAAUK,IAG1BN,EAAAzH,UAAAN,OAAA,SAAOkI,EAAaC,EAA0BnB,EAAuBvC,GACjE,IAAM4D,EAAKnH,KAAK+G,WAAWC,EAAKC,GAC1B3D,EAAU,IAAI8D,EAAA,EAAQJ,EAAKC,GAC3BpB,EAAY,IAAIwB,EAAU/D,EAASC,GACnC+D,EAAS,IAAIC,EAAOjE,EAASuC,EAAWC,GAG9C,OADA9F,KAAK8G,UAAUK,GAAM,CAAE7D,QAAOA,EAAEuC,UAASA,EAAEyB,OAAMA,GAC1CtH,KAAK8G,UAAUK,IAG1BN,EAAAzH,UAAAoI,KAAA,WACI,OAAOtJ,OAAO+G,OAAOjF,KAAK8G,YAGlCD,EA5BA,q4CCOA,WAWI,SAAAY,EAAoBnE,EAA0BgE,EAAwBxB,GAAlD9F,KAAAsD,UAA0BtD,KAAAsH,SAAwBtH,KAAA8F,gBAR9D9F,KAAA0H,QAA0C,GAM1C1H,KAAA2H,cAAgD,GAyH5D,OApHUF,EAAArI,UAAAwI,aAAN,SAAmBC,iGACf,OAAIA,KAAQ7H,KAAK2H,cACb,GAAO3H,KAAK2H,cAAcE,MAGxBC,EAAyBhD,EAAA1E,EAAE8G,KAAKhJ,OAAO+G,OAAOjF,KAAK0H,SAAU,SAACI,GAA2B,OAAAA,EAAOD,OAAPA,MAC7D,YAAlBC,EAAOC,QAA4C,GAApBD,EAAOE,UAG3C,GAAMhI,KAAKiI,SAASJ,IAH3B,aAGA,SAAOjE,EAAAuC,eAIP,OADA2B,EAAOnB,eAAgB,IAAIjB,MAAOC,UAClC,GAAOmC,SAITL,EAAArI,UAAA6I,SAAN,SAAeJ,uGACXnD,QAAQwD,MAAM,qBAAsBL,GAI9BvE,EAAU,IAAI8D,EAAA,EAAQpH,KAAKsD,QAAQ0D,sBAErC,gCAAM1D,EAAQE,MAAM,4BAA6BqE,kBAAjDjE,EAAAuC,oBAGA,iBAAUtB,OAAQsD,EAAMtD,KAAK1C,SAAS,UAMlC,MAAMgG,qBAGG,SAAM7E,EAAQ4C,MAAM,CAAC,6CAAhCkC,EAAWxE,EAAAuC,QAEX2B,EAAyBO,KAAKC,MAAMF,EAASnD,OAAO,GAAGZ,UAAU,GAAG5F,QACnEoJ,KAAOA,EACdC,EAAOnB,eAAgB,IAAIjB,MAAOC,UAElCjB,QAAQwD,MAAM,qCAAsCJ,GAC9B,YAAlBA,EAAOC,OAAP,OAEA/H,KAAK2H,cAAcE,GAAQC,gBAK3B,OAFA9H,KAAK0H,QAAQI,EAAO/J,MAAQ+J,EAE5B,GAAM9H,KAAKsD,QAAQiF,oBAAoB,oBAAvC3E,EAAAuC,wBAGJ,SAAO2B,SAGXL,EAAArI,UAAAoJ,sBAAA,WAGI,IAAMC,GAAe,IAAI/C,MAAOC,UAAY3F,KAAK8F,cACjD9F,KAAK0H,QAAU5C,EAAA1E,EAAEsG,OAAO1G,KAAK0H,QAAS,SAACI,GAA2B,OAAAA,EAAOnB,cAAP8B,KAGhEhB,EAAArI,UAAAsJ,UAAN,iIACI,OAAI5D,EAAA1E,EAAEC,QAAQL,KAAK0H,SACf,IAIJ,GAAM1H,KAAKsD,QAAQiF,oBAAoB,oBAGvC,IAHAI,EAAAxC,OAEIhB,EAAoB,cACb2C,GAQP,IAPA,IAMIc,GAAoB,EACGzH,EAAA,EAAA0H,EAPL,CAClB,oBAAoBf,EAAO/J,KAAI,UAC/B,oBAAoB+J,EAAO/J,KAAI,aAC/B,oBAAoB+J,EAAO/J,KAAI,WAIRoD,EAAA0H,EAAAlI,OAAAQ,IAAe,CAArC,IAAM2H,EAAYD,EAAA1H,GACf4H,EAAKzF,QAAQc,mBAAmB0E,GAChC3D,EAAQ1C,KAAKqG,GAEbF,GAAoB,EAI5B,IAAKA,GAAuC,aAAlBd,EAAOC,OAAuB,CACpDrD,QAAQC,KAAK,UAAUmD,EAAO/J,KAAI,2BAA2B+J,EAAOC,QACpE,IAAMiB,EAAiBlB,EAAOtH,KAAKQ,IAAI,SAAAiI,GAAQ,0BAAoBnB,EAAO/J,KAAI,SAA/BkL,WACxCF,EAAKrB,QAAQI,EAAO/J,MAC3BgL,EAAKzB,OAAOhB,yBAAyB0C,YApB7C7H,EAAA,EAAqByC,EAAA1F,OAAO+G,OAAOjF,KAAK0H,SAAnBvG,EAAAyC,EAAAjD,OAAAQ,IAAV2G,EAAMlE,EAAAzC,KAAN2G,GAwBX,OAAuB,IAAnB3C,EAAQxE,OACR,IAEa,GAAMX,KAAKsD,QAAQ4C,MAAMf,WAC1C,IADMiD,EAAWO,EAAAxC,OACjB+C,EAAA,EAAqBC,EAAAf,EAASnD,OAATiE,EAAAC,EAAAxI,OAAAuI,IAAVhF,EAAMiF,EAAAD,GACPE,EAAelF,EAAOnG,KAAKwC,MAAM,KACjC8I,EAAcD,EAAa,GAC3BE,EAAeF,EAAa,IAE5BtB,EAAS9H,KAAK0H,QAAQ2B,KAMnB,CAAC,SAAU,YAAa,UAAUlH,SAASmH,KAChDxB,EAAOwB,GAAgBpF,EAAOG,UAAU,GAAG5F,uBAI3DgJ,EAlIA,8zCCRA8B,EAAA,WAqBQ,SAAKC,EAAwBC,EAA7BC,EAAAC,EAAA5J,EAAA6J,GACA5J,KAAKjC,KAAM0L,EAAiB1L,KAC5BiC,KAAKgH,IAALyC,EAAAzC,IACAhH,KAAK6J,EAAAH,EACL1J,KAAK2J,WAALA,EACA3J,KAAKD,YAAcA,EACnBC,KAAK4J,cACL5J,KAAK8J,gBAAUL,EAAAK,gBAAE9J,KAAA+J,QAAA,CAAjBC,eAAA,oBAEoC,iBAA3BP,EAAQQ,WAAoCR,EAAjDQ,UAAAtJ,OAAA,IACHX,KAAA+J,QAAA,cAAAN,EAAAQ,WAIDjK,KAAKkK,eAAAT,EAAuBU,SAAiBD,gBAAS,IACtDlK,KAAKoK,qBAAgBX,EAAiBU,SAASC,sBAA/C,IACApK,KAAK8F,cAAgB2D,EAAiBU,SAASrE,eAAiB,IAEhE9F,KAAAqK,cAAAZ,EAAQU,SAAAE,eAAyB,IACjCjD,EAA4B,EAAAkD,kBAAAtK,KAAAuK,UAA5BvL,KAAAgB,MACAA,KAAKwK,iBAAkB,IAAIC,EAAgB,EAE3CzK,KAAI0K,gBAAA,IAAJA,EACgB,EAAoB1K,KAArBD,aACXC,KAAKkK,eAAA,GAALS,YACA3K,KAAW4K,UAAM5L,KAAAgB,MAALA,KAAAkK,gBACnBlK,KAAAoK,qBAAA,GAAAO,YAAA3K,KAAA6K,iBAAA7L,KAAAgB,WAAAoK,sBA/CL,OAoBIZ,EAAAsB,QAAY,oBAAsB,kBAAY,cAAa,eA8BvDtB,EAAApK,UAAAwL,UAAA,WACK,aAAMzJ,EAAQ,EAAAyC,EAAA5D,KAAdwK,iBAAAhD,OAAArG,EAAAyC,EAAAjD,OAAAQ,IAAA,CACD,IAAA4J,EAASnH,EAATzC,GACA4J,EAASlF,UAAOL,sBAChBuF,EAASzD,OAAKd,wBACjBwE,EAAAvI,KAAAsI,EAAAzD,OAAAtB,QANL,OAAAiF,QAAAC,IAAAF,IAWIxB,EAAApK,UAAAyL,iBAAA,WACK,aAAM1J,EAAQ,EAAAyC,EAAA5D,KAAdwK,iBAAAhD,OAAArG,EAAAyC,EAAAjD,OAAAQ,IAAA,CACD,IAAA4J,EAASnH,EAAAzC,GACT4J,EAASI,eAAc3C,wBAC1BwC,EAAAvI,KAAAsI,EAAAI,eAAAzC,aALL,OAAAuC,QAAAC,IAAAF,IAUIxB,EAAmBpK,UAAOgM,2BAAM,SAAA9H,EAAAwE,EAAAtD,GAA3B,QAAMrD,EAAI,EAAAyC,EAAVkE,EAAAtH,KAAAW,EAAAyC,EAAAjD,OAAAQ,IAAA,CACD,IAAM8H,EAAMrF,EAAGzC,GACT+C,EAAA,oBAAyB4D,EAAA/J,KAAmB,SAAlDkL,EACIoC,EAAc/H,EAAIc,mBAAyBF,GAElD,GAAAmH,KAAA9G,QAAA8G,EAAA9G,OAAAC,eAAA,OAAAN,EANL,aAWIsF,EAAIpK,UAAkBkM,wBAAa,SAAYhI,EAAApD,EAAA4H,GAC3C,GAAA5H,EAAO8C,SAAYuI,EAAQ,EAAAtI,WAAI,OAAA6E,EAAAtH,KAAAQ,IAAA,SAAoBiI,GAAnD,0BAAAnB,EAAA/J,KAAA,SAAAkL,IAGM,GAAA/I,EAAS8C,SAAKuI,EAAoC,EAAArI,QAAQ,CAIpD,GAHRgB,EACAlE,KAAAoL,2BAEM9H,EAAAwE,EAAA,aAAW,OAAA5D,GAAA,MAAjBd,QAAA,sDAGE,GAAAlD,EAAS8C,SAAKuI,EAAoC,EAAApI,MAAQ,CAChE,IAAIe,EAGQ,GAHRA,EACAlE,KAAAoL,2BAEM9H,EAAAwE,EAAA,UAAW,OAAA5D,GAAA,MAAjBd,QAAA,kEAhBZ,uJAsBU,OAEF,YAAAoI,QAAA7K,OAAA,SAAS,CAATkE,KAAA,KAIE4G,EAAAzL,KAAA0L,iBACe,oCAAa,KAAAvK,EAAAyC,EAAAjD,QAAA,SAAvB,GAEH,IADJT,EAAI0D,EAAOzC,IACPwK,OAAAzL,EAAA2H,KAAA,SAIE,GAEF,QADJA,EAAI3H,EAAK2H,KAAL3F,QACAvB,OAAA,SAGA,GACJqG,OAAI,EAKAA,EAAAyE,EAAgBzE,KAAAyE,EAAhBzE,IAAAvI,MAAAkC,OAAA,EAAA8K,EAAAzE,IAAAvI,MAAAuB,KAAAgH,yCAGA+D,EAAS/K,KAAAwK,iBAAqB1L,OAAAkI,EAAJ,KAAmBhH,KAAS8F,cAAS9F,KAASqK,gBAC3Ec,eAAA,IAAAS,EAAAb,EAAAzH,QAAAyH,EAAAzD,OAAAtH,KAAA8F,0CAMY,kEAFT,OAKU,GAAe,yBAARiC,QAAyC,aAAjCD,EAAwBC,OAOrC,MAAR3E,QAAA,sBAAA0E,EAAA+D,eANA1G,EAASnF,KAATsL,wBAAAP,EAAAzH,QAAApD,EAAA4H,GAEIiD,EAASzD,OAAAlB,cAAmBjB,GAChC2G,EAAAf,EAAAlF,UAAAX,gBAAsBC,EAAK4G,EAAgBC,MAAA5G,KAAU6G,UAAQF,EAA7DC,MAAA3G,GAAA4G,WALJnL,EAOK2B,KAAAyJ,MAAApL,EAAAd,KAAA0K,gBAAA3H,UAAA+I,EAAA5L,mCAOCiM,MAANjM,EAAAiM,QA3Ca,wBA+CrB,gBAAS,CAATtH,KAAA/D,uIAII,4CAEA,0DACA,mBAAS,CAAmBiH,OAAO,UAA4B3E,QAAO,yBAAtEgJ,MAAA,mBAGA,OAAAxI,EAAAuC,OAAA,GACI,CACA4B,OAAO,QACP3E,QAAO,qBAAAE,EAAA0D,IAHXoF,MAAA,gHASJ,OAAAC,EAAArM,KAAA,SAAA4D,GAAA,qIAIA,OAGO,OAFPmI,EAAQjC,gBAAe9J,KAAvB8J,gBAEOiC,EAAAhC,QAAA/J,KAAA+J,QAAA,yCAAP,gCAIAP,EAAApK,UAAAsM,aAAA,oBAEI,IAAA1L,KAAA4J,YAAA0C,UAEH,SAEI,QAAInL,EAAQ,EAAAyC,EAAA5D,KAAZ4J,YAAA0C,UAAAnL,EAAAyC,EAAAjD,OAAAQ,IAAA,CACD,IAAIoL,EAAA3I,EAAazC,sBAEA,WAAbqL,GAAgC1H,EAAA1E,EAAAqM,QAAAD,EAAA,eACmCA,EAAvC,OAAxBD,EAAAG,SAA+DH,EAAAR,QAAAY,MAAA,GAAA3L,IAAA,SAAA4L,GAA/D,OAAAA,EAAAnO,QAGH8N,EAAAG,UAIDJ,EAAMC,EAASxO,MAAQ,CACvB2E,KAAK6J,EAAEM,QAAAnK,KAFXjE,MAAA+N,GAjBR,OAAAF,GAvLJ9C,EAAA,8TCNAsD,EAAoD,SAAAC,mBAGhD,IAAAhM,EAAAgM,EAAApP,KAAAqC,KAAAgN,EAAAC,IAAAjN,YAOIe,EAAKmM,QAAO,GAEZnM,EAAKb,OAAL2H,KACI9G,EAAAb,OAAA2H,MAAA,GAAE9G,EAAIb,OAAE8C,OAARjC,EAAAb,OAAA8C,QAAAjC,EAAAoM,mBAAuBpM,EAAAmM,QAAO,EADnBxK,KAEX,cAAEjE,MAAM8M,EAAR,EAAAtI,YAAiB,CAFNP,KAGX,QAAEjE,MAAM8M,EAAR,EAAApI,OAAmB,CAHvBT,KAAA,uCAPJ0K,EAAAC,EAAAN,GACAM,EACIvC,QAAc,UAAd,aAcIuC,EAAOjO,UAAa+N,iBAApB,WACH,MAA+B,UAFhCnN,KAEOsN,UAASC,MAALzL,KACAyJ,EAAA,EAAapI,MACvB,YAAAnD,KAAAsN,UAAAC,MAAAzL,iCAMJuL,EAFDjO,UAAAoO,kBAAA,qCA5BgDH,EAApDI,YAAA,oDAAoD,cCHpDrQ,EAAAU,EAAA2B,EAAA,+BAAAiO,IAAAtQ,EAAAU,EAAA2B,EAAA,qCAAAkO,IAAAvQ,EAAAU,EAAA2B,EAAA,yCAAAmO,IAAAxQ,EAAAU,EAAA2B,EAAA,+BAAA8J,IACAnM,EAAAU,EAAA2B,EAAA,8BAAAqN,IAEA,IAAAY,aACW,SAAAA,YADXA,EAAAD,YAAA,iDAIAE,aACW,SAAAA,YADXA,EAAAF,YAAA,wDAIAG,aACW,SAAAA,YADXA,EAAAH,YAAA,65CCFAI,EASyB,WAAsB,SAAAA,EAAA7G,EAAAC,GALnCjH,KAAAgH,MACAhH,KAAAiH,YACAjH,KAAA8N,eAAyD,iCACzD9N,KAAA+N,WAGJ,aAIC/G,EAAA7E,SAAA,YACJnC,KAAAlC,EAAA,2HAGO,OAAA8F,EAAAoK,OAEoB,cAAAC,EAAAjO,KAAAgH,IAAA,mDAAM,GAAN6G,EAAAvD,kBAAA,UACxB,OAEI,SAAK1G,EAALuC,OAAAnG,KAAAsD,QAAA4K,EAAArJ,KAAAvB,QAAAtD,KAAAiH,UACM,GAEF4G,EAAQvD,kBAAA,CAAEtD,IAAAhH,KAAMgH,IAAA,UAAAhH,KAARsD,QAAA,IAAAtD,KAAAlC,EAAA,QAAiCqQ,OAAK,CAAtCpQ,KAAA,wBAFZU,MAAAuB,KAAAiH,cADA,GACA,0JAWJ,OAAIrD,EAAAoK,OACA,cAAOhO,KAAK8N,eAAZ,GAGJ9N,KAAA8N,iBAAA9N,KAAA8N,eAAA9N,KAAAoO,iBAAW,uCACXxK,EAAAuC,gKAIK6H,OAAD,cAAAhO,KAAAsD,QAAA,GACA,GAAW,0DAIJ,OAAAM,EAAAyK,KAAA5L,KAAA,kBAAP,aAAO,oBAEH,OAAA0F,EAAAvE,EAAAuC,OAAAvG,EAAAQ,EAAAkO,SAAAnG,EAAAtD,QAAAsD,EAAAtD,KAAA1C,SAAA,UAAAgG,EAAAtD,KAAA1C,SAAA,gCAEAuC,QAAAwD,MAAA,4CAAW,0BAFX,GAEA,UACO,OAAAtE,EAAAuC,OAAA,QAAP,aAAO,wMASX,OAAAvC,EAAMoK,OACV,OAGgB,OAAAG,EAAA,GAAAI,IAAAJ,EAAAI,UAAW,+FAEN,OAAA3K,EAAAoK,OAAA,aAAM,GAEnBH,EAAAvD,kBAAA,CACAtD,IAAAhH,KAAMgH,IAAA,UAAAhH,KAAAsD,QAAA,uBAEV,aAAO,GAAPM,EAAAuC,6BAGJ,OAEI,eADJnG,KAAAwO,oBAAqB,GACjBrN,EAAK,EAAAmE,EAAAH,EAA2BhE,EAAhCmE,EAAA3E,OAAAQ,IACH+C,EAAAoB,EAAAnE,sDAKJ0M,EAFDzO,UAAAgF,mBAAA,SAAAF,uCAMC2J,EAFDzO,UAAAqP,kBAAA,mLAKmB,OAAA7K,EAAAoK,OAAA,aAAW,+FACL,OAAApK,EAAAoK,OAAA,aAAM,GAEnBH,EAAQvD,kBAAA,CAAEtD,IAAAhH,KAAMgH,IAAA,UAAAhH,KAAAsD,QAAA,IAAAtD,KAAAlC,EAAA,QAARqQ,OAAA,CAFKpQ,KAAAmG,MAIjB,aAAO,GAAPN,EAAAuC,sCAMA,IAFJuI,EAAK9K,EAAAuC,OACLnG,KAAA+N,WAAoB7J,GAAA,GAChB/C,EAAK,EAAAwN,EAALD,EAA8BvN,EAAAwN,EAAYhO,OAA1CQ,IACHyN,EAAAD,EAAAxN,yCACD,MAAY,6BAGe0M,EAAAzO,UAAA8G,MAAA,SAAAf,EAAA0J,eAA8B,IAAAA,iGAC5C,OAAAlG,EAAAqF,OAAA,aAAW,+FACH,OAAApK,EAAAoK,OAAA,aAAM,GAEnBH,EAAQvD,kBAAA,CAAEtD,IAAAhH,KAAOgH,IAAO,UAAPhH,KAAAsD,QAAA,IAAAtD,KAAAlC,EAAA,QAATqQ,OAAA,CAFKW,MAAA3J,EAAA4J,KAAA,SAIjB,aAAO,GAAPnL,EAAAuC,4BAGA,GAAAtB,EAAA8D,EAAAxC,QAAA0I,EAAA,qCAEgC,cAAA1N,EAAAyC,EAAAjD,OAExB,IADJuD,EAAIN,EAAOzC,IACPkD,UAAA1D,OAAA,GAC8C,IAC9C,IAAOuD,EAAPG,UAAoB,GAAA5D,UACpByD,EAAAG,UAAA,GAAAC,aAAA,aAIA0K,EAAAhP,KAAA+N,WAAA7J,EAAAnG,OAAA,GACkB,GAAW,+BAVL,0EAaW,cAAAmL,EAAAC,EAAAxI,WAE9BwI,EAAAD,IAAD5E,aAAA0K,EAAAvO,cAAA6D,cAAA2K,EAAA,GAEkB,GAAW,gCAJE,GACnC,GAGI,OAEAD,EAAArG,EAAAxC,mGAMhB,qIAIO,OAAAvC,EAAAoK,OAAA,aAAW,GAEVhO,KAAGkP,cAAa,WAChB,OAAArB,EAAQvD,kBAAA,CAAEtD,IAAAjG,EAAMiG,IAAR,UAAAjG,EAAAuC,QAAA,IAAAvC,EAAAjD,EAAA,QAAgBqQ,OAAK,CAArBpQ,KAAAmG,EAFZzF,cADJ,aAAO,qBA3IU,YClBzB,SAAAlB,EAAAD","file":"./datasources/bpftrace/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 131);\n","export type Datapoint = [number | string | undefined, number, number?];\n\nexport interface TimeSeriesResult {\n    target: string;\n    datapoints: Datapoint[]\n}\n\nexport interface TableResult {\n    columns: any[]\n    rows: any[]\n    type: string\n}\n\nexport type TargetResult = TimeSeriesResult | TableResult;\n\nexport enum TargetFormat {\n    TimeSeries = \"time_series\",\n    Table = \"table\",\n    Heatmap = \"heatmap\",\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import _ from 'lodash';\nimport { TimeSeriesResult, Datapoint, TableResult, TargetFormat } from './types';\n\nexport default class Transformations {\n\n    constructor(private templateSrv: any) {\n    }\n\n    getLabel(target: string, legendFormat: string) {\n        if (_.isEmpty(legendFormat)) {\n            return target;\n        }\n        else {\n            const targetSpl = target.split('.');\n            let vars = {\n                instance: { value: target },\n                metric0: { value: targetSpl[targetSpl.length - 1] }\n            };\n            return this.templateSrv.replace(legendFormat, vars);\n        }\n    }\n\n    updateLabels(targetResults: TimeSeriesResult[], target: any) {\n        return targetResults.map((t: TimeSeriesResult) => {\n            return { target: this.getLabel(t.target, target.legendFormat), datapoints: t.datapoints }\n        });\n    }\n\n    transformToHeatmap(targetResults: TimeSeriesResult[]) {\n        for (const target of targetResults) {\n            // target name is the upper bound\n            const match = target.target.match(/^(.+?)\\-(.+?)$/);\n            if (match) {\n                target.target = match[2];\n            }\n\n            // round timestamps to one second - the heatmap panel calculates the x-axis size accordingly\n            target.datapoints = target.datapoints.map(\n                (dataPoint: Datapoint) => [dataPoint[0], Math.floor(dataPoint[1] / 1000) * 1000]\n            );\n        }\n        return targetResults;\n    }\n\n    transformToTable(targetResults: TimeSeriesResult[]) {\n        let tableText = \"\";\n        if (targetResults.length > 0 && targetResults[0].datapoints.length > 0)\n            tableText = targetResults[0].datapoints[0][0] as string;\n\n        let table: TableResult = { columns: [], rows: [], type: 'table' };\n        let lines = tableText.split('\\n');\n        let columnSizes: [number, number | undefined][] = [];\n\n        for (let line of lines) {\n            line = line.trim();\n            if (line.length === 0 || line.includes(\"Ctrl-C\"))\n                continue;\n\n            if (_.isEmpty(table.columns)) {\n                let tableHeaders = line.split(/\\s\\s+/);\n                for (let i = 0; i < tableHeaders.length; i++) {\n                    const colStartAt = line.indexOf(tableHeaders[i]);\n                    const colEndAt = i + 1 < tableHeaders.length ? line.indexOf(tableHeaders[i + 1]) - 1 : undefined;\n                    table.columns.push({ text: tableHeaders[i] });\n                    columnSizes.push([colStartAt, colEndAt]);\n                }\n            }\n            else {\n                let row = columnSizes.map((colSize: any) => line.substring(colSize[0], colSize[1]).trim());\n                table.rows.push(row);\n            }\n        }\n        return [table];\n    }\n\n    transform(targetResults: TimeSeriesResult[], target: any) {\n        if (target.format === TargetFormat.TimeSeries)\n            return this.updateLabels(targetResults, target);\n        else if (target.format === TargetFormat.Heatmap)\n            return this.transformToHeatmap(targetResults);\n        else if (target.format == TargetFormat.Table)\n            return this.transformToTable(targetResults);\n        else\n            throw { message: `Invalid target format '${target.format}', possible options: ${TargetFormat.TimeSeries}, ${TargetFormat.Heatmap}, ${TargetFormat.Table}` };\n    }\n\n\n}\n","import _ from 'lodash';\nimport Context from './context';\nimport { Datapoint, TimeSeriesResult } from './types';\n\nexport default class DataStore {\n    private store: Record<string, Record<string, Datapoint[]>> = {}; // store[metric][instance] = [val,ts,origVal]\n\n    constructor(private context: Context, private oldestDataMs: number) {\n    }\n\n    ingestCounterMetric(instanceStore: Datapoint[], instance: any, pollTimeEpochMs: number) {\n        // first value: store it as undefined, to be filtered by queryTimeSeries()\n        // subsequent values: perform rate conversation\n        if (instanceStore.length > 0) {\n            let [, prevTimeMs, prevOrigVal] = instanceStore[instanceStore.length - 1];\n            const deltaSec = (pollTimeEpochMs - prevTimeMs) / 1000;\n            instanceStore.push([(instance.value - prevOrigVal!) / deltaSec, pollTimeEpochMs, instance.value]);\n        }\n        else {\n            instanceStore.push([undefined, pollTimeEpochMs, instance.value]);\n        }\n    }\n\n    ingestMetric(metricStore: Record<string, Datapoint[]>, metric: any, pollTimeEpochMs: number) {\n        const metadata = this.context.findMetricMetadata(metric.name);\n        if (!metadata) {\n            console.info(`skipping ingestion of ${metric.name}: metadata not available`);\n            return;\n        }\n\n        for (const instance of metric.instances) {\n            let instanceStore = metricStore[instance.instanceName];\n\n            // for the bpftrace output variable, always recreate the metric store (do not store history)\n            if (!instanceStore || (metadata.labels && metadata.labels.metrictype === \"output\")) {\n                instanceStore = metricStore[instance.instanceName] = [];\n            }\n\n            if (metadata.sem === \"counter\") {\n                this.ingestCounterMetric(instanceStore, instance, pollTimeEpochMs);\n            }\n            else {\n                instanceStore.push([instance.value, pollTimeEpochMs]);\n            }\n        }\n    }\n\n    ingest(data: any) {\n        if (_.isEmpty(data))\n            return;\n\n        const pollTimeEpochMs = data.timestamp.s * 1000 + data.timestamp.us / 1000;\n        for (const metric of data.values) {\n            if (!this.store[metric.name]) {\n                this.store[metric.name] = {};\n            }\n\n            this.ingestMetric(this.store[metric.name], metric, pollTimeEpochMs);\n        }\n    }\n\n    queryTimeSeries(metrics: string[], from: number, to: number) {\n        let targetResults: TimeSeriesResult[] = [];\n        for (const metric of metrics) {\n            if (!(metric in this.store))\n                continue;\n\n            for (const instance in this.store[metric]) {\n                let target = {\n                    // for metrics without instance domains, show metric name\n                    target: instance === \"null\" ? metric : instance,\n                    datapoints: this.store[metric][instance].filter((dataPoint: Datapoint) => (\n                        from <= dataPoint[1] && dataPoint[1] <= to && dataPoint[0] != undefined\n                    ))\n                };\n\n                targetResults.push(target);\n            }\n        }\n        return targetResults;\n    }\n\n    cleanExpiredMetrics() {\n        const keepExpiry = new Date().getTime() - this.oldestDataMs\n        for (const metric in this.store) {\n            for (const instance in this.store[metric]) {\n                this.store[metric][instance] = this.store[metric][instance].filter(\n                    (dataPoint: Datapoint) => dataPoint[1] > keepExpiry\n                );\n            }\n        }\n    }\n}\n","import _ from \"lodash\";\nimport Context from \"./context\";\nimport DataStore from \"./datastore\";\n\nexport default class Poller {\n    private requestedMetrics: Record<string, number> = {}; // {metric: lastRequested}\n\n    constructor(private context: Context, private datastore: DataStore, private keepPollingMs: number) {\n    }\n\n    async poll() {\n        const metrics = Object.keys(this.requestedMetrics);\n        if (metrics.length == 0) {\n            return;\n        }\n\n        const data = await this.context.fetch(metrics, true);\n        this.datastore.ingest(data);\n    }\n\n    ensurePolling(metrics: string[]) {\n        const now = new Date().getTime()\n        for (const metric of metrics) {\n            if (!this.context.findMetricMetadata(metric))\n                throw { message: `Cannot find metric ${metric} on PMDA.` };\n            this.requestedMetrics[metric] = now\n        }\n    }\n\n    removeMetricsFromPolling(metrics: string[]) {\n        for (const metric of metrics) {\n            delete this.requestedMetrics[metric];\n        }\n    }\n\n    cleanupExpiredMetrics() {\n        // clean up any not required metrics\n        const pollExpiry = new Date().getTime() - this.keepPollingMs;\n        this.requestedMetrics = _.pickBy(this.requestedMetrics, (lastRequested: number) => lastRequested > pollExpiry);\n    }\n}\n","import Context from \"./context\";\nimport DataStore from \"./datastore\";\nimport Poller from './poller';\n\nexport interface Endpoint {\n    context: Context;\n    poller: Poller;\n    datastore: DataStore;\n}\n\nexport default class EndpointRegistry<T extends Endpoint> {\n    private endpoints: Record<string, T> = {};\n\n    private generateId(url: string, container?: string) {\n        if (!container)\n            container = \"\";\n        return `${url}::${container}`;\n    }\n\n    find(url: string, container?: string) {\n        const id = this.generateId(url, container);\n        return this.endpoints[id];\n    }\n\n    create(url: string, container: string | null, keepPollingMs: number, oldestDataMs: number) {\n        const id = this.generateId(url, container!);\n        const context = new Context(url, container!);\n        const datastore = new DataStore(context, oldestDataMs);\n        const poller = new Poller(context, datastore, keepPollingMs);\n\n        this.endpoints[id] = { context, datastore, poller } as T;\n        return this.endpoints[id];\n    }\n\n    list() {\n        return Object.values(this.endpoints);\n    }\n\n}","import _ from 'lodash';\nimport Context from \"../lib/context\";\nimport Poller from '../lib/poller';\n\nexport interface BPFtraceScript {\n    // from PMDA\n    readonly name: string;\n    readonly vars: string[];\n    status: string;\n    exit_code: number | null;\n    output: string;\n\n    // additional properties by ScriptRegistry\n    code: string;\n    lastRequested: number;\n}\n\nexport default class ScriptRegistry {\n\n    // currently active (requested) scripts\n    private scripts: Record<string, BPFtraceScript> = {}; // {name: BPFtraceScript}\n\n    // a script which failed once will fail every time\n    // store them in a separate object, otherwise the syncState()\n    // will clean them (as they don't exist on the PMDA)\n    // and the datasource will keep re-adding them\n    private failedScripts: Record<string, BPFtraceScript> = {}; // {code: BPFtraceScript}\n\n    constructor(private context: Context, private poller: Poller, private keepPollingMs: number) {\n    }\n\n    async ensureActive(code: string) {\n        if (code in this.failedScripts) {\n            return this.failedScripts[code];\n        }\n\n        const script: BPFtraceScript = _.find(Object.values(this.scripts), (script: BPFtraceScript) => script.code === code);\n        if (!script || (script.status === \"stopped\" && script.exit_code == 0)) {\n            // if script doesn't exist or script got stopped gracefully (exit_code == 0)\n            // register script\n            return await this.register(code);\n        }\n        else {\n            script.lastRequested = new Date().getTime();\n            return script;\n        }\n    }\n\n    async register(code: string) {\n        console.debug(\"registering script\", code);\n\n        // create temporary context, required so that the PMDA can identify\n        // the client who sent the pmStore message\n        const context = new Context(this.context.url);\n        try {\n            await context.store(\"bpftrace.control.register\", code);\n        }\n        catch (error) {\n            if (error.data && error.data.includes(\"-12400\")) {\n                // PMDA returned PM_ERR_BADSTORE\n                // next fetch will show error reason\n            }\n            else {\n                // other error\n                throw error;\n            }\n        }\n        const response = await context.fetch([\"bpftrace.control.register\"]);\n\n        const script: BPFtraceScript = JSON.parse(response.values[0].instances[0].value);\n        script.code = code;\n        script.lastRequested = new Date().getTime();\n\n        console.debug(\"bpftrace.control.register response\", script);\n        if (script.status === \"stopped\") {\n            // script failed due to no variables found, invalid name etc.\n            this.failedScripts[code] = script;\n        }\n        else {\n            this.scripts[script.name] = script;\n            // script has registered new metric names, fetch them\n            await this.context.fetchMetricMetadata(\"bpftrace\");\n        }\n\n        return script;\n    }\n\n    cleanupExpiredScripts() {\n        // clean up any not required scripts\n        // otherwise they get synced forever\n        const scriptExpiry = new Date().getTime() - this.keepPollingMs;\n        this.scripts = _.pickBy(this.scripts, (script: BPFtraceScript) => script.lastRequested > scriptExpiry);\n    }\n\n    async syncState() {\n        if (_.isEmpty(this.scripts)) {\n            return;\n        }\n\n        // sync available metrics on the PMDA\n        await this.context.fetchMetricMetadata(\"bpftrace\");\n\n        let metrics: string[] = [];\n        for (const script of Object.values(this.scripts)) {\n            const state_metrics = [\n                `bpftrace.scripts.${script.name}.status`,\n                `bpftrace.scripts.${script.name}.exit_code`,\n                `bpftrace.scripts.${script.name}.output`\n            ];\n\n            let found_all_metrics = true;\n            for (const state_metric of state_metrics) {\n                if (this.context.findMetricMetadata(state_metric))\n                    metrics.push(state_metric);\n                else\n                    found_all_metrics = false;\n            }\n\n            // don't remove scripts which are currently starting and don't have their metrics registered yet\n            if (!found_all_metrics && script.status !== \"starting\") {\n                console.info(`script ${script.name} is missing on the PMDA ${script.status}`);\n                const script_metrics = script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n                delete this.scripts[script.name];\n                this.poller.removeMetricsFromPolling(script_metrics);\n            }\n        }\n\n        if (metrics.length === 0)\n            return;\n\n        const response = await this.context.fetch(metrics);\n        for (const metric of response.values) {\n            const metric_split = metric.name.split('.');\n            const script_name = metric_split[2];\n            const metric_field = metric_split[3];\n\n            const script = this.scripts[script_name];\n            if (!script) {\n                // script got removed by cleanupExpiredScripts()\n                // while waiting for values from the PMDA\n                continue;\n            }\n            else if ([\"status\", \"exit_code\", \"output\"].includes(metric_field)) {\n                script[metric_field] = metric.instances[0].value;\n            }\n        }\n    }\n}\n","///<reference path=\"../../../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\nimport _ from 'lodash';\nimport Context from '../lib/context';\nimport EndpointRegistry from '../lib/endpoint_registry';\nimport ScriptRegistry, { BPFtraceScript } from './script_registry';\nimport Transformations from '../lib/transformations';\nimport BPFtraceEndpoint from './bpftrace_endpoint';\nimport { TargetFormat, TargetResult } from '../lib/types';\n\nexport class PCPBPFtraceDatasource {\n\n    name: string;\n    url: string;\n    q: any;\n    backendSrv: any;\n    templateSrv: any;\n    variableSrv: any;\n    withCredentials: boolean;\n    headers: any;\n\n    pollIntervalMs: number; // poll metric sources every X ms\n    scriptSyncIntervalMs: number; // // script sync interval\n    keepPollingMs: number; // we will keep polling a metric for up to X ms after it was last requested\n    olderstDataMs: number; // age out time\n\n    endpointRegistry: EndpointRegistry<BPFtraceEndpoint>;\n    transformations: Transformations;\n\n    /** @ngInject **/\n    constructor(instanceSettings, $q, backendSrv, templateSrv, variableSrv) {\n        this.name = instanceSettings.name;\n        this.url = instanceSettings.url;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.variableSrv = variableSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n\n        this.pollIntervalMs = instanceSettings.jsonData.pollIntervalMs || 1000;\n        this.scriptSyncIntervalMs = instanceSettings.jsonData.scriptSyncIntervalMs || 2000;\n        this.keepPollingMs = instanceSettings.jsonData.keepPollingMs || 20000;\n        this.olderstDataMs = instanceSettings.jsonData.olderstDataMs || 5 * 60 * 1000;\n\n        Context.datasourceRequest = this.doRequest.bind(this);\n        this.endpointRegistry = new EndpointRegistry();\n        this.transformations = new Transformations(this.templateSrv);\n\n        if (this.pollIntervalMs > 0)\n            setInterval(this.doPollAll.bind(this), this.pollIntervalMs);\n        if (this.scriptSyncIntervalMs > 0)\n            setInterval(this.syncScriptStates.bind(this), this.scriptSyncIntervalMs);\n    }\n\n    doPollAll() {\n        let promises: Promise<void>[] = [];\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.datastore.cleanExpiredMetrics();\n            endpoint.poller.cleanupExpiredMetrics();\n            promises.push(endpoint.poller.poll());\n        }\n        return Promise.all(promises);\n    }\n\n    syncScriptStates() {\n        let promises: Promise<void>[] = [];\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.scriptRegistry.cleanupExpiredScripts();\n            promises.push(endpoint.scriptRegistry.syncState());\n        }\n        return Promise.all(promises);\n    }\n\n    getMetricNameForMetricType(context: Context, script: BPFtraceScript, metrictype: string) {\n        for (const var_ of script.vars) {\n            const metric = `bpftrace.scripts.${script.name}.data.${var_}`;\n            const metricMetadata = context.findMetricMetadata(metric);\n            if (metricMetadata && metricMetadata.labels && metricMetadata.labels.metrictype === metrictype)\n                return metric;\n        }\n        return null;\n    }\n\n    getMetricNamesForTarget(context: Context, target: any, script: BPFtraceScript) {\n        if (target.format === TargetFormat.TimeSeries) {\n            return script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n        }\n        else if (target.format === TargetFormat.Heatmap) {\n            const metric = this.getMetricNameForMetricType(context, script, \"histogram\");\n            if (metric)\n                return [metric];\n            else\n                throw { message: \"Cannot find any histogram in this BPFtrace script.\" };\n        }\n        else if (target.format === TargetFormat.Table) {\n            const metric = this.getMetricNameForMetricType(context, script, \"output\");\n            if (metric)\n                return [metric];\n            else\n                throw { message: \"Table format is only supported with printf() BPFtrace scripts.\" };\n        }\n        return [];\n    }\n\n    async query(options: any) {\n        const query = options;\n        if (query.targets.length == 0) {\n            return { data: [] };\n        }\n\n        const dashboardVariables = this.getVariables();\n        const targetResults: TargetResult[] = [];\n        for (const target of query.targets) {\n            if (target.hide || !target.code)\n                continue;\n\n            // TODO: allow templating of bpftrace script code?\n            // possible clashes of grafana templating syntax with bpftrace syntax\n            const code = target.code.trim();\n            if (code.length === 0)\n                continue;\n\n            // TODO: also allow overriding of url in query editor\n            let url: string;\n            if (dashboardVariables.url && dashboardVariables.url.value.length > 0)\n                url = dashboardVariables.url.value;\n            else\n                url = this.url;\n\n            let endpoint = this.endpointRegistry.find(url);\n            if (!endpoint) {\n                endpoint = this.endpointRegistry.create(url, null, this.keepPollingMs, this.olderstDataMs);\n                endpoint.scriptRegistry = new ScriptRegistry(endpoint.context, endpoint.poller, this.keepPollingMs);\n            }\n\n            let script: BPFtraceScript;\n            try {\n                // ensureActive registers the script (if required)\n                // register is async\n                script = await endpoint.scriptRegistry.ensureActive(code);\n\n                if (script.status === \"started\" || script.status === \"starting\") {\n                    const metrics = this.getMetricNamesForTarget(endpoint.context, target, script);\n                    endpoint.poller.ensurePolling(metrics);\n\n                    let result = endpoint.datastore.queryTimeSeries(metrics, options.range.from.valueOf(), options.range.to.valueOf());\n                    targetResults.push(...this.transformations.transform(result, target));\n                }\n                else {\n                    throw { message: `BPFtrace error:\\n\\n${script.output}` };\n                }\n            }\n            catch (error) {\n                // catch all exceptions and add the refId of the panel\n                error.refId = target.refId;\n                throw error;\n            }\n        }\n\n        return { data: targetResults };\n    }\n\n    async testDatasource() {\n        let context = new Context(this.url);\n        try {\n            await context.createContext();\n            return { status: 'success', message: \"Data source is working\", title: \"Success\" };\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                message: `Cannot connect to ${context.url}`,\n                title: 'Error',\n            };\n        }\n    }\n\n    async metricFindQuery(query) {\n        return [];\n    }\n\n    async doRequest(options: any) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return await this.backendSrv.datasourceRequest(options);\n    }\n\n    getVariables(): any {\n        const variables = {};\n        if (!this.variableSrv.variables) {\n            // variables are not defined on the datasource settings page\n            return {};\n        }\n\n        for (let variable of this.variableSrv.variables) {\n            let variableValue = variable.current.value;\n            if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n                if (variable.allValue === null) {\n                    variableValue = variable.options.slice(1).map(textValuePair => textValuePair.value);\n                } else {\n                    variableValue = variable.allValue;\n                }\n            }\n\n            variables[variable.name] = {\n                text: variable.current.text,\n                value: variableValue,\n            };\n        }\n\n        return variables;\n    }\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\nimport { TargetFormat } from '../lib/types';\n\nexport class PCPBPFtraceDatasourceQueryCtrl extends QueryCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/query.editor.html';\n\n    formats: any = [];\n\n    /** @ngInject **/\n    constructor($scope, $injector) {\n        super($scope, $injector);\n\n        this.target.code = this.target.code || \"\";\n        this.target.format = this.target.format || this.getDefaultFormat();\n\n        this.formats = [\n            { text: \"Time series\", value: TargetFormat.TimeSeries },\n            { text: \"Table\", value: TargetFormat.Table },\n            { text: \"Heatmap\", value: TargetFormat.Heatmap },\n        ];\n    }\n\n    getDefaultFormat() {\n        if (this.panelCtrl.panel.type === 'table') {\n            return TargetFormat.Table;\n        } else if (this.panelCtrl.panel.type === 'heatmap') {\n            return TargetFormat.Heatmap;\n        }\n        return TargetFormat.TimeSeries;\n    }\n\n    refreshMetricData() {\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n}\n","import { PCPBPFtraceDatasource } from './datasource';\nimport { PCPBPFtraceDatasourceQueryCtrl } from './query_ctrl';\n\nclass PCPBPFtraceConfigCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/config.html';\n}\n\nclass PCPBPFtraceQueryOptionsCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/query.options.html';\n}\n\nclass PCPBPFtraceAnnotationsQueryCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/annotations.editor.html';\n}\n\nexport {\n    PCPBPFtraceDatasource as Datasource,\n    PCPBPFtraceDatasourceQueryCtrl as QueryCtrl,\n    PCPBPFtraceConfigCtrl as ConfigCtrl,\n    PCPBPFtraceQueryOptionsCtrl as QueryOptionsCtrl,\n    PCPBPFtraceAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\ninterface MetricMetadata {\n    name: string,\n    pmid: number,\n    sem: string,\n    labels: Record<string, any>\n}\n\nexport default class Context {\n\n    static datasourceRequest: (options: any) => any;\n    private context: string;\n    private contextPromise: Promise<void> | null = null;\n    private metricMetadataCache: Record<string, MetricMetadata> = {};\n    private indomCache: Record<string, Record<number, string>> = {}; // indomCache[metric][instance_id] = instance_name\n    private d: string = '';\n\n    constructor(readonly url: string, readonly container?: string) {\n        // if port != 44322, use pmwebd API with underscore\n        // TODO: remove once transition to pmproxy is done\n        if (!url.includes(\":44322\")) {\n            this.d = '_';\n        }\n    }\n\n    private async _createContext() {\n        let contextUrl = `${this.url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`;\n\n        const contextResponse = await Context.datasourceRequest({ url: contextUrl });\n        this.context = contextResponse.data.context;\n\n        if (this.container) {\n            await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: \"pmcd.client.container\", value: this.container }\n            });\n        }\n    }\n\n    // this method ensures that only one context request will be sent at a time\n    // if there are 2 simultaneous calls to createContext(), the second call\n    // will return the promise of the first call\n    async createContext() {\n        if (this.contextPromise)\n            return this.contextPromise;\n\n        this.contextPromise = this._createContext();\n        await this.contextPromise;\n        this.contextPromise = null;\n    }\n\n    async ensureContext(fn: () => any) {\n        if (!this.context) {\n            await this.createContext();\n        }\n\n        try {\n            return await fn();\n        } catch (error) {\n            if (_.isString(error.data) && (error.data.includes(\"12376\") || error.data.includes(\"unknown context identifier\"))) {\n                console.debug(\"context expired, creating new context...\");\n                await this.createContext();\n                return await fn();\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n\n    async fetchMetricMetadata(prefix?: string) {\n        let params: any = {};\n        if (prefix)\n            params.prefix = prefix;\n\n        const metrics = await this.ensureContext(async () => {\n            // TODO: use this.url again\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_metric`,\n                //url: `http://localhost:44322/pmapi/metric`,\n                params\n            });\n            return response.data.metrics;\n        });\n\n        this.metricMetadataCache = {};\n        for (const metric of metrics) {\n            this.metricMetadataCache[metric.name] = metric;\n        }\n    }\n\n    findMetricMetadata(metric: string) {\n        return this.metricMetadataCache[metric];\n    }\n\n    getAllMetricNames() {\n        return Object.keys(this.metricMetadataCache);\n    }\n\n    async refreshIndoms(metric: string) {\n        const indoms = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}indom`,\n                params: { name: metric }\n            });\n            return response.data.instances;\n        });\n\n        // convert [{instance: X, name: Y}] to {instance: name}\n        this.indomCache[metric] = {};\n        for (const indom of indoms) {\n            this.indomCache[metric][indom.instance] = indom.name;\n        }\n        return this.indomCache[metric];\n    }\n\n    async fetch(metrics: string[], instanceNames: boolean = false) {\n        const data = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}fetch`,\n                params: { names: metrics.join(',') }\n            });\n            return response.data;\n        });\n\n        if (instanceNames) {\n            // add instance names to instances\n            for (const metric of data.values) {\n                if (metric.instances.length == 0) {\n                    continue;\n                } else if (metric.instances[0].instance === -1) { // this metric has no instances (single value)\n                    metric.instances[0].instanceName = null;\n                    continue;\n                }\n\n                let indomsForMetric = this.indomCache[metric.name];\n                if (!indomsForMetric)\n                    indomsForMetric = await this.refreshIndoms(metric.name);\n\n                let refreshed = false;\n                for (const instance of metric.instances) {\n                    instance.instanceName = indomsForMetric[instance.instance];\n                    if (!instance.instanceName && !refreshed) {\n                        // refresh instances at max once per metric\n                        indomsForMetric = await this.refreshIndoms(metric.name);\n                        instance.instanceName = indomsForMetric[instance.instance];\n                        refreshed = true;\n                    }\n                }\n            }\n        }\n\n        return data;\n    }\n\n    async store(metric: string, value: string) {\n        return await this.ensureContext(() => {\n            return Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: metric, value: value }\n            })\n        });\n    }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;"],"sourceRoot":""}