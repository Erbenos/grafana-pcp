{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./datasources/bpftrace/datasource.ts","webpack:///./datasources/bpftrace/context.ts","webpack:///./datasources/bpftrace/poller.ts","webpack:///./datasources/bpftrace/transformations.ts","webpack:///./datasources/bpftrace/datastore.ts","webpack:///./datasources/bpftrace/script_registry.ts","webpack:///./datasources/bpftrace/endpoint.ts","webpack:///./datasources/bpftrace/query_ctrl.ts","webpack:///./datasources/bpftrace/module.ts","webpack:///external \"app/plugins/sdk\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","TargetFormat","Context","url","container","this","contextPromise","metricMetadataCache","missingMetrics","indomCache","_createContext","console","debug","contextUrl","datasourceRequest","contextResponse","_a","sent","context","data","external_lodash_default","a","isEmpty","fetchMetricMetadata","createContext","ensureContext","fn","log","err_1","__awaiter","_this","metricsResponse","metrics","findPmidForMetric","metric","pmidentry","find","pmid","includes","push","findMetricMetadata","refreshIndoms","params","instances","indoms","reduce","cache","indom","instance","fetch","instanceNames","queryPmids","map","filter","length","pmids","join","_d","values","_i","instanceName","indomsForMetric","refreshed","_c","_b","store","Poller","endpointRegistry","poll_interval_ms","setInterval","doPollAll","list","endpoint","endpointPoller","cleanup","poll","Transformations","toHeatmap","target","split","datapoints","dataPoint","Math","round","DataStore","ingest","pollTimeEpochMs","timestamp","us","metricStore","metadata","isExistingMetric","sem","instanceStore","prevTimeMs","prevOrigVal","deltaSec","query","format","targets","metrics_1","transformations","cleanExpiredMetrics","keepExpiry","Date","getTime","ScriptRegistry","poller","scripts","syncState","findByCode","code","script","register","uuid","floor","random","responses","JSON","parse","status","message","output","status_metric","output_metric","this_1","info","script_metrics","vars","var_","removeMetricsFromPolling","response","metric_split","script_name","metric_field","endpoint_Endpoint","bpftrace_context","datastore","endpoint_EndpointPoller","scriptRegistry","script_registry","EndpointPoller","requestedMetrics","keys","ensurePolling","metrics_2","pollExpiry","pickBy","lastRequested","EndpointRegistry","endpoints","find_or_create","id","datasource_PCPBPFtraceDatasource","PCPBPFtraceDatasource","instanceSettings","$q","backendSrv","templateSrv","variableSrv","q","withCredentials","headers","Content-Type","basicAuth","doRequest","$inject","getAdhocFilters","adhocFilters","getVariables","error_1","apply","error","handleError","refId","title","datasource_generator","options","variables","variable","variableValue","isEqual","allValue","slice","textValuePair","text","current","query_ctrl_PCPBPFtraceDatasourceQueryCtrl","_super","$scope","$injector","formats","getDefaultFormat","TimeSeries","Table","__extends","PCPBPFtraceDatasourceQueryCtrl","panelCtrl","panel","type","refreshMetricData","templateUrl","__webpack_exports__","PCPBPFtraceConfigCtrl","PCPBPFtraceQueryOptionsCtrl","PCPBPFtraceAnnotationsQueryCtrl"],"mappings":"qEACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,uBClFAhC,EAAAD,QAAAkC,+CCaYC,g0CCLZ,WASI,SAAAC,EAAqBC,EAAsBC,QAAA,IAAAA,MAAA,MAAtBC,KAAAF,MAAsBE,KAAAD,YALnCC,KAAAC,eAAuC,KACvCD,KAAAE,oBAAwC,GACxCF,KAAAG,eAA2B,GAC3BH,KAAAI,WAAqD,GAyJjE,OApJkBP,EAAAN,UAAAc,eAAd,2GAM4B,OALxBC,QAAQC,MAAM,iCACVC,EAAgBR,KAAKF,IAAG,mDACxBE,KAAKD,YACLS,GAAc,cAAcR,KAAKD,WAEb,GAAMF,EAAQY,kBAAkB,CAAEX,IAAKU,mBAAzDE,EAAkBC,EAAAC,OAExBZ,KAAKa,QAAUH,EAAgBI,KAAKD,QAEhCb,KAAKD,UAEqB,GAAMF,EAAQY,kBAAkB,CACtDX,IAAQE,KAAKF,IAAG,UAAUE,KAAKa,QAAO,4CAA4Cb,KAAKD,aAH3F,aAE0BY,EAAAC,+BAM1BG,EAAAC,EAAEC,QAAQjB,KAAKE,qBACf,GAAMF,KAAKkB,uBADX,aACAP,EAAAC,wCAOFf,EAAAN,UAAA4B,cAAN,mGAGI,OAFKnB,KAAKC,iBACND,KAAKC,eAAiBD,KAAKK,kBAC/B,GAAML,KAAKC,8BAAXU,EAAAC,OACAZ,KAAKC,eAAiB,eAGpBJ,EAAAN,UAAA6B,cAAN,SAAoBC,wGACXrB,KAAKa,QAAN,MACA,GAAMb,KAAKmB,wBAAXR,EAAAC,wBAIO,gCAAMS,YAAb,SAAOV,EAAAC,eAGP,kBADAN,QAAQgB,IAAI,QAASC,EAAK,2BAC1B,GAAMvB,KAAKmB,wBACJ,OADPR,EAAAC,OACO,GAAMS,YAAb,SAAOV,EAAAC,+BAITf,EAAAN,UAAA2B,oBAAN,8GAEI,SAAMlB,KAAKoB,cAAc,kBAAAI,EAAAC,OAAA,2EACG,SAAM5B,EAAQY,kBAAkB,CACpDX,IAAQE,KAAKF,IAAG,UAAUE,KAAKa,QAAO,4BADpCa,EAAkBf,EAAAC,OAGxBZ,KAAKE,oBAAsBwB,EAAgBZ,KAAKa,kCAJpDhB,EAAAC,iBAQJf,EAAAN,UAAAqC,kBAAA,SAAkBC,GACd,IAAMC,EAAY9B,KAAKE,oBAAoB6B,KAAK,SAAAtC,GAAK,OAAAA,EAAEvB,OAAF2D,IACrD,OAAIC,EACOA,EAAUE,MAEZhC,KAAKG,eAAe8B,SAASJ,KAC9B7B,KAAKG,eAAe+B,KAAKL,GACzBvB,QAAQgB,IAAI,wBAAwBO,EAAM,4BAEvC,OAIfhC,EAAAN,UAAA4C,mBAAA,SAAmBN,GACf,OAAO7B,KAAKE,oBAAoB6B,KAAK,SAAAtC,GAAK,OAAAA,EAAEvB,OAAF2D,KAGxChC,EAAAN,UAAA6C,cAAN,SAAoBP,wGACD,SAAM7B,KAAKoB,cAAc,kBAAAI,EAAAC,OAAA,qEACnB,SAAM5B,EAAQY,kBAAkB,CAC7CX,IAAQE,KAAKF,IAAG,UAAUE,KAAKa,QAAO,UACtCwB,OAAQ,CAAEnE,KAAM2D,aAEpB,SAJiBlB,EAAAC,OAIDE,KAAKwB,0BAQzB,OAbMC,EAAS5B,EAAAC,OASfZ,KAAKI,WAAWyB,GAAUU,EAAOC,OAAO,SAACC,EAAYC,GAEjD,OADAD,EAAMC,EAAMC,UAAYD,EAAMxE,KACvBuE,GACR,IACH,GAAOzC,KAAKI,WAAWyB,UAGrBhC,EAAAN,UAAAqD,MAAN,SAAYjB,EAAmBkB,eAAA,IAAAA,OAAA,mHAM3B,OAJMC,EAAanB,EACdoB,IAAI,SAAClB,GAAmB,OAAAJ,EAAKG,kBAALC,KACxBmB,OAAO,SAACnB,GAA0B,OAAAA,KAEvBoB,OAKH,GAAMjD,KAAKoB,cAAc,kBAAAI,EAAAC,OAAA,qEACjB,SAAM5B,EAAQY,kBAAkB,CAC7CX,IAAQE,KAAKF,IAAG,UAAUE,KAAKa,QAAO,UACtCwB,OAAQ,CAAEa,MAAOJ,EAAWK,KAAK,gBAErC,SAJiBxC,EAAAC,OAIDE,cAThB,GAAO,cAILA,EAAOsC,EAAAxC,QAQTiC,EAAA,cAEgC,EAAXlC,EAAAG,EAAKuC,+BAALC,EAAA3C,EAAAsC,OACc,IADxBpB,EAAMlB,EAAA2C,IACFhB,UAAUW,OACjB,OACyC,IAAlCpB,EAAOS,UAAU,GAAGK,UAC3Bd,EAAOS,UAAU,GAAGiB,aAAe,KACnC,QAGAC,EAAkBxD,KAAKI,WAAWyB,EAAO3D,OACzC,MACkB,GAAM8B,KAAKoC,cAAcP,EAAO3D,OAV1B,aAUxBsF,EAAkBJ,EAAAxC,wBAElB6C,GAAY,IACuB,EAAhBC,EAAA7B,EAAOS,kCAAPqB,EAAAD,EAAAT,SAAZN,EAAQe,EAAAC,IACNJ,aAAeC,EAAgBb,EAASA,UAC5CA,EAASY,cAAiBE,EAA3B,MAEkB,GAAMzD,KAAKoC,cAAcP,EAAO3D,QAJnB,aAI/BsF,EAAkBJ,EAAAxC,OAClB+B,EAASY,aAAeC,EAAgBb,EAASA,UACjDc,GAAY,0BANGE,wBAbNL,iBAyBzB,SAAOxC,SAGLjB,EAAAN,UAAAqE,MAAN,SAAY/B,EAAgBjD,sGACjB,SAAMoB,KAAKoB,cAAc,WAC5B,OAAOvB,EAAQY,kBAAkB,CAC7BX,IAAQ2B,EAAK3B,IAAG,UAAU2B,EAAKZ,QAAO,UACtCwB,OAAQ,CAAEnE,KAAM2D,EAAQjD,MAAOA,eAHvC,SAAO+B,EAAAC,cAOff,EAhKA,KCNA,WAEI,SAAAgE,EAAoBC,EAAoCC,GAApC/D,KAAA8D,mBAChBE,YAAYhE,KAAKiE,UAAU9E,KAAKa,MAAO+D,GAS/C,OANIF,EAAAtE,UAAA0E,UAAA,WACI,IAAuB,IAAAX,EAAA,EAAA3C,EAAAX,KAAK8D,iBAAiBI,OAAtBZ,EAAA3C,EAAAsC,OAAAK,IAA8B,CAAhD,IAAMa,EAAQxD,EAAA2C,GACfa,EAASC,eAAeC,UACxBF,EAASC,eAAeE,SAGpCT,EAZA,KCAA,oBAAAU,KAWA,OAVWA,EAAAC,UAAP,SAAiBC,GAQb,OANAA,EAAOA,OAASA,EAAOA,OAAOC,MAAM,KAAK,GAGzCD,EAAOE,WAAaF,EAAOE,WAAW5B,IACnC,SAAC6B,GAAyB,OAACA,EAAU,GAAsC,IAAlCC,KAAKC,MAAMF,EAAU,GAAK,KAAcA,EAAvD,MAEtBH,GAEfF,EAXA,KCMA,WAGI,SAAAQ,EAAoBlE,GAAAb,KAAAa,UAFZb,KAAA4D,MAAqD,GAwEjE,OAnEImB,EAAAxF,UAAAyF,OAAA,SAAOlE,GACH,IAAIC,EAAAC,EAAEC,QAAQH,GAId,IADA,IAAMmE,EAAqC,IAAnBnE,EAAKoE,UAAUxF,EAAWoB,EAAKoE,UAAUC,GAAK,IACjD7B,EAAA,EAAA3C,EAAAG,EAAKuC,OAALC,EAAA3C,EAAAsC,OAAAK,IAAa,CAA7B,IAAMzB,EAAMlB,EAAA2C,GACT8B,EAAcpF,KAAK4D,MAAM/B,EAAO3D,MAC/BkH,IACDA,EAAcpF,KAAK4D,MAAM/B,EAAO3D,MAAQ,IAI5C,IADA,IAAMmH,EAAWrF,KAAKa,QAAQsB,mBAAmBN,EAAO3D,MACjCyF,EAAA,EAAAD,EAAA7B,EAAOS,UAAPqB,EAAAD,EAAAT,OAAAU,IAAkB,CAApC,IAAMhB,EAAQe,EAAAC,GACT2B,EAAmB3C,EAASY,gBAAgB6B,EAIlD,GAHKE,IACDF,EAAYzC,EAASY,cAAgB,IAEpB,YAAjB8B,EAASE,IAAoB,CAC7B,IAAMC,EAAgBJ,EAAYzC,EAASY,cAC3C,GAAI+B,EAAkB,CACd,IAAAlC,EAAAoC,IAAAvC,OAAA,GAAGwC,EAAArC,EAAA,GAAYsC,EAAAtC,EAAA,GACbuC,GAAYV,EAAkBQ,GAAc,IAClDD,EAActD,KAAK,EAAES,EAAS/D,MAAQ8G,GAAgBC,EAAUV,EAAiBtC,EAAS/D,aAG1F4G,EAActD,KAAK,CAACS,EAAS/D,MAAOqG,EAAiBtC,EAAS/D,aAIlEwG,EAAYzC,EAASY,cAAcrB,KAAK,CAACS,EAAS/D,MAAOqG,OAMzEF,EAAAxF,UAAAqG,MAAA,SAAMjE,EAAmBkE,GAErB,IADA,IAAIC,EAAoB,GACHxC,EAAA,EAAAyC,EAAApE,EAAA2B,EAAAyC,EAAA9C,OAAAK,IAAS,CAAzB,IAAMzB,EAAMkE,EAAAzC,GACb,GAAMzB,KAAU7B,KAAK4D,MAGrB,IAAK,IAAMjB,KAAY3C,KAAK4D,MAAM/B,GAAS,CACvC,IAAI4C,EAAS,CAETA,OAAqB,SAAb9B,EAAsBd,EAASc,EACvCgC,WAAY3E,KAAK4D,MAAM/B,GAAQc,GAAUK,OAAO,SAAC4B,GAAyB,OAAAA,EAAU,GAAV,KAG/D,YAAXiB,IACApB,EAASuB,EAAgBxB,UAAUC,IAEvCqB,EAAQ5D,KAAKuC,IAGrB,OAAOqB,GAGXf,EAAAxF,UAAA0G,oBAAA,WACI,IAAMC,GAAa,IAAIC,MAAOC,UAlEf,IAmEf,IAAK,IAAMvE,KAAU7B,KAAK4D,MACtB,IAAK,IAAMjB,KAAY3C,KAAK4D,MAAM/B,GAC9B7B,KAAK4D,MAAM/B,GAAQc,GAAY3C,KAAK4D,MAAM/B,GAAQc,GAAUK,OACxD,SAAC4B,GAAyB,OAAAA,EAAU,GAAVsB,KAK9CnB,EAzEA,izCCKA,WAII,SAAAsB,EAAoBxF,EAA0ByF,GAA1BtG,KAAAa,UAA0Bb,KAAAsG,SAFrCtG,KAAAuG,QAA0C,GAG/CvC,YAAYhE,KAAKwG,UAAUrH,KAAKa,MAAO,KA0D/C,OAvDIqG,EAAA9G,UAAAkH,WAAA,SAAWC,GACP,OAAO3F,EAAAC,EAAEe,KAAK1D,OAAOgF,OAAOrD,KAAKuG,SAAU,SAACI,GAA2B,OAAAA,EAAOD,OAAPA,KAGrEL,EAAA9G,UAAAqH,SAAN,SAAe/F,EAAkB6F,qGAG7B,OAFApG,QAAQC,MAAM,qBAAsBmG,GAChCG,EAAOhC,KAAKiC,MAAsB,IAAhBjC,KAAKkC,UAC3B,GAAMlG,EAAQ+C,MAAM,4BAAgCiD,EAAI,IAAIH,WAE1C,OAFlB/F,EAAAC,OAEkB,GAAMC,EAAQ+B,MAAM,CAAC,sCAMvC,GANMoE,EAAYrG,EAAAC,QACZ+F,EAAyBM,KAAKC,MAAMF,EAAU3D,OAAO,GAAGf,UAAU,GAAG1D,OAAOiI,IAC3EH,KAAOA,EACd1G,KAAKuG,QAAQI,EAAOzI,MAAQyI,EAE5BrG,QAAQC,MAAM,qCAAsCoG,GAC9B,YAAlBA,EAAOQ,OACP,KAAM,CAAEC,QAAS,sBAAsBT,EAAOU,QAElD,SAAOV,SAGLN,EAAA9G,UAAAiH,UAAN,iIACI,SAAMxG,KAAKa,QAAQK,8BAGnB,IAHAkC,EAAAxC,OAEIe,EAAoB,cACbgF,GACP,IAAMW,EAAgB,oBAAoBX,EAAOzI,KAAI,UAC/CqJ,EAAgB,oBAAoBZ,EAAOzI,KAAI,UAErD,GAAIsJ,EAAK3G,QAAQsB,mBAAmBmF,IAAkBE,EAAK3G,QAAQsB,mBAAmBoF,GAClF5F,EAAQO,KAAKoF,EAAeC,OAE3B,CACDjH,QAAQmH,KAAK,UAAUd,EAAOzI,KAAI,2BAClC,IAAMwJ,EAAiBf,EAAOgB,KAAK5E,IAAI,SAAA6E,GAAQ,0BAAoBjB,EAAOzI,KAAI,SAA/B0J,WACxCJ,EAAKjB,QAAQI,EAAOzI,MAC3BsJ,EAAKlB,OAAOuB,yBAAyBH,YAX7CpE,EAAA,EAAqB3C,EAAAtC,OAAOgF,OAAOrD,KAAKuG,SAAnBjD,EAAA3C,EAAAsC,OAAAK,IAAVqD,EAAMhG,EAAA2C,KAANqD,GAeM,SAAM3G,KAAKa,QAAQ+B,MAAMjB,WAC1C,IADMmG,EAAW1E,EAAAxC,OACjB+C,EAAA,EAAqBD,EAAAoE,EAASzE,OAATM,EAAAD,EAAAT,OAAAU,IAAV9B,EAAM6B,EAAAC,GACPoE,EAAelG,EAAO3D,KAAKwG,MAAM,KACjCsD,EAAcD,EAAa,GAC3BE,EAAeF,EAAa,GAE5BpB,EAAS3G,KAAKuG,QAAQyB,GACP,WAAjBC,EACAtB,EAAOQ,OAAStF,EAAOS,UAAU,GAAG1D,MAEd,WAAjBqJ,IACLtB,EAAOU,OAASxF,EAAOS,UAAU,GAAG1D,uBAIpDyH,EA/DA,+yCCDA6B,EAAA,WAYA,OANI,SAAoBpI,EAAqBC,QAAA,IAAAA,MAAA,MAArBC,KAAAF,MAAqBE,KAAAD,YACrCC,KAAKa,QAAU,IAAIsH,EAAQrI,EAAKC,GAChCC,KAAKoI,UAAY,IAAIA,EAAUpI,KAAKa,SACpCb,KAAKoE,eAAiB,IAAIiE,EAAerI,KAAKa,QAASb,KAAKoI,WAC5DpI,KAAKsI,eAAiB,IAAIC,EAAevI,KAAKa,QAASb,KAAKoE,iBAVpE,GAcAiE,EAAA,WAGI,SAAAG,EAAoB3H,EAA0BuH,GAA1BpI,KAAAa,UAA0Bb,KAAAoI,YAFtCpI,KAAAyI,iBAA2C,GAmCvD,OA9BUD,EAAAjJ,UAAA+E,KAAN,2GAEI,OAAsB,IADhB3C,EAAUtD,OAAOqK,KAAK1I,KAAKyI,mBACrBxF,OACR,IAGS,GAAMjD,KAAKa,QAAQ+B,MAAMjB,GAAS,kBAAzCb,EAAOH,EAAAC,OACbZ,KAAKoI,UAAUpD,OAAOlE,aAG1B0H,EAAAjJ,UAAAoJ,cAAA,SAAchH,GACV,IAAqB,IAAA2B,EAAA,EAAAyC,EAAApE,EAAA2B,EAAAyC,EAAA9C,OAAAK,IAAS,CAAzB,IAAMzB,EAAMkE,EAAAzC,GACbtD,KAAKyI,iBAAiB5G,IAAU,IAAIsE,MAAOC,YAInDoC,EAAAjJ,UAAAsI,yBAAA,SAAyBlG,GACrB,IAAqB,IAAA2B,EAAA,EAAAsF,EAAAjH,EAAA2B,EAAAsF,EAAA3F,OAAAK,IAAS,CAAzB,IAAMzB,EAAM+G,EAAAtF,UACNtD,KAAKyI,iBAAiB5G,KAIrC2G,EAAAjJ,UAAA8E,QAAA,WAEI,IAAMwE,GAAa,IAAI1C,MAAOC,UAhDd,IAiDhBpG,KAAKyI,iBAAmB1H,EAAAC,EAAE8H,OAAO9I,KAAKyI,iBAAkB,SAACM,GAA0B,OAAAA,EAAAF,IAGnF7I,KAAKoI,UAAUnC,uBAEvBuC,EApCA,GAsCAQ,EAAA,oBAAAA,IACYhJ,KAAAiJ,UAAsC,GAgBlD,OAdID,EAAAzJ,UAAA2J,eAAA,SAAepJ,EAAaC,QAAA,IAAAA,MAAA,MACxB,IAAMoJ,EAAQrJ,EAAG,KAAKC,EAClBoE,EAAWnE,KAAKiJ,UAAUE,GAK9B,OAJKhF,IACDA,EAAW,IAAI+D,EAASpI,EAAKC,GAC7BC,KAAKiJ,UAAUE,GAAMhF,GAElBA,GAGX6E,EAAAzJ,UAAA2E,KAAA,WACI,OAAO7F,OAAOgF,OAAOrD,KAAKiJ,YAGlCD,EAjBA,gzCNnDA,SAAYpJ,GACRA,EAAA,yBACAA,EAAA,cACAA,EAAA,kBAHJ,CAAYA,MAAY,KAMxB,MAAAwJ,EAAA,WAgBQ,SAAKC,EAAwBC,EAA7BC,EAAAC,EAAAC,EAAAC,GACA1J,KAAK9B,KAAMoL,EAAiBpL,KAC5B8B,KAAKF,IAALwJ,EAAAxJ,IACAE,KAAK2J,EAAAJ,EACLvJ,KAAKwJ,WAALA,EACAxJ,KAAKyJ,YAAcA,EACnBzJ,KAAK0J,cACL1J,KAAK4J,gBAAUN,EAAAM,gBAAE5J,KAAA6J,QAAA,CAAjBC,eAAA,oBAEoC,iBAA3BR,EAAQS,WAAoCT,EAAjDS,UAAA9G,OAAA,IACHjD,KAAA6J,QAAA,cAAAP,EAAAS,WAGD5B,EAAK1H,kBAAuBT,KAAAgK,UAA5B7K,KAAAa,MACAA,KAAK8D,iBAAS,IAAWkF,EAC5BhJ,KAAAsG,OAAA,IAAAA,EAAAtG,KAAA8D,iBAAA,KA/BL,OAeIuF,EAAAY,QAAY,oBAAsB,kBAAY,cAAa,gJAmBjD,OAEF,YAAAnE,QAAA7C,OAAA,SAAS,CAATnC,KAAA,KAIAd,KAAMyJ,YAANS,gBADJtE,EAEOuE,aAAAnK,KAAAyJ,YAAAS,gBAAAlK,KAAA9B,MAEN0H,EAAAuE,aAAA,GAIsBnK,KAAjBoK,wFAEF,0BAGM,YAEF,GADAjG,EAAyBqD,EAAS1D,iBAAeoF,eAAiB1B,EAAzC1H,OACxBqE,EAADmE,eAAA7B,WAAAhC,EAAAkC,QAAA,6BAKa,+EAFT,6CAKA0D,EAAK1J,EAAAC,gCAIb,aACyB,YAAjB+F,EAAOQ,QAAuB,aAAJR,EAAAQ,QAAQxF,EAAAgF,EAAAgB,KAAA5E,IAAA,SAAoB6E,GAAtD,0BAAAjB,EAAAzI,KAAA,SAAA0J,IAEJzD,EAAAC,eAAauE,cAAShH,GAH1Bb,EAKKoB,KAAAoI,MAAAxJ,EAAAqD,EAAAiE,UAAAxC,MAAAjE,EAAA8C,EAAAoB,WAEDvF,QAAKiK,MAAA,eAAY5D,GAAEa,EAAAgD,YAAS,CAA5BpD,QAAA,sBAAAT,EAAAU,QACH5C,cA1BgBzE,sCAAa,OAAAsD,EAAA3C,EAAAsC,yBAAA,GAAvB,6BAAU,wBA6BrB,gBAAS,CAATnC,eAIAuI,EAAoB9J,UAApBiL,YAAA,SAAAD,EAAA9F,GADJ,MAEI8F,EAAME,MAANhG,EAAAgG,MAFJF,gIAMQ,+CAEA,0DACA,mBAAS,CAAmBpD,OAAO,UAA4BC,QAAO,yBAAtEsD,MAAA,mBAGA,OAAA/J,EAAAC,OAAA,GACI,CACAuG,OAAO,QACPC,QAAO,qBAAAvG,EAAAf,IAHX4K,MAAA,gHASJ,OAAAC,EAAA3K,KAAA,SAAAW,GAAA,qIAIA,OAGO,OAFPiK,EAAQhB,gBAAe5J,KAAvB4J,gBAEOgB,EAAAf,QAAA7J,KAAA6J,QAAA,yCAAP,gCAIAR,EAAA9J,UAAA6K,aAAA,oBAEI,IAAApK,KAAA0J,YAAAmB,UAEH,SAEI,QAAIvH,EAAQ,EAAA3C,EAAAX,KAAZ0J,YAAAmB,UAAAvH,EAAA3C,EAAAsC,OAAAK,IAAA,CACD,IAAIwH,EAAAnK,EAAa2C,sBAEA,WAAbyH,GAAgChK,EAAAC,EAAAgK,QAAAD,EAAA,eACmCA,EAAvC,OAAxBD,EAAAG,SAA+DH,EAAAF,QAAAM,MAAA,GAAAnI,IAAA,SAAAoI,GAA/D,OAAAA,EAAAvM,QAGHkM,EAAAG,UAIDJ,EAAMC,EAAS5M,MAAQ,CACvBkN,KAAKN,EAAEO,QAAAD,KAFXxM,MAAAmM,GAjBR,OAAAF,GA/GJxB,EAAA,8TOhBAiC,EAAoD,SAAAC,mBAGlD,IAAA9J,EAAA8J,EAAAzN,KAAAkC,KAAAwL,EAAAC,IAAAzL,YAOEyB,EAAKiK,QAAO,GAEZjK,EAAKgD,OAALkC,OACElF,EAAAgD,OAAAkC,QAAA,GAAElF,EAAIgD,OAAEoB,OAARpE,EAAAgD,OAAAoB,QAAApE,EAAAkK,mBAAuBlK,EAAAiK,QAAO,EADjBN,KAEb,cAAExM,MAAMgB,EAARgM,YAAiB,CAFJR,KAGb,QAAExM,MAAMgB,EAARiM,OAAmB,CAHrBT,KAAA,qCAPFU,EAAAC,EAAAR,GACAQ,EACE9B,QAAc,UAAd,aAcE8B,EAAAxM,UAAAoM,iBAAA,WACD,MAA+B,UAFhC3L,KAEOgM,UAASC,MAALC,KACFtM,EAAaiM,MACrB,YAAA7L,KAAAgM,UAAAC,MAAAC,6BAMFH,EAFDxM,UAAA4M,kBAAA,qCA5BkDJ,EAApDK,YAAA,oDAAoD,cCHpD7O,EAAAU,EAAAoO,EAAA,+BAAAC,IAAA/O,EAAAU,EAAAoO,EAAA,qCAAAE,IAAAhP,EAAAU,EAAAoO,EAAA,yCAAAG,IAAAjP,EAAAU,EAAAoO,EAAA,+BAAAjD,IACA7L,EAAAU,EAAAoO,EAAA,8BAAAf,IAEA,IAAAgB,aACS,SAAAA,YADTA,EAAAF,YAAA,iDAIAG,aACS,SAAAA,YADTA,EAAAH,YAAA,wDAIAI,aACS,SAAAA,YADTA,EAAAJ,YAAA,gECXA,SAAA1O,EAAAD","file":"./datasources/bpftrace/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 127);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","///<reference path=\"../../../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\nimport _ from 'lodash';\nimport Context from './context';\nimport Poller from './poller';\nimport { EndpointRegistry } from './endpoint';\nimport { BPFtraceScript } from './script_registry';\n\nexport type Datapoint = [number, number, number?];\nexport interface Target {\n    target: string;\n    datapoints: Datapoint[]\n}\n\nexport enum TargetFormat {\n    TimeSeries = \"time_series\",\n    Table = \"table\",\n    Heatmap = \"heatmap\",\n}\n\nexport class PCPBPFtraceDatasource {\n\n    name: string;\n    url: string;\n    q: any;\n    backendSrv: any;\n    templateSrv: any;\n    variableSrv: any;\n    withCredentials: boolean;\n    headers: any;\n\n    endpointRegistry: EndpointRegistry;\n    poller: Poller;\n\n    /** @ngInject **/\n    constructor(instanceSettings, $q, backendSrv, templateSrv, variableSrv) {\n        this.name = instanceSettings.name;\n        this.url = instanceSettings.url;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.variableSrv = variableSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n        Context.datasourceRequest = this.doRequest.bind(this);\n        this.endpointRegistry = new EndpointRegistry();\n        this.poller = new Poller(this.endpointRegistry, 1000);\n    }\n\n    async query(options: any) {\n        const query = options;\n        if (query.targets.length == 0) {\n            return { data: [] };\n        }\n\n        if (this.templateSrv.getAdhocFilters) {\n            query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n        } else {\n            query.adhocFilters = [];\n        }\n\n        const vars = this.getVariables();\n        // TODO: url of target => url variable of dashboard => url setting of datasource\n        const data: Target[] = [];\n        for (const target of query.targets) {\n            if (target.hide)\n                continue;\n\n            const endpoint = this.endpointRegistry.find_or_create(this.url);\n            let script: BPFtraceScript = endpoint.scriptRegistry.findByCode(target.script);\n            if (!script) {\n                // script not found, let's register it\n                try {\n                    // we need to wait for the promise to resolve,\n                    // because we need to throw the error in this function (and not async)\n                    script = await endpoint.scriptRegistry.register(endpoint.context, target.script);\n                }\n                catch (error) {\n                    this.handleError(error, target);\n                }\n            }\n\n            if (script.status === \"started\" || script.status === \"starting\") {\n                let metrics = script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n                endpoint.endpointPoller.ensurePolling(metrics);\n                data.push(...endpoint.datastore.query(metrics, target.format));\n            }\n            else {\n                console.error(\"query failed\", script);\n                this.handleError({ message: `BPFtrace error:\\n\\n${script.output}` }, target);\n            }\n        }\n\n        return { data: data };\n    }\n\n    handleError(error: any, target: any) {\n        error.refId = target.refId;\n        throw error;\n    }\n\n    async testDatasource() {\n        let context = new Context(this.url, null);\n        try {\n            await context.createContext();\n            return { status: 'success', message: \"Data source is working\", title: \"Success\" };\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                message: `Cannot connect to ${context.url}`,\n                title: 'Error',\n            };\n        }\n    }\n\n    async metricFindQuery(query) {\n        return [];\n    }\n\n    async doRequest(options: any) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return await this.backendSrv.datasourceRequest(options);\n    }\n\n    getVariables(): any {\n        const variables = {};\n        if (!this.variableSrv.variables) {\n            // variables are not defined on the datasource settings page\n            return {};\n        }\n\n        for (let variable of this.variableSrv.variables) {\n            let variableValue = variable.current.value;\n            if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n                if (variable.allValue === null) {\n                    variableValue = variable.options.slice(1).map(textValuePair => textValuePair.value);\n                } else {\n                    variableValue = variable.allValue;\n                }\n            }\n\n            variables[variable.name] = {\n                text: variable.current.text,\n                value: variableValue,\n            };\n        }\n\n        return variables;\n    }\n}\n","import _ from 'lodash';\n\ninterface MetricMetadata {\n    name: string,\n    pmid: number,\n    sem: string\n}\n\nexport default class Context {\n\n    static datasourceRequest: (options: any) => any;\n    private context: string;\n    private contextPromise: Promise<void> | null = null;\n    private metricMetadataCache: MetricMetadata[] = [];\n    private missingMetrics: string[] = [];\n    private indomCache: Record<string, Record<number, string>> = {}; // indomCache[metric][instance_id] = instance_name\n\n    constructor(readonly url: string, readonly container: string | null = null) {\n    }\n\n    private async _createContext() {\n        console.debug('** making request for context')\n        let contextUrl = `${this.url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`\n        if (this.container)\n            contextUrl += `&container=${this.container}`\n\n        const contextResponse = await Context.datasourceRequest({ url: contextUrl })\n        //console.log('** contextResponse:', contextResponse)\n        this.context = contextResponse.data.context\n\n        if (this.container) {\n            //console.log('selecting container..')\n            const containerResponse = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_store?name=pmcd.client.container&value=${this.container}`\n            })\n            //console.log('selected', containerResponse)\n        }\n\n        if (_.isEmpty(this.metricMetadataCache)) {\n            await this.fetchMetricMetadata();\n        }\n    }\n\n    // this method ensures that only one context request will be sent at a time\n    // if there are 2 simultaneous calls to createContext(), the second call\n    // will wait until the promise of the first call is resolved\n    async createContext() {\n        if (!this.contextPromise)\n            this.contextPromise = this._createContext();\n        await this.contextPromise;\n        this.contextPromise = null;\n    }\n\n    async ensureContext(fn: () => any) {\n        if (!this.context) {\n            await this.createContext();\n        }\n\n        try {\n            return await fn();\n        } catch (err) {\n            console.log(\"error\", err, \"creating new context...\");\n            await this.createContext();\n            return await fn();\n        }\n    }\n\n    async fetchMetricMetadata() {\n        //console.log('** making request for metrics')\n        await this.ensureContext(async () => {\n            const metricsResponse = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_metric`\n            });\n            this.metricMetadataCache = metricsResponse.data.metrics;\n        });\n    }\n\n    findPmidForMetric(metric: string) {\n        const pmidentry = this.metricMetadataCache.find(p => p.name === metric)\n        if (pmidentry) {\n            return pmidentry.pmid\n        } else { // no pmid found\n            if (!this.missingMetrics.includes(metric)) {\n                this.missingMetrics.push(metric)\n                console.log(`Cannot find pmid for ${metric}. Is this PMDA enabled?`)\n            }\n            return null\n        }\n    }\n\n    findMetricMetadata(metric: string) {\n        return this.metricMetadataCache.find(p => p.name === metric);\n    }\n\n    async refreshIndoms(metric: string) {\n        const indoms = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_indom`,\n                params: { name: metric }\n            });\n            return response.data.instances;\n        });\n\n        // convert [{instance: X, name: Y}] to {instance: name}\n        this.indomCache[metric] = indoms.reduce((cache: any, indom: any) => {\n            cache[indom.instance] = indom.name;\n            return cache;\n        }, {});\n        return this.indomCache[metric];\n    }\n\n    async fetch(metrics: string[], instanceNames: boolean = false) {\n        // extract pmid for metric name\n        const queryPmids = metrics\n            .map((metric: string) => this.findPmidForMetric(metric))\n            .filter((metric: number | null) => metric) // filter out nulls from findPmidForMetric\n\n        if (!queryPmids.length)\n            return {}\n\n        // by now we have a context, the pmids to fetch, so lets do it\n\n        const data = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_fetch`,\n                params: { pmids: queryPmids.join(',') }\n            });\n            return response.data;\n        });\n\n        if (instanceNames) {\n            // add instance names to instances\n            for (const metric of data.values) {\n                if (metric.instances.length == 0) {\n                    continue;\n                } else if (metric.instances[0].instance === -1) { // this metric has no instances (single value)\n                    metric.instances[0].instanceName = null;\n                    continue;\n                }\n\n                let indomsForMetric = this.indomCache[metric.name];\n                if (!indomsForMetric)\n                    indomsForMetric = await this.refreshIndoms(metric.name);\n\n                let refreshed = false;\n                for (const instance of metric.instances) {\n                    instance.instanceName = indomsForMetric[instance.instance];\n                    if (!instance.instanceName && !refreshed) {\n                        // refresh instances at max once per metric\n                        indomsForMetric = await this.refreshIndoms(metric.name);\n                        instance.instanceName = indomsForMetric[instance.instance];\n                        refreshed = true;\n                    }\n                }\n            }\n        }\n\n        return data;\n    }\n\n    async store(metric: string, value: string) {\n        return await this.ensureContext(() => {\n            return Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_store`,\n                params: { name: metric, value: value }\n            })\n        });\n    }\n}\n","import { EndpointRegistry } from './endpoint';\n\nexport default class Poller {\n\n    constructor(private endpointRegistry: EndpointRegistry, poll_interval_ms: number) {\n        setInterval(this.doPollAll.bind(this), poll_interval_ms)\n    }\n\n    doPollAll() {\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.endpointPoller.cleanup();\n            endpoint.endpointPoller.poll(); // poll() is async, but we don't wait for a result\n        }\n    }\n}","import { Target, Datapoint } from \"./datasource\";\n\nexport default class Transformations {\n    static toHeatmap(target: Target) {\n        // target name is the upper bound\n        target.target = target.target.split('-')[1];\n\n        // round timestamps to one second - the heatmap panel calculates the x-axis size accordingly\n        target.datapoints = target.datapoints.map(\n           (dataPoint: Datapoint) => [dataPoint[0], Math.round(dataPoint[1] / 1000) * 1000, dataPoint[2]]\n        );\n        return target;\n    }\n}\n","import _ from 'lodash';\nimport { Target, TargetFormat, Datapoint } from './datasource';\nimport Context from './context';\nimport Transformations from './transformations';\n\n// age out time\nconst OLDEST_DATA_MS = 5 * 60 * 1000\n\nexport default class DataStore {\n    private store: Record<string, Record<string, Datapoint[]>> = {}; // store[metric][instance] = [val,ts,origVal]\n\n    constructor(private context: Context) {\n    }\n\n    ingest(data: any) {\n        if (_.isEmpty(data))\n            return;\n\n        const pollTimeEpochMs = data.timestamp.s * 1000 + data.timestamp.us / 1000;\n        for (const metric of data.values) {\n            let metricStore = this.store[metric.name];\n            if (!metricStore) {\n                metricStore = this.store[metric.name] = {};\n            }\n\n            const metadata = this.context.findMetricMetadata(metric.name);\n            for (const instance of metric.instances) {\n                const isExistingMetric = instance.instanceName in metricStore;\n                if (!isExistingMetric)\n                    metricStore[instance.instanceName] = [];\n\n                if (metadata.sem === \"counter\" ) {\n                    const instanceStore = metricStore[instance.instanceName];\n                    if (isExistingMetric) {   \n                        let [, prevTimeMs, prevOrigVal] = instanceStore[instanceStore.length - 1];\n                        const deltaSec = (pollTimeEpochMs - prevTimeMs) / 1000;\n                        instanceStore.push([(instance.value - prevOrigVal!) / deltaSec, pollTimeEpochMs, instance.value]);\n                    }\n                    else {\n                        instanceStore.push([instance.value, pollTimeEpochMs, instance.value]);\n                    }\n                }\n                else {\n                    metricStore[instance.instanceName].push([instance.value, pollTimeEpochMs]);\n                }\n            }\n        }\n    }\n\n    query(metrics: string[], format: TargetFormat) {\n        let targets: Target[] = [];\n        for (const metric of metrics) {\n            if (!(metric in this.store))\n                continue;\n\n            for (const instance in this.store[metric]) {\n                let target = {\n                    // for metrics without instance domains, show metric name\n                    target: instance === \"null\" ? metric : instance,\n                    datapoints: this.store[metric][instance].filter((dataPoint: Datapoint) => dataPoint[1] > 0)\n                };\n\n                if (format === \"heatmap\")\n                    target = Transformations.toHeatmap(target);\n\n                targets.push(target);\n            }\n        }\n        return targets;\n    }\n\n    cleanExpiredMetrics() {\n        const keepExpiry = new Date().getTime() - OLDEST_DATA_MS\n        for (const metric in this.store) {\n            for (const instance in this.store[metric]) {\n                this.store[metric][instance] = this.store[metric][instance].filter(\n                    (dataPoint: Datapoint) => dataPoint[1] > keepExpiry\n                );\n            }\n        }\n    }\n}\n","import _ from 'lodash';\nimport Context from \"./context\";\nimport { objectProperty } from '@babel/types';\nimport { EndpointPoller } from './endpoint';\n\nexport interface BPFtraceScript {\n    name: string;\n    code: string;\n    vars: string[];\n    status: string;\n    output: string;\n}\n\nexport default class ScriptRegistry {\n\n    readonly scripts: Record<string, BPFtraceScript> = {}; // {name: BPFtraceScript}\n\n    constructor(private context: Context, private poller: EndpointPoller) {\n        setInterval(this.syncState.bind(this), 10000);\n    }\n\n    findByCode(code: string) {\n        return _.find(Object.values(this.scripts), (script: BPFtraceScript) => script.code === code);\n    }\n\n    async register(context: Context, code: string) {\n        console.debug(\"registering script\", code);\n        let uuid = Math.floor(Math.random() * 1000);\n        await context.store(\"bpftrace.control.register\", `${uuid}#${code}`);\n\n        const responses = await context.fetch([\"bpftrace.control.register\"]);\n        const script: BPFtraceScript = JSON.parse(responses.values[0].instances[0].value)[uuid];\n        script.code = code;\n        this.scripts[script.name] = script;\n\n        console.debug(\"bpftrace.control.register response\", script);\n        if (script.status === \"stopped\") {\n            throw { message: `BPFtrace error:\\n\\n${script.output}` };\n        }\n        return script;\n    }\n\n    async syncState() {\n        await this.context.fetchMetricMetadata();\n\n        let metrics: string[] = [];\n        for (const script of Object.values(this.scripts)) {\n            const status_metric = `bpftrace.scripts.${script.name}.status`;\n            const output_metric = `bpftrace.scripts.${script.name}.output`;\n\n            if (this.context.findMetricMetadata(status_metric) && this.context.findMetricMetadata(output_metric)) {\n                metrics.push(status_metric, output_metric);\n            }\n            else {\n                console.info(`script ${script.name} is missing on the PMDA`);\n                const script_metrics = script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n                delete this.scripts[script.name];\n                this.poller.removeMetricsFromPolling(script_metrics);\n            }\n        }\n\n        const response = await this.context.fetch(metrics);\n        for (const metric of response.values) {\n            const metric_split = metric.name.split('.');\n            const script_name = metric_split[2];\n            const metric_field = metric_split[3];\n\n            const script = this.scripts[script_name];\n            if (metric_field === \"status\") {\n                script.status = metric.instances[0].value;\n            }\n            else if (metric_field === \"output\") {\n                script.output = metric.instances[0].value;\n            }\n        }\n    }\n}\n","import _ from 'lodash';\nimport Context from \"./context\";\nimport DataStore from \"./datastore\";\nimport ScriptRegistry from \"./script_registry\";\n\n// poll metric sources every X ms\nconst POLL_INTERVAL_MS = 1000 * 10\n// we will keep polling a metric for up to X ms after it was last requested\nconst KEEP_POLLING_MS = 20000\n// age out time\nconst OLDEST_DATA_MS = 5 * 60 * 1000\n\nexport class Endpoint {\n    context: Context;\n    scriptRegistry: ScriptRegistry;\n    endpointPoller: EndpointPoller;\n    datastore: DataStore;\n\n    constructor(private url: string, private container: string | null = null) {\n        this.context = new Context(url, container);\n        this.datastore = new DataStore(this.context);\n        this.endpointPoller = new EndpointPoller(this.context, this.datastore);\n        this.scriptRegistry = new ScriptRegistry(this.context, this.endpointPoller);\n    }\n}\n\nexport class EndpointPoller {\n    private requestedMetrics: Record<string, number> = {}; // {metric: lastRequested}\n\n    constructor(private context: Context, private datastore: DataStore) {\n    }\n\n    async poll() {\n        const metrics = Object.keys(this.requestedMetrics);\n        if (metrics.length == 0) {\n            return;\n        }\n\n        const data = await this.context.fetch(metrics, true);\n        this.datastore.ingest(data);\n    }\n\n    ensurePolling(metrics: string[]) {\n        for (const metric of metrics) {\n            this.requestedMetrics[metric] = new Date().getTime()\n        }\n    }\n\n    removeMetricsFromPolling(metrics: string[]) {\n        for (const metric of metrics) {\n            delete this.requestedMetrics[metric];\n        }\n    }\n\n    cleanup() {\n        // clean up any not required metrics\n        const pollExpiry = new Date().getTime() - KEEP_POLLING_MS;\n        this.requestedMetrics = _.pickBy(this.requestedMetrics, (lastRequested: number) => lastRequested > pollExpiry);\n\n        // clean expired metrics\n        this.datastore.cleanExpiredMetrics();\n    }\n}\n\nexport class EndpointRegistry {\n    private endpoints: Record<string, Endpoint> = {};\n\n    find_or_create(url: string, container: string | null = null) {\n        const id = `${url}::${container}`;\n        let endpoint = this.endpoints[id];\n        if (!endpoint) {\n            endpoint = new Endpoint(url, container);\n            this.endpoints[id] = endpoint;\n        }\n        return endpoint;\n    }\n\n    list() {\n        return Object.values(this.endpoints);\n    }\n\n}","import { QueryCtrl } from 'grafana/app/plugins/sdk';\nimport { TargetFormat } from './datasource';\n\nexport class PCPBPFtraceDatasourceQueryCtrl extends QueryCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/query.editor.html';\n\n  formats: any = [];\n\n  /** @ngInject **/\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.script = this.target.script || \"\";\n    this.target.format = this.target.format || this.getDefaultFormat();\n\n    this.formats = [\n      { text: \"Time series\", value: TargetFormat.TimeSeries },\n      { text: \"Table\", value: TargetFormat.Table },\n      { text: \"Heatmap\", value: TargetFormat.Heatmap },\n    ];\n  }\n\n  getDefaultFormat() {\n    if (this.panelCtrl.panel.type === 'table') {\n      return TargetFormat.Table;\n    } else if (this.panelCtrl.panel.type === 'heatmap') {\n      return TargetFormat.Heatmap;\n    }\n    return TargetFormat.TimeSeries;\n  }\n\n  refreshMetricData() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n","import { PCPBPFtraceDatasource } from './datasource';\nimport { PCPBPFtraceDatasourceQueryCtrl } from './query_ctrl';\n\nclass PCPBPFtraceConfigCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/config.html';\n}\n\nclass PCPBPFtraceQueryOptionsCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/query.options.html';\n}\n\nclass PCPBPFtraceAnnotationsQueryCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/annotations.editor.html';\n}\n\nexport {\n  PCPBPFtraceDatasource as Datasource,\n  PCPBPFtraceDatasourceQueryCtrl as QueryCtrl,\n  PCPBPFtraceConfigCtrl as ConfigCtrl,\n  PCPBPFtraceQueryOptionsCtrl as QueryOptionsCtrl,\n  PCPBPFtraceAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;"],"sourceRoot":""}