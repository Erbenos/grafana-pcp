{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./datasources/bpftrace/context.ts","webpack:///./datasources/bpftrace/poller.ts","webpack:///./datasources/bpftrace/datastore.ts","webpack:///./datasources/bpftrace/script_registry.ts","webpack:///./datasources/bpftrace/endpoint.ts","webpack:///./datasources/bpftrace/datasource.ts","webpack:///./datasources/bpftrace/query_ctrl.ts","webpack:///./datasources/bpftrace/module.ts","webpack:///external \"app/plugins/sdk\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","Context","url","container","this","contextPromise","metricMetadataCache","missingMetrics","indomCache","_createContext","console","log","contextUrl","datasourceRequest","contextResponse","_a","sent","context","data","external_lodash_default","a","isEmpty","fetchMetricMetadata","createContext","ensureContext","fn","err_1","__awaiter","_this","metricsResponse","metrics","findPmidForMetric","metric","pmidentry","find","pmid","includes","push","refreshIndoms","params","instances","indoms","reduce","cache","indom","instance","fetch","instanceNames","queryPmids","map","filter","length","pmids","join","_d","values","_i","instanceName","indomsForMetric","refreshed","_c","_b","store","Poller","endpointRegistry","poll_interval_ms","setInterval","doPollAll","list","endpoint","cleanup","poll","DataStore","ingest","pollTimeEpochMs","timestamp","us","metricStore","query","targets","metrics_1","target","datapoints","cleanExpiredMetrics","ScriptRegistry","scripts","code","register","uuid","Math","floor","random","responses","script","JSON","parse","debug","status","message","output","setTimeout","checkScriptHealth","response","info","endpoint_Endpoint","Endpoint","requestedMetrics","bpftrace_context","scriptRegistry","script_registry","datastore","keys","ensurePolling","Date","getTime","pollExpiry","pickBy","lastRequested","EndpointRegistry","endpoints","find_or_create","id","datasource_PCPBPFtraceDatasource","PCPBPFtraceDatasource","instanceSettings","$q","backendSrv","templateSrv","variableSrv","q","withCredentials","headers","Content-Type","basicAuth","doRequest","poller","$inject","getAdhocFilters","adhocFilters","getVariables","this_1","vars","var_","handleError","error_1","error","refId","title","datasource_generator","options","variables","variable","variableValue","isEqual","allValue","slice","textValuePair","text","current","PCPBPFtraceDatasourceQueryCtrl","_super","$scope","$injector","__extends","refreshMetricData","templateUrl","__webpack_exports__","PCPBPFtraceConfigCtrl","PCPBPFtraceQueryOptionsCtrl","PCPBPFtraceAnnotationsQueryCtrl"],"mappings":"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","file":"./datasources/bpftrace/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 127);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import _ from 'lodash';\n\ninterface MetricMetadata {\n    name: string,\n    pmid: number\n}\n\nexport default class Context {\n\n    static datasourceRequest: (options: any) => any;\n    private context: string;\n    private contextPromise: Promise<void> | null = null;\n    private metricMetadataCache: MetricMetadata[] = [];\n    private missingMetrics: string[] = [];\n    private indomCache: Record<string, Record<number, string>> = {}; // indomCache[metric][instance_id] = instance_name\n\n    constructor(readonly url: string, readonly container: string | null = null) {\n    }\n\n    private async _createContext() {\n        console.log('** making request for context')\n        let contextUrl = `${this.url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`\n        if (this.container)\n            contextUrl += `&container=${this.container}`\n\n        const contextResponse = await Context.datasourceRequest({ url: contextUrl })\n        //console.log('** contextResponse:', contextResponse)\n        this.context = contextResponse.data.context\n\n        if (this.container) {\n            //console.log('selecting container..')\n            const containerResponse = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_store?name=pmcd.client.container&value=${this.container}`\n            })\n            //console.log('selected', containerResponse)\n        }\n\n        if (_.isEmpty(this.metricMetadataCache)) {\n            await this.fetchMetricMetadata();\n        }\n    }\n\n    // this method ensures that only one context request will be sent at a time\n    // if there are 2 simultaneous calls to createContext(), the second call\n    // will wait until the promise of the first call is resolved\n    async createContext() {\n        if (!this.contextPromise)\n            this.contextPromise = this._createContext();\n        await this.contextPromise;\n        this.contextPromise = null;\n    }\n\n    async ensureContext(fn: () => any) {\n        if (!this.context) {\n            await this.createContext();\n        }\n\n        try {\n            return await fn();\n        } catch (err) {\n            console.log(\"error\", err, \"creating new context...\");\n            await this.createContext();\n            return await fn();\n        }\n    }\n\n    async fetchMetricMetadata() {\n        //console.log('** making request for metrics')\n        await this.ensureContext(async () => {\n            const metricsResponse = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_metric`\n            });\n            this.metricMetadataCache = metricsResponse.data.metrics;\n        });\n    }\n\n    findPmidForMetric(metric: string) {\n        const pmidentry = this.metricMetadataCache.find(p => p.name === metric)\n        if (pmidentry) {\n            return pmidentry.pmid\n        } else { // no pmid found\n            if (!this.missingMetrics.includes(metric)) {\n                this.missingMetrics.push(metric)\n                console.log(`Cannot find pmid for ${metric}. Is this PMDA enabled?`)\n            }\n            return null\n        }\n    }\n\n    async refreshIndoms(metric: string) {\n        const indoms = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_indom`,\n                params: { name: metric }\n            });\n            return response.data.instances;\n        });\n\n        // convert [{instance: X, name: Y}] to {instance: name}\n        this.indomCache[metric] = indoms.reduce((cache: any, indom: any) => {\n            cache[indom.instance] = indom.name;\n            return cache;\n        }, {});\n        return this.indomCache[metric];\n    }\n\n    async fetch(metrics: string[], instanceNames: boolean = false) {\n        // extract pmid for metric name\n        const queryPmids = metrics\n            .map((metric: string) => this.findPmidForMetric(metric))\n            .filter((metric: number | null) => metric) // filter out nulls from findPmidForMetric\n\n        if (!queryPmids.length)\n            return []\n\n        // by now we have a context, the pmids to fetch, so lets do it\n\n        const data = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_fetch`,\n                params: { pmids: queryPmids.join(',') }\n            });\n            return response.data;\n        });\n\n        if (instanceNames) {\n            // add instance names to instances\n            for (const metric of data.values) {\n                if (metric.instances.length == 0) {\n                    continue;\n                } else if (metric.instances[0].instance === -1) { // this metric has no instances (single value)\n                    metric.instances[0].instanceName = null;\n                    continue;\n                }\n\n                let indomsForMetric = this.indomCache[metric.name];\n                if (!indomsForMetric)\n                    indomsForMetric = await this.refreshIndoms(metric.name);\n\n                let refreshed = false;\n                for (const instance of metric.instances) {\n                    instance.instanceName = indomsForMetric[instance.instance];\n                    if (!instance.instanceName && !refreshed) {\n                        // refresh instances at max once per metric\n                        indomsForMetric = await this.refreshIndoms(metric.name);\n                        instance.instanceName = indomsForMetric[instance.instance];\n                        refreshed = true;\n                    }\n                }\n            }\n        }\n\n        return data;\n    }\n\n    async store(metric: string, value: string) {\n        return await this.ensureContext(() => {\n            return Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_store`,\n                params: { name: metric, value: value }\n            })\n        });\n    }\n}\n","import { EndpointRegistry } from './endpoint';\n\nexport default class Poller {\n\n    constructor(private endpointRegistry: EndpointRegistry, poll_interval_ms: number) {\n        setInterval(this.doPollAll.bind(this), poll_interval_ms)\n    }\n\n    doPollAll() {\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.cleanup();\n            endpoint.poll();\n        }\n    }\n}","import { Datapoint, Target } from './datasource';\n\nexport default class DataStore {\n    private store: Record<string, Record<string, Datapoint[]>> = {}; // store[metric][instance] = [val,ts]\n\n    constructor() {\n    }\n\n    ingest(data: any) {\n        const pollTimeEpochMs = data.timestamp.s * 1000 + data.timestamp.us / 1000;\n        for(const metric of data.values) {\n            let metricStore = this.store[metric.name];\n            if (!metricStore) {\n                metricStore = this.store[metric.name] = {};\n            }\n\n            for (const instance of metric.instances) {\n                if (!(instance.instanceName in metricStore))\n                    metricStore[instance.instanceName] = [];\n\n                metricStore[instance.instanceName].push([instance.value, pollTimeEpochMs])\n            }\n        }\n    }\n\n    query(metrics: string[]) {\n        let targets : Target[] = [];\n        for(const metric of metrics) {\n            if (!(metric in this.store))\n                continue;\n\n            for(const instance in this.store[metric]) {\n                targets.push({\n                    // for metrics without instance domains, show metric name\n                    target: instance === \"null\" ? metric : instance,\n                    datapoints: this.store[metric][instance]\n                });\n            }\n        }\n        return targets;\n    }\n\n    cleanExpiredMetrics() {\n    }\n}\n","import _ from 'lodash';\nimport Context from \"./context\";\n\ninterface BPFTraceScript {\n    name: string;\n    vars: string[];\n    status: string;\n    output: string;\n}\n\nexport default class ScriptRegistry {\n    readonly scripts: Record<string, BPFTraceScript> = {}; // {bpftrace_code: BPFTraceScript}\n\n    find(code: string) {\n        return this.scripts[code];\n    }\n\n    async register(context: Context, code: string) {\n        let uuid = Math.floor(Math.random() * 1000);\n        await context.store(\"bpftrace.control.register\", `${uuid}#${code}`);\n\n        const responses = await context.fetch([\"bpftrace.control.register\"]);\n        const script: BPFTraceScript = JSON.parse(responses.values[0].instances[0].value)[uuid];\n        this.scripts[code] = script;\n\n        console.debug(\"bpftrace.control.register response\", script);\n        if (script.status === \"stopped\") {\n            throw { message: script.output };\n        }\n        else {\n            // check script health (syntax errors, ...) after 1s\n            setTimeout(this.checkScriptHealth.bind(this, context, code), 1000);\n        }\n    }\n\n    async checkScriptHealth(context: Context, code: string) {\n        const script = this.scripts[code];\n        await context.fetchMetricMetadata();\n        const response = await context.fetch([`bpftrace.scripts.${script.name}.status`, `bpftrace.scripts.${script.name}.output`]);\n\n        for (const metric of response.values) {\n            if (metric.name === `bpftrace.scripts.${script.name}.status`) {\n                script.status = metric.instances[0].value;\n            }\n            else if (metric.name === `bpftrace.scripts.${script.name}.output`) {\n                script.output = metric.instances[0].value;\n            }\n        }\n\n        if (script.status === \"starting\") {\n            console.info(\"script\", code, \"is still starting, rescheduling health check in 1s...\");\n            setTimeout(this.checkScriptHealth.bind(this, context, code), 1000);\n        }\n    }\n}\n","import _ from 'lodash';\nimport Context from \"./context\";\nimport DataStore from \"./datastore\";\nimport ScriptRegistry from \"./script_registry\";\n\n// poll metric sources every X ms\nconst POLL_INTERVAL_MS = 1000 * 10\n// we will keep polling a metric for up to X ms after it was last requested\nconst KEEP_POLLING_MS = 20000\n// age out time\nconst OLDEST_DATA_MS = 5 * 60 * 1000\n\nexport class Endpoint {\n    context: Context;\n    scriptRegistry: ScriptRegistry;\n    datastore: DataStore;\n    private requestedMetrics: Record<string, number> = {}; // {metric: lastRequested}\n\n    constructor(private url: string, private container: string | null = null) {\n        this.context = new Context(url, container);\n        this.scriptRegistry = new ScriptRegistry();\n        this.datastore = new DataStore();\n    }\n\n    async poll() {\n        const metrics = Object.keys(this.requestedMetrics);\n        if (metrics.length == 0) {\n            return;\n        }\n\n        const data = await this.context.fetch(metrics, true);\n        this.datastore.ingest(data);\n    }\n\n    ensurePolling(metrics: string[]) {\n        for (const metric of metrics) {\n            this.requestedMetrics[metric] = new Date().getTime()\n        }\n    }\n\n    cleanup() {\n        // clean up any not required metrics\n        const pollExpiry = new Date().getTime() - KEEP_POLLING_MS;\n        this.requestedMetrics = _.pickBy(this.requestedMetrics, (lastRequested: number) => lastRequested > pollExpiry);\n\n        // clean expired metrics\n        this.datastore.cleanExpiredMetrics();\n    }\n\n}\n\nexport class EndpointRegistry {\n    private endpoints: Record<string, Endpoint> = {};\n\n    find_or_create(url: string, container: string | null = null) {\n        const id = `${url}::${container}`;\n        let endpoint = this.endpoints[id];\n        if (!endpoint) {\n            endpoint = new Endpoint(url, container);\n            this.endpoints[id] = endpoint;\n        }\n        return endpoint;\n    }\n\n    list() {\n        return Object.values(this.endpoints);\n    }\n\n}","///<reference path=\"../../../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\nimport _ from 'lodash';\nimport Context from './context';\nimport Poller from './poller';\nimport { EndpointRegistry } from './endpoint';\n\nexport type Datapoint = [number, number];\nexport interface Target {\n    target: string;\n    datapoints: Datapoint[]\n}\n\nexport class PCPBPFtraceDatasource {\n\n    name: string;\n    url: string;\n    q: any;\n    backendSrv: any;\n    templateSrv: any;\n    variableSrv: any;\n    withCredentials: boolean;\n    headers: any;\n\n    endpointRegistry: EndpointRegistry;\n    poller: Poller;\n\n    /** @ngInject **/\n    constructor(instanceSettings, $q, backendSrv, templateSrv, variableSrv) {\n        this.name = instanceSettings.name;\n        this.url = instanceSettings.url;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.variableSrv = variableSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n        Context.datasourceRequest = this.doRequest.bind(this);\n        this.endpointRegistry = new EndpointRegistry();\n        this.poller = new Poller(this.endpointRegistry, 1000);\n    }\n\n    async query(options: any) {\n        const query = options;\n        if (query.targets.length == 0) {\n            return { data: [] };\n        }\n\n        if (this.templateSrv.getAdhocFilters) {\n            query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n        } else {\n            query.adhocFilters = [];\n        }\n\n        const vars = this.getVariables();\n        // TODO: url of target => url variable of dashboard => url setting of datasource\n        const data: Target[] = [];\n        for (const target of query.targets) {\n            if (target.hide)\n                continue;\n\n            const endpoint = this.endpointRegistry.find_or_create(this.url);\n            let script = endpoint.scriptRegistry.find(target.script);\n\n            if (script && script.status === \"started\") {\n                let metrics = script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n                endpoint.ensurePolling(metrics);\n                data.push(...endpoint.datastore.query(metrics));\n            }\n            else if (script && script.status !== \"started\") {\n                this.handleError({ message: script.output }, target);\n            }\n            else {\n                try {\n                    await endpoint.scriptRegistry.register(endpoint.context, target.script)\n                }\n                catch (error) {\n                    this.handleError(error, target);\n                }\n            }\n        }\n\n        return { data: data };\n    }\n\n    handleError(error: any, target: any) {\n        error.refId = target.refId;\n        throw error;\n    }\n\n    async testDatasource() {\n        let context = new Context(this.url, null);\n        try {\n            await context.createContext();\n            return { status: 'success', message: \"Data source is working\", title: \"Success\" };\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                message: `Cannot connect to ${context.url}`,\n                title: 'Error',\n            };\n        }\n    }\n\n    async metricFindQuery(query) {\n        return [];\n    }\n\n    async doRequest(options: any) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return await this.backendSrv.datasourceRequest(options);\n    }\n\n    getVariables(): any {\n        const variables = {};\n        if (!this.variableSrv.variables) {\n            // variables are not defined on the datasource settings page\n            return {};\n        }\n\n        for (let variable of this.variableSrv.variables) {\n            let variableValue = variable.current.value;\n            if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n                if (variable.allValue === null) {\n                    variableValue = variable.options.slice(1).map(textValuePair => textValuePair.value);\n                } else {\n                    variableValue = variable.allValue;\n                }\n            }\n\n            variables[variable.name] = {\n                text: variable.current.text,\n                value: variableValue,\n            };\n        }\n\n        return variables;\n    }\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\n\nexport class PCPBPFtraceDatasourceQueryCtrl extends QueryCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/query.editor.html';\n\n  /** @ngInject **/\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.script = this.target.script || \"\";\n  }\n\n  refreshMetricData() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n","import { PCPBPFtraceDatasource } from './datasource';\nimport { PCPBPFtraceDatasourceQueryCtrl } from './query_ctrl';\n\nclass PCPBPFtraceConfigCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/config.html';\n}\n\nclass PCPBPFtraceQueryOptionsCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/query.options.html';\n}\n\nclass PCPBPFtraceAnnotationsQueryCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/annotations.editor.html';\n}\n\nexport {\n  PCPBPFtraceDatasource as Datasource,\n  PCPBPFtraceDatasourceQueryCtrl as QueryCtrl,\n  PCPBPFtraceConfigCtrl as ConfigCtrl,\n  PCPBPFtraceQueryOptionsCtrl as QueryOptionsCtrl,\n  PCPBPFtraceAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;"],"sourceRoot":""}