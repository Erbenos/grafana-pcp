{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./datasources/lib/types.ts","webpack:///./datasources/lib/transformations.ts","webpack:///./datasources/lib/datastore.ts","webpack:///./datasources/lib/poller.ts","webpack:///./datasources/lib/endpoint_registry.ts","webpack:///./datasources/bpftrace/script_registry.ts","webpack:///./datasources/bpftrace/datasource.ts","webpack:///./datasources/bpftrace/query_ctrl.ts","webpack:///./datasources/bpftrace/module.ts","webpack:///./datasources/lib/utils.ts","webpack:///./datasources/lib/context.ts","webpack:///external \"app/core/utils/kbn\"","webpack:///external \"app/plugins/sdk\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","TargetFormat","__webpack_exports__","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","_types__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_2__","Transformations","templateSrv","this","getLabel","target","legendFormat","targetSpl","split","vars","instance","metric0","length","replace","updateLabel","targetResult","datapoints","transformToTimeSeries","queryResult","a","flatten","map","row","instances","transformToHeatmap","targetResults","_i","targetResults_1","match","dataPoint","Math","floor","transformStringToTable","tableText","table","columns","rows","type","lines","columnSizes","line","trim","includes","tableHeaders","colStartAt","indexOf","colEndAt","undefined","push","text","colSize","substring","lines_1","transformMultipleMetricsToTable","queryResultRow","queryResult_1","find","instances_1","keys","sort","b","parseInt","transformToTable","targets","transform","format","TimeSeries","Heatmap","Table","message","DataStore","context","localHistoryAgeMs","store","ingestCounterMetric","instanceStore","pollTimeEpochMs","_a","prevTimeMs","prevOrigVal","deltaSec","ingestMetric","metricStore","metric","metricMetadata","metadata","_b","sent","console","info","instanceName","labels","metrictype","sem","ingest","data","external_lodash_default","isEmpty","timestamp","us","values","queryMetric","from","to","results","filter","queryMetrics","metrics","_this","cleanExpiredMetrics","keepExpiry","Date","getTime","Poller","datastore","keepPollingMs","requestedMetrics","poll","fetch","returnedMetrics","missingMetrics","difference","debug","join","missingMetrics_1","missingMetric","ensurePolling","now","metricMetadatas","metadatas","validMetrics","intersection","validMetrics_1","removeMetricsFromPolling","metrics_1","cleanupExpiredMetrics","pollExpiry","pickBy","lastRequested","endpoint_registry_EndpointRegistry","EndpointRegistry","endpoints","generateId","url","container","id","lib_context","lib_datastore","poller","lib_poller","list","ScriptRegistry","scripts","failedScripts","hasScriptFailed","script","status","exit_code","ensureActive","code","allowRestart","register","controlMetrics","Infinity","metric_field","lastIndexOf","error_1","response","JSON","parse","cleanupExpiredScripts","scriptExpiry","datasource_PCPBPFtraceDatasource","PCPBPFtraceDatasource","instanceSettings","backendSrv","variableSrv","withCredentials","headers","Content-Type","basicAuth","pollIntervalMs","kbn_default","interval_to_ms","jsonData","pollInterval","keepPolling","localHistoryAge","datasourceRequest","doRequest","endpointRegistry","endpoint_registry","transformations","setInterval","doPollAll","$inject","endpoint","scriptRegistry","promises","Promise","all","getOrCreateEndpoint","utils","script_registry","options","title","datasource_generator","var_","types","hide","result","query","range","valueOf","output","refId","panelData","query_ctrl_PCPBPFtraceDatasourceQueryCtrl","_super","$scope","$injector","formats","getDefaultFormat","__extends","PCPBPFtraceDatasourceQueryCtrl","panelCtrl","panel","refreshMetricData","templateUrl","PCPBPFtraceConfigCtrl","PCPBPFtraceAnnotationsQueryCtrl","synchronized","isBlank","getConnectionParams","method","descriptor","inflightCalls","propertyKey","apply","arguments","then","reason","str","isString","dashboardVariables","variables","variableValue","variable","current","isEqual","allValue","slice","textValuePair","getDashboardVariables","Context","indomCache","label","contextUrl","contextResponse","params","trys","isObject","requiredMetrics","metricMetadataCache","names","metadata_1","indoms","indoms_1","indom","_f","_c","refreshed","_d","_e","instanceNames","prefix","__decorate","_utils__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"./datasources/bpftrace/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 134);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export interface MetricMetadata {\n    name: string,\n    pmid: number,\n    sem: string,\n    type: string,\n    units: string,\n    labels: Record<string, any>\n}\n\nexport type Datapoint = [number | string, number];\n\nexport interface TimeSeriesData {\n    target: string;\n    datapoints: Datapoint[]\n}\n\nexport interface TableData {\n    columns: any[]\n    rows: (string | number)[][]\n    type: string\n}\n\nexport type PanelData = TimeSeriesData | TableData;\n\nexport enum TargetFormat {\n    TimeSeries = \"time_series\",\n    Table = \"table\",\n    Heatmap = \"heatmap\",\n}\n\nexport interface DatastoreQueryResultRow {\n    name: string;\n    instances: TimeSeriesData[];\n}\n\nexport type DatastoreQueryResult = DatastoreQueryResultRow[];\n","import _ from 'lodash';\nimport { Datapoint, TargetFormat, TimeSeriesData, DatastoreQueryResult, PanelData, TableData, DatastoreQueryResultRow } from './types';\nimport { isBlank } from './utils';\n\nexport default class Transformations {\n\n    constructor(private templateSrv: any) {\n    }\n\n    getLabel(target: string, legendFormat: string) {\n        if (isBlank(legendFormat)) {\n            return target;\n        }\n        else {\n            const targetSpl = target.split('.');\n            let vars = {\n                instance: { value: target },\n                metric0: { value: targetSpl[targetSpl.length - 1] }\n            };\n            return this.templateSrv.replace(legendFormat, vars);\n        }\n    }\n\n    updateLabel(target: any, targetResult: TimeSeriesData) {\n        return { target: this.getLabel(targetResult.target, target.legendFormat), datapoints: targetResult.datapoints }\n    }\n\n    transformToTimeSeries(queryResult: DatastoreQueryResult, target: any): TimeSeriesData[] {\n        const instances: TimeSeriesData[] = _.flatten(queryResult.map((row: DatastoreQueryResultRow) => row.instances));\n        return instances.map(this.updateLabel.bind(this, target));\n    }\n\n    transformToHeatmap(queryResult: DatastoreQueryResult) {\n        const targetResults: TimeSeriesData[] = queryResult[0].instances;\n        for (const target of targetResults) {\n            // target name is the upper bound\n            const match = target.target.match(/^(.+?)\\-(.+?)$/);\n            if (match) {\n                target.target = match[2];\n            }\n\n            // round timestamps to one second - the heatmap panel calculates the x-axis size accordingly\n            target.datapoints = target.datapoints.map(\n                (dataPoint: Datapoint) => [dataPoint[0], Math.floor(dataPoint[1] / 1000) * 1000]\n            );\n        }\n        return targetResults;\n    }\n\n    transformStringToTable(tableText: string) {\n        let table: TableData = { columns: [], rows: [], type: 'table' };\n        let lines = tableText.split('\\n');\n        let columnSizes: [number, number | undefined][] = [];\n\n        for (let line of lines) {\n            line = line.trim();\n            if (line.length === 0 || line.includes(\"Ctrl-C\"))\n                continue;\n\n            if (table.columns.length === 0) {\n                let tableHeaders = line.split(/\\s\\s+/);\n                for (let i = 0; i < tableHeaders.length; i++) {\n                    const colStartAt = line.indexOf(tableHeaders[i]);\n                    const colEndAt = i + 1 < tableHeaders.length ? line.indexOf(tableHeaders[i + 1]) - 1 : undefined;\n                    table.columns.push({ text: tableHeaders[i] });\n                    columnSizes.push([colStartAt, colEndAt]);\n                }\n            }\n            else {\n                let row = columnSizes.map((colSize: any) => line.substring(colSize[0], colSize[1]).trim());\n                table.rows.push(row);\n            }\n        }\n        return table;\n    }\n\n    transformMultipleMetricsToTable(queryResult: DatastoreQueryResult) {\n        let table: TableData = { columns: [], rows: [], type: 'table' };\n        table.columns = queryResult.map((queryResultRow) => ({ text: queryResultRow.name }));\n        const instances = Object.keys(queryResult[0].instances).sort((a, b) => parseInt(a) - parseInt(b));\n        for (const instance of instances) {\n            const row: (string | number)[] = [];\n            for (const queryResultRow of queryResult) {\n                const target = queryResultRow.instances.find((target: TimeSeriesData) => target.target === instance);\n                if (target && target.datapoints.length > 0)\n                    row.push(target.datapoints[target.datapoints.length - 1][0]);\n                else\n                    row.push('?');\n            }\n            table.rows.push(row);\n\n        }\n        return table;\n    }\n\n    transformToTable(queryResult: DatastoreQueryResult) {\n        if (queryResult.length > 1) {\n            return this.transformMultipleMetricsToTable(queryResult);\n        }\n        else if (queryResult.length === 1) {\n            const targets = queryResult[0].instances;\n            if (targets.length > 0 && targets[0].datapoints.length > 0)\n                return this.transformStringToTable(targets[0].datapoints[0][0] as string);\n        }\n        return { columns: [], rows: [], type: 'table' };\n    }\n\n    transform(queryResult: DatastoreQueryResult, target: any): PanelData[] {\n        if (target.format === TargetFormat.TimeSeries)\n            return this.transformToTimeSeries(queryResult, target);\n        else if (target.format === TargetFormat.Heatmap)\n            return this.transformToHeatmap(queryResult);\n        else if (target.format == TargetFormat.Table)\n            return [this.transformToTable(queryResult)];\n        else\n            throw { message: `Invalid target format '${target.format}', possible options: ${TargetFormat.TimeSeries}, ${TargetFormat.Heatmap}, ${TargetFormat.Table}` };\n    }\n\n\n}\n","import _ from 'lodash';\nimport Context from './context';\nimport { Datapoint, TimeSeriesData, DatastoreQueryResultRow } from './types';\n\ntype StoredDatapoint = [number | string | undefined, number, number?];\n\nexport default class DataStore {\n    private store: Record<string, Record<string, StoredDatapoint[]>> = {}; // store[metric][instance] = [val,ts,origVal]\n\n    constructor(private context: Context, private localHistoryAgeMs: number) {\n    }\n\n    private ingestCounterMetric(instanceStore: StoredDatapoint[], instance: any, pollTimeEpochMs: number) {\n        // first value: store it as undefined, to be filtered by queryTimeSeries()\n        // subsequent values: perform rate conversation\n        if (instanceStore.length > 0) {\n            let [, prevTimeMs, prevOrigVal] = instanceStore[instanceStore.length - 1];\n            const deltaSec = (pollTimeEpochMs - prevTimeMs) / 1000;\n            instanceStore.push([(instance.value - prevOrigVal!) / deltaSec, pollTimeEpochMs, instance.value]);\n        }\n        else {\n            instanceStore.push([undefined, pollTimeEpochMs, instance.value]);\n        }\n    }\n\n    private async ingestMetric(metricStore: Record<string, StoredDatapoint[]>, metric: any, pollTimeEpochMs: number) {\n        const metadata = await this.context.metricMetadata(metric.name);\n        if (!metadata) {\n            console.info(`skipping ingestion of ${metric.name}: metadata not available`);\n            return;\n        }\n\n        for (const instance of metric.instances) {\n            // do not store history for the bpftrace control and output metrics\n            if (!(instance.instanceName in metricStore) ||\n                (metadata.labels && [\"control\", \"output\"].includes(metadata.labels.metrictype))) {\n                metricStore[instance.instanceName] = [];\n            }\n\n            if (metadata.sem === \"counter\") {\n                this.ingestCounterMetric(metricStore[instance.instanceName], instance, pollTimeEpochMs);\n            }\n            else {\n                metricStore[instance.instanceName].push([instance.value, pollTimeEpochMs]);\n            }\n        }\n    }\n\n    async ingest(data: any) {\n        if (_.isEmpty(data))\n            return;\n\n        const pollTimeEpochMs = data.timestamp.s ? data.timestamp.s * 1000 + data.timestamp.us / 1000 : data.timestamp * 1000;\n        for (const metric of data.values) {\n            if (!this.store[metric.name]) {\n                this.store[metric.name] = {};\n            }\n\n            await this.ingestMetric(this.store[metric.name], metric, pollTimeEpochMs);\n        }\n    }\n\n    queryMetric(metric: string, from: number, to: number) {\n        const results: TimeSeriesData[] = [];\n        for (const instance in this.store[metric]) {\n            let target = {\n                // for metrics without instance domains, show metric name\n                target: instance === \"null\" ? metric : instance,\n                datapoints: this.store[metric][instance].filter((dataPoint: StoredDatapoint) => (\n                    from <= dataPoint[1] && dataPoint[1] <= to && dataPoint[0] != undefined\n                )) as Datapoint[]\n            };\n            results.push(target);\n        }\n        return results;\n    }\n\n    queryMetrics(metrics: string[], from: number, to: number) : DatastoreQueryResultRow[] {\n        return metrics.map((metric: string) => ({ name: metric, instances: this.queryMetric(metric, from, to) }));\n    }\n\n    cleanExpiredMetrics() {\n        const keepExpiry = new Date().getTime() - this.localHistoryAgeMs\n        for (const metric in this.store) {\n            for (const instance in this.store[metric]) {\n                this.store[metric][instance] = this.store[metric][instance].filter(\n                    (dataPoint: Datapoint) => dataPoint[1] > keepExpiry\n                );\n            }\n        }\n    }\n}\n","import _ from \"lodash\";\nimport Context from \"./context\";\nimport DataStore from \"./datastore\";\n\nexport default class Poller {\n    private requestedMetrics: Record<string, number> = {}; // {metric: lastRequested}\n\n    constructor(private context: Context, private datastore: DataStore, private keepPollingMs: number) {\n    }\n\n    async poll() {\n        const metrics = Object.keys(this.requestedMetrics);\n        if (metrics.length == 0) {\n            return;\n        }\n\n        const data = await this.context.fetch(metrics, true);\n        await this.datastore.ingest(data);\n\n        const returnedMetrics = data.values.map((metric: any) => metric.name);\n        const missingMetrics = _.difference(metrics, returnedMetrics);\n        if (missingMetrics.length > 0) {\n            console.debug(`fetch didn't include result for ${missingMetrics.join(',')}, clearing it from requested metrics`);\n            for (const missingMetric of missingMetrics) {\n                delete this.requestedMetrics[missingMetric];\n            }\n        }\n    }\n\n    async ensurePolling(metrics: string[]) {\n        const now = new Date().getTime()\n        const metadatas = await this.context.metricMetadatas(metrics);\n        const validMetrics = _.intersection(metrics, Object.keys(metadatas));\n        for (const metric of validMetrics) {\n            this.requestedMetrics[metric] = now\n        }\n        return validMetrics;\n    }\n\n    removeMetricsFromPolling(metrics: string[]) {\n        for (const metric of metrics) {\n            delete this.requestedMetrics[metric];\n        }\n    }\n\n    cleanupExpiredMetrics() {\n        // clean up any not required metrics\n        const pollExpiry = new Date().getTime() - this.keepPollingMs;\n        this.requestedMetrics = _.pickBy(this.requestedMetrics, (lastRequested: number) => lastRequested > pollExpiry);\n    }\n}\n","import Context from \"./context\";\nimport DataStore from \"./datastore\";\nimport Poller from './poller';\n\nexport interface Endpoint {\n    context: Context;\n    poller: Poller;\n    datastore: DataStore;\n}\n\nexport default class EndpointRegistry<T extends Endpoint> {\n    private endpoints: Record<string, T> = {};\n\n    private generateId(url: string, container?: string) {\n        if (!container)\n            container = \"\";\n        return `${url}::${container}`;\n    }\n\n    find(url: string, container?: string) {\n        const id = this.generateId(url, container);\n        return this.endpoints[id];\n    }\n\n    create(url: string, container: string | undefined, keepPollingMs: number, localHistoryAgeMs: number) {\n        const id = this.generateId(url, container);\n        const context = new Context(url, container);\n        const datastore = new DataStore(context, localHistoryAgeMs);\n        const poller = new Poller(context, datastore, keepPollingMs);\n\n        this.endpoints[id] = { context, datastore, poller } as T;\n        return this.endpoints[id];\n    }\n\n    list() {\n        return Object.values(this.endpoints);\n    }\n\n}","import _ from 'lodash';\nimport Context from \"../lib/context\";\nimport Poller from '../lib/poller';\nimport DataStore from '../lib/datastore';\n\nexport interface BPFtraceScript {\n    // from PMDA\n    readonly name: string;\n    readonly vars: string[];\n    status: string;\n    exit_code: number | null;\n    output: string;\n\n    // additional properties by ScriptRegistry\n    code: string;\n    lastRequested: number;\n}\n\nexport default class ScriptRegistry {\n\n    // currently active (requested) scripts\n    private scripts: Record<string, BPFtraceScript> = {}; // {code: BPFtraceScript}\n\n    // a script which failed immediately will fail every time\n    // reasons: no variable found, invalid name, ...\n    private failedScripts: Record<string, BPFtraceScript> = {}; // {code: BPFtraceScript}\n\n    constructor(private context: Context, private poller: Poller, private datastore: DataStore, private keepPollingMs: number) {\n    }\n\n    hasScriptFailed(script: BPFtraceScript) {\n        return script.status === \"stopped\" && script.exit_code !== 0;\n    }\n\n    async ensureActive(code: string, allowRestart: boolean = true) {\n        if (code in this.failedScripts) {\n            return this.failedScripts[code];\n        }\n\n        let script = this.scripts[code];\n        if (!script) {\n            script = await this.register(code);\n            if (this.hasScriptFailed(script)) {\n                this.failedScripts[code] = script;\n                return script;\n            }\n            else {\n                this.scripts[code] = script;\n            }\n        }\n        script.lastRequested = new Date().getTime();\n        const controlMetrics = [\n            `bpftrace.scripts.${script.name}.status`,\n            `bpftrace.scripts.${script.name}.exit_code`,\n            `bpftrace.scripts.${script.name}.output`\n        ];\n        const validMetrics = await this.poller.ensurePolling(controlMetrics);\n\n        // missing script metrics on the PMDA and script is not starting, register again\n        if (validMetrics.length !== controlMetrics.length && script.status !== \"starting\") {\n            const missingMetrics = _.difference(controlMetrics, validMetrics);\n            console.debug(`script ${script.name} got deregistered on the PMDA (missing metrics: ${missingMetrics.join(',')})`);\n            delete this.scripts[code];\n            return allowRestart ? this.ensureActive(code, false) : script;\n        }\n\n        const queryResult = this.datastore.queryMetrics(controlMetrics, 0, Infinity);\n        for (const metric of queryResult) {\n            if (metric.instances.length > 0 && metric.instances[0].datapoints.length > 0) {\n                const metric_field = metric.name.substring(metric.name.lastIndexOf('.') + 1);\n                script[metric_field] = metric.instances[0].datapoints[0][0];\n            }\n        }\n\n        if (script.status === \"stopped\") {\n            if (script.exit_code === 0) {\n                console.debug(`script ${script.name} was stopped on the server, restarting...`);\n                delete this.scripts[code];\n                return allowRestart ? this.ensureActive(code, false) : script;\n            }\n            else {\n                // script failed, move to failed scripts\n                console.debug(`script ${script.name} failed, moving to failedScripts`);\n                this.poller.removeMetricsFromPolling(controlMetrics);\n                delete this.scripts[code];\n                this.failedScripts[code] = script;\n            }\n        }\n        return script;\n    }\n\n    async register(code: string) {\n        console.debug(\"registering script\", code);\n\n        // create temporary context, required so that the PMDA can identify\n        // the client who sent the pmStore message\n        const context = new Context(this.context.url);\n        try {\n            await context.store(\"bpftrace.control.register\", code);\n        }\n        catch (error) {\n            if (error.data && error.data.includes(\"-12400\")) {\n                // PMDA returned PM_ERR_BADSTORE\n                // next fetch will show error reason\n            }\n            else {\n                // other error\n                error.message = error.data ? error.data : \"unknown error\";\n                throw error;\n            }\n        }\n        const response = await context.fetch([\"bpftrace.control.register\"]);\n\n        const script: BPFtraceScript = JSON.parse(response.values[0].instances[0].value);\n        if (_.isEmpty(script))\n            throw { message: \"PMDA returned an empty response when registering this script.\" };\n        script.code = code;\n\n        console.debug(\"script register response\", script);\n        return script;\n    }\n\n    cleanupExpiredScripts() {\n        // clean up any not required scripts\n        // otherwise they get synced forever\n        const scriptExpiry = new Date().getTime() - this.keepPollingMs;\n        this.scripts = _.pickBy(this.scripts, (script: BPFtraceScript) => script.lastRequested > scriptExpiry);\n    }\n\n}\n","///<reference path=\"../../../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\nimport _ from 'lodash';\nimport kbn from 'grafana/app/core/utils/kbn';\nimport Context from '../lib/context';\nimport EndpointRegistry from '../lib/endpoint_registry';\nimport ScriptRegistry, { BPFtraceScript } from './script_registry';\nimport Transformations from '../lib/transformations';\nimport BPFtraceEndpoint from './bpftrace_endpoint';\nimport { TargetFormat, PanelData } from '../lib/types';\nimport { getConnectionParams } from '../lib/utils';\n\nexport class PCPBPFtraceDatasource {\n\n    name: string;\n    withCredentials: boolean;\n    headers: any;\n\n    pollIntervalMs: number; // poll metric sources every X ms\n    keepPollingMs: number; // we will keep polling a metric for up to X ms after it was last requested\n    localHistoryAgeMs: number; // age out time\n\n    endpointRegistry: EndpointRegistry<BPFtraceEndpoint>;\n    transformations: Transformations;\n\n    /** @ngInject **/\n    constructor(private instanceSettings: any, private backendSrv: any, private templateSrv: any, private variableSrv: any) {\n        this.name = instanceSettings.name;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n        this.pollIntervalMs = kbn.interval_to_ms(instanceSettings.jsonData.pollInterval || '1s');\n        this.keepPollingMs = kbn.interval_to_ms(instanceSettings.jsonData.keepPolling || '20s');\n        this.localHistoryAgeMs = kbn.interval_to_ms(instanceSettings.jsonData.localHistoryAge || '5m');\n\n        Context.datasourceRequest = this.doRequest.bind(this);\n        this.endpointRegistry = new EndpointRegistry();\n        this.transformations = new Transformations(this.templateSrv);\n\n        if (this.pollIntervalMs > 0)\n            setInterval(this.doPollAll.bind(this), this.pollIntervalMs);\n    }\n\n    doPollAll() {\n        let promises: Promise<void>[] = [];\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.datastore.cleanExpiredMetrics();\n            endpoint.poller.cleanupExpiredMetrics();\n            endpoint.scriptRegistry.cleanupExpiredScripts();\n            promises.push(endpoint.poller.poll());\n        }\n        return Promise.all(promises);\n    }\n\n    getOrCreateEndpoint(target: any) {\n        const [url,] = getConnectionParams(this.variableSrv, target, this.instanceSettings);\n        let endpoint = this.endpointRegistry.find(url);\n        if (!endpoint) {\n            endpoint = this.endpointRegistry.create(url, undefined, this.keepPollingMs, this.localHistoryAgeMs);\n            endpoint.scriptRegistry = new ScriptRegistry(endpoint.context, endpoint.poller, endpoint.datastore, this.keepPollingMs);\n        }\n        return endpoint;\n    }\n\n    async doRequest(options: any) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n        return await this.backendSrv.datasourceRequest(options);\n    }\n\n    async testDatasource() {\n        const [url, container] = getConnectionParams(this.variableSrv, {}, this.instanceSettings);\n        const context = new Context(url, container);\n        try {\n            await context.createContext();\n            return { status: 'success', message: \"Data source is working\", title: \"Success\" };\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                message: `Cannot connect to ${context.url}`,\n                title: 'Error',\n            };\n        }\n    }\n\n    async metricFindQuery(query: any) {\n        return [];\n    }\n\n    private async getMetricNameForMetricType(context: Context, script: BPFtraceScript, metrictype: string) {\n        for (const var_ of script.vars) {\n            const metric = `bpftrace.scripts.${script.name}.data.${var_}`;\n            const metricMetadata = await context.metricMetadata(metric);\n            if (metricMetadata && metricMetadata.labels && metricMetadata.labels.metrictype === metrictype)\n                return metric;\n        }\n        return null;\n    }\n\n    private async getMetricNamesForTarget(context: Context, target: any, script: BPFtraceScript) {\n        if (target.format === TargetFormat.TimeSeries) {\n            return script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n        }\n        else if (target.format === TargetFormat.Heatmap) {\n            const metric = await this.getMetricNameForMetricType(context, script, \"histogram\");\n            if (metric)\n                return [metric];\n            else\n                throw { message: \"Cannot find any histogram in this BPFtrace script.\" };\n        }\n        else if (target.format === TargetFormat.Table) {\n            const metric = await this.getMetricNameForMetricType(context, script, \"output\");\n            if (metric)\n                return [metric];\n            else\n                throw { message: \"Table format is only supported with printf() BPFtrace scripts.\" };\n        }\n        return [];\n    }\n\n    async query(query: any) {\n        const panelData: PanelData[] = [];\n        for (const target of query.targets) {\n            if (target.hide || !target.code)\n                continue;\n\n            // TODO: allow templating of bpftrace script code?\n            // possible clashes of grafana templating syntax with bpftrace syntax\n            const code = target.code.trim();\n            if (code.length === 0)\n                continue;\n\n            let endpoint = this.getOrCreateEndpoint(target);\n            let script: BPFtraceScript;\n            try {\n                // ensureActive registers the script (if required)\n                // register is async\n                script = await endpoint.scriptRegistry.ensureActive(code);\n\n                if (script.status === \"started\" || script.status === \"starting\") {\n                    const metrics = await this.getMetricNamesForTarget(endpoint.context, target, script);\n                    endpoint.poller.ensurePolling(metrics);\n\n                    let result = endpoint.datastore.queryMetrics(metrics, query.range.from.valueOf(), query.range.to.valueOf());\n                    panelData.push(...this.transformations.transform(result, target));\n                }\n                else {\n                    throw { message: `BPFtrace error:\\n\\n${script.output}` };\n                }\n            }\n            catch (error) {\n                // catch all exceptions and add the refId of the panel\n                error.refId = target.refId;\n                throw error;\n            }\n        }\n\n        return { data: panelData };\n    }\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\nimport { TargetFormat } from '../lib/types';\n\nexport class PCPBPFtraceDatasourceQueryCtrl extends QueryCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/query.editor.html';\n\n    formats: any = [];\n\n    /** @ngInject **/\n    constructor($scope, $injector) {\n        super($scope, $injector);\n\n        this.target.code = this.target.code || \"\";\n        this.target.format = this.target.format || this.getDefaultFormat();\n        this.target.url = this.target.url || null;\n\n        this.formats = [\n            { text: \"Time series\", value: TargetFormat.TimeSeries },\n            { text: \"Table\", value: TargetFormat.Table },\n            { text: \"Heatmap\", value: TargetFormat.Heatmap },\n        ];\n    }\n\n    getDefaultFormat() {\n        if (this.panelCtrl.panel.type === 'table') {\n            return TargetFormat.Table;\n        } else if (this.panelCtrl.panel.type === 'heatmap') {\n            return TargetFormat.Heatmap;\n        }\n        return TargetFormat.TimeSeries;\n    }\n\n    refreshMetricData() {\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n}\n","import { PCPBPFtraceDatasource } from './datasource';\nimport { PCPBPFtraceDatasourceQueryCtrl } from './query_ctrl';\n\nclass PCPBPFtraceConfigCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/config.html';\n}\n\nclass PCPBPFtraceAnnotationsQueryCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/annotations.editor.html';\n}\n\nexport {\n    PCPBPFtraceDatasource as Datasource,\n    PCPBPFtraceDatasourceQueryCtrl as QueryCtrl,\n    PCPBPFtraceConfigCtrl as ConfigCtrl,\n    PCPBPFtraceAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from \"lodash\";\n\n// typescript decorator which makes sure that this function\n// is called only once at a time\n// subsequent calls return the promise of the first call\nexport function synchronized(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    let method = descriptor.value;\n\n    descriptor.value = function () {\n        if (!this.inflightCalls)\n            this.inflightCalls = {};\n        if (this.inflightCalls[propertyKey])\n            return this.inflightCalls[propertyKey];\n\n        this.inflightCalls[propertyKey] = method.apply(this, arguments);\n        return this.inflightCalls[propertyKey].then((result: any) => {\n            this.inflightCalls[propertyKey] = null;\n            return result;\n        }, (reason: any) => {\n            this.inflightCalls[propertyKey] = null;\n            throw reason;\n        });\n    }\n}\n\nexport function isBlank(str: string) {\n    return !(_.isString(str) && str.trim().length > 0);\n}\n\nexport function getDashboardVariables(variableSrv: any): any {\n    const variables = {};\n    if (!variableSrv.variables) {\n        // variables are not defined on the datasource settings page\n        return {};\n    }\n\n    variableSrv.variables.forEach((variable) => {\n        let variableValue = variable.current.value;\n        if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n            if (variable.allValue === null) {\n                variableValue = variable.options.slice(1).map((textValuePair: any) => textValuePair.value);\n            } else {\n                variableValue = variable.allValue;\n            }\n        }\n\n        variables[variable.name] = {\n            text: variable.current.text,\n            value: variableValue,\n        };\n    });\n\n    return variables;\n}\n\nexport function getConnectionParams(variableSrv: any, target: any, instanceSettings: any): [string, string?] {\n    const dashboardVariables = getDashboardVariables(variableSrv);\n    let url: string = \"\";\n    let container: string | undefined;\n\n    if (!isBlank(target.url))\n        url = target.url;\n    else if (dashboardVariables.url && !isBlank(dashboardVariables.url.value))\n        url = dashboardVariables.url.value;\n    else if (!isBlank(instanceSettings.url))\n        url = instanceSettings.url;\n    else\n        throw { message: \"Cannot find any connection url.\" };\n\n    if (!isBlank(target.container))\n        container = target.container;\n    else if (dashboardVariables.container && !isBlank(dashboardVariables.container.value))\n        container = dashboardVariables.container.value;\n    else if (!isBlank(instanceSettings.container))\n        container = instanceSettings.container;\n\n    return [url, container];\n}\n","import _ from 'lodash';\nimport { synchronized } from './utils';\nimport { MetricMetadata } from './types';\n\nexport default class Context {\n\n    static datasourceRequest: (options: any) => any;\n    private context: string;\n    private metricMetadataCache: Record<string, MetricMetadata> = {};\n    private indomCache: Record<string, Record<number, string>> = {}; // indomCache[metric][instance_id] = instance_name\n    private d: string = '';\n\n    constructor(readonly url: string, readonly container?: string) {\n        // if port != 44322, use pmwebd API with underscore\n        // TODO: remove once transition to pmproxy is done\n        if (!url.includes(\":44322\")) {\n            this.d = '_';\n        }\n    }\n\n    @synchronized\n    async createContext() {\n        let contextUrl = `${this.url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`;\n\n        const contextResponse = await Context.datasourceRequest({ url: contextUrl });\n        this.context = contextResponse.data.context;\n\n        if (this.container) {\n            await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: \"pmcd.client.container\", value: this.container }\n            });\n        }\n    }\n\n    private async ensureContext(fn: () => any) {\n        if (!this.context) {\n            await this.createContext();\n        }\n\n        try {\n            return await fn();\n        } catch (error) {\n            if ((_.isString(error.data) && error.data.includes(\"12376\")) ||\n                (_.isObject(error.data) && error.data.message.includes(\"unknown context identifier\"))) {\n                console.debug(\"context expired, creating new context...\");\n                await this.createContext();\n                return await fn();\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n\n    async metricMetadatas(metrics: string[]): Promise<{ [key: string]: MetricMetadata }> {\n        const requiredMetrics = _.difference(metrics, Object.keys(this.metricMetadataCache));\n        if (requiredMetrics.length > 0) {\n            requiredMetrics.push(\"pmcd.control.timeout\"); // TODO: remove workaround - server should return empty list if no metrics were found\n            const metadata = await this.ensureContext(async () => {\n                const response = await Context.datasourceRequest({\n                    //url: `${this.url}/pmapi/${this.context}/${this.d}metric`,\n                    url: `http://localhost:44322/pmapi/metric`,\n                    params: { names: requiredMetrics.join(',') }\n                });\n                return response.data.metrics;\n            });\n\n            for (const metric of metadata) {\n                this.metricMetadataCache[metric.name] = metric;\n            }\n        }\n        return _.pick(this.metricMetadataCache, metrics); // _.pick ignores non-existing keys\n    }\n\n    async metricMetadata(metric: string) {\n        const metadata = await this.metricMetadatas([metric]);\n        return metadata[metric];\n    }\n\n    private async refreshIndoms(metric: string) {\n        const indoms = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}indom`,\n                params: { name: metric }\n            });\n            return response.data.instances;\n        });\n\n        // convert [{instance: X, name: Y}] to {instance: name}\n        this.indomCache[metric] = {};\n        for (const indom of indoms) {\n            this.indomCache[metric][indom.instance] = indom.name;\n        }\n        return this.indomCache[metric];\n    }\n\n    private async updateInstanceNames(metric: any) {\n        if (metric.instances.length == 0) {\n            return;\n        } else if (metric.instances[0].instance === null || metric.instances[0].instance === -1) {\n            // this metric has no instances (single value)\n            metric.instances[0].instanceName = null;\n            return;\n        }\n\n        if (!(metric.name in this.indomCache))\n            this.indomCache[metric.name] = await this.refreshIndoms(metric.name);\n\n        let refreshed = false;\n        for (const instance of metric.instances) {\n            instance.instanceName = this.indomCache[metric.name][instance.instance];\n            if (!instance.instanceName && !refreshed) {\n                // refresh instances at max once per metric\n                this.indomCache[metric.name] = await this.refreshIndoms(metric.name);\n                instance.instanceName = this.indomCache[metric.name][instance.instance];\n                refreshed = true;\n            }\n        }\n    }\n\n    async fetch(metrics: string[], instanceNames: boolean = false) {\n        metrics.push(\"pmcd.control.timeout\"); // TODO: remove workaround - server should return empty list if no metrics were found\n\n        const data = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}fetch`,\n                params: { names: metrics.join(',') }\n            });\n            return response.data;\n        });\n\n        const returnedMetrics = data.values.map((metric: any) => metric.name);\n        const missingMetrics = _.difference(metrics, returnedMetrics);\n        if (missingMetrics.length > 0) {\n            console.debug(`fetch didn't include result for ${missingMetrics.join(',')}, clearing it from metric metadata cache`);\n            for (const missingMetric of missingMetrics) {\n                delete this.metricMetadataCache[missingMetric];\n            }\n        }\n\n        if (instanceNames) {\n            for (const metric of data.values) {\n                await this.updateInstanceNames(metric);\n            }\n        }\n\n        return data;\n    }\n\n    async store(metric: string, value: string) {\n        return await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: metric, value: value }\n            });\n            return response.data;\n        });\n    }\n\n    async children(prefix: string) {\n        return await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}children`,\n                params: { prefix: prefix }\n            });\n            return response.data;\n        });\n    }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;"],"sourceRoot":""}