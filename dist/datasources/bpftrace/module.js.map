{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./datasources/bpftrace/datasource.ts","webpack:///./datasources/bpftrace/context.ts","webpack:///./datasources/bpftrace/datastore.ts","webpack:///./datasources/bpftrace/script_registry.ts","webpack:///./datasources/bpftrace/poller.ts","webpack:///./datasources/bpftrace/endpoint_registry.ts","webpack:///./datasources/bpftrace/transformations.ts","webpack:///./datasources/bpftrace/query_ctrl.ts","webpack:///./datasources/bpftrace/module.ts","webpack:///external \"app/plugins/sdk\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","TargetFormat","Context","url","container","this","contextPromise","metricMetadataCache","missingMetrics","indomCache","_createContext","contextUrl","datasourceRequest","contextResponse","_a","sent","context","data","external_lodash_default","a","isEmpty","fetchMetricMetadata","createContext","ensureContext","fn","console","log","err_1","__awaiter","_this","metricsResponse","metrics","findMetricMetadata","metric","find","findPmidForMetric","metadata","pmid","includes","push","debug","refreshIndoms","params","instances","indoms","reduce","cache","indom","instance","fetch","instanceNames","queryPmids","map","filter","length","pmids","join","_d","values","_i","instanceName","indomsForMetric","refreshed","_c","_b","store","DataStore","oldestDataMs","ingest","pollTimeEpochMs","timestamp","us","metricStore","isExistingMetric","sem","instanceStore","prevTimeMs","prevOrigVal","deltaSec","queryTimeSeries","from","to","targetResults","metrics_1","target","datapoints","dataPoint","queryLastMetric","vals","cleanExpiredMetrics","keepExpiry","Date","getTime","ScriptRegistry","poller","keepPollingMs","scripts","failedScripts","ensureActive","code","script","lastRequested","register","bpftrace_context","error_1","response","JSON","parse","status","message","output","cleanupExpiredScripts","scriptExpiry","pickBy","syncState","status_metric","output_metric","this_1","info","script_metrics","vars","var_","removeMetricsFromPolling","metric_split","split","script_name","metric_field","Poller","datastore","requestedMetrics","poll","keys","ensurePolling","now","metrics_2","cleanupExpiredMetrics","pollExpiry","EndpointRegistry","endpoints","generateId","id","bpftrace_datastore","bpftrace_poller","scriptRegistry","script_registry","list","Transformations","templateSrv","getLabel","legendFormat","replace","updateLabels","transformToHistogram","targetResults_1","Math","ceil","transformToTable","tableText","table","columns","rows","type","lines","columnSizes","line","trim","tableHeaders","colStartAt","indexOf","colEndAt","undefined","text","row","colSize","substring","lines_1","transform","format","TimeSeries","Heatmap","Table","POLL_INTERVAL_MS","SCRIPT_SYNC_INTERVAL_MS","datasource_PCPBPFtraceDatasource","PCPBPFtraceDatasource","instanceSettings","$q","backendSrv","variableSrv","q","withCredentials","headers","Content-Type","basicAuth","doRequest","endpointRegistry","endpoint_registry","transformations","setInterval","doPollAll","syncScriptStates","$inject","endpoint","targets","dashboardVariables","getVariables","printfMetric","endsWith","result","options","range","valueOf","apply","handleError","error","refId","title","datasource_generator","variables","variable","variableValue","isEqual","allValue","slice","textValuePair","current","query_ctrl_PCPBPFtraceDatasourceQueryCtrl","_super","$scope","$injector","formats","getDefaultFormat","__extends","PCPBPFtraceDatasourceQueryCtrl","panelCtrl","panel","refreshMetricData","templateUrl","__webpack_exports__","PCPBPFtraceConfigCtrl","PCPBPFtraceQueryOptionsCtrl","PCPBPFtraceAnnotationsQueryCtrl"],"mappings":"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","file":"./datasources/bpftrace/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 127);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","///<reference path=\"../../../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\nimport _ from 'lodash';\nimport Context from './context';\nimport EndpointRegistry from './endpoint_registry';\nimport { BPFtraceScript } from './script_registry';\nimport Transformations from './transformations';\n\n// poll metric sources every X ms\nconst POLL_INTERVAL_MS = 1000\n// script sync interval\nconst SCRIPT_SYNC_INTERVAL_MS = 2000\n// we will keep polling a metric for up to X ms after it was last requested\nconst KEEP_POLLING_MS = 20000\n// age out time\nconst OLDEST_DATA_MS = 5 * 60 * 1000\n\nexport type Datapoint = [number, number, number?];\n\nexport interface TimeSeriesResult {\n    target: string;\n    datapoints: Datapoint[]\n}\n\nexport interface TableResult {\n    columns: any[]\n    rows: any[]\n    type: string\n}\n\nexport type TargetResult = TimeSeriesResult | TableResult;\n\nexport enum TargetFormat {\n    TimeSeries = \"time_series\",\n    Table = \"table\",\n    Heatmap = \"heatmap\",\n}\n\nexport class PCPBPFtraceDatasource {\n\n    name: string;\n    url: string;\n    q: any;\n    backendSrv: any;\n    templateSrv: any;\n    variableSrv: any;\n    withCredentials: boolean;\n    headers: any;\n\n    endpointRegistry: EndpointRegistry;\n    transformations: Transformations;\n\n    /** @ngInject **/\n    constructor(instanceSettings, $q, backendSrv, templateSrv, variableSrv) {\n        this.name = instanceSettings.name;\n        this.url = instanceSettings.url;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.variableSrv = variableSrv;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n        Context.datasourceRequest = this.doRequest.bind(this);\n        this.endpointRegistry = new EndpointRegistry();\n        this.transformations = new Transformations(this.templateSrv);\n        setInterval(this.doPollAll.bind(this), POLL_INTERVAL_MS);\n        setInterval(this.syncScriptStates.bind(this), SCRIPT_SYNC_INTERVAL_MS);\n    }\n\n    doPollAll() {\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.datastore.cleanExpiredMetrics();\n            endpoint.poller.cleanupExpiredMetrics();\n            endpoint.poller.poll(); // poll() is async, but we don't wait for a result\n        }\n    }\n\n    syncScriptStates() {\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.scriptRegistry.cleanupExpiredScripts();\n            endpoint.scriptRegistry.syncState();\n        }\n    }\n\n    async query(options: any) {\n        const query = options;\n        if (query.targets.length == 0) {\n            return { data: [] };\n        }\n\n        const dashboardVariables = this.getVariables();\n        const targetResults: TargetResult[] = [];\n        for (const target of query.targets) {\n            if (target.hide || !target.code)\n                continue;\n\n            // TODO: allow templating of bpftrace script code?\n            // possible clashes of grafana templating syntax with bpftrace syntax\n            const code = target.code.trim();\n            if (code.length === 0)\n                continue;\n\n            // TODO: also allow overriding of url in query editor\n            let url: string;\n            if (dashboardVariables.url && dashboardVariables.url.value.length > 0)\n                url = dashboardVariables.url.value;\n            else\n                url = this.url;\n\n            let endpoint = this.endpointRegistry.find(url);\n            if (!endpoint) {\n                endpoint = this.endpointRegistry.create(url, null, KEEP_POLLING_MS, OLDEST_DATA_MS);\n            }\n\n            let script: BPFtraceScript;\n            try {\n                // ensureActive registers the script (if required)\n                // need to wait for the promise to resolve, because the error\n                // has to be returned in the query() promise to show up in the panel\n                script = await endpoint.scriptRegistry.ensureActive(code);\n            }\n            catch (error) {\n                this.handleError(error, target);\n                continue;\n            }\n\n            if (script.status === \"started\" || script.status === \"starting\") {\n                let metrics = script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n                endpoint.poller.ensurePolling(metrics);\n\n                let result: TimeSeriesResult[] | string | number;\n                if (target.format === TargetFormat.Table) {\n                    let printfMetric = metrics.filter((metric: string) => metric.endsWith('.printf'));\n                    if (printfMetric.length === 0)\n                        throw { message: \"Table format is only supported with printf() BPFtrace scripts\" };\n                    // instanceName is \"null\" for single values (without instance domains)\n                    result = endpoint.datastore.queryLastMetric(printfMetric[0], \"null\");\n                }\n                else {\n                    result = endpoint.datastore.queryTimeSeries(metrics, options.range.from.valueOf(), options.range.to.valueOf());\n                }\n\n                targetResults.push(...this.transformations.transform(result, target));\n            }\n            else {\n                this.handleError({ message: `BPFtrace error:\\n\\n${script.output}` }, target);\n            }\n        }\n\n        return { data: targetResults };\n    }\n\n    handleError(error: any, target: any) {\n        error.refId = target.refId;\n        throw error;\n    }\n\n    async testDatasource() {\n        let context = new Context(this.url, null);\n        try {\n            await context.createContext();\n            return { status: 'success', message: \"Data source is working\", title: \"Success\" };\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                message: `Cannot connect to ${context.url}`,\n                title: 'Error',\n            };\n        }\n    }\n\n    async metricFindQuery(query) {\n        return [];\n    }\n\n    async doRequest(options: any) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n\n        return await this.backendSrv.datasourceRequest(options);\n    }\n\n    getVariables(): any {\n        const variables = {};\n        if (!this.variableSrv.variables) {\n            // variables are not defined on the datasource settings page\n            return {};\n        }\n\n        for (let variable of this.variableSrv.variables) {\n            let variableValue = variable.current.value;\n            if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n                if (variable.allValue === null) {\n                    variableValue = variable.options.slice(1).map(textValuePair => textValuePair.value);\n                } else {\n                    variableValue = variable.allValue;\n                }\n            }\n\n            variables[variable.name] = {\n                text: variable.current.text,\n                value: variableValue,\n            };\n        }\n\n        return variables;\n    }\n}\n","import _ from 'lodash';\n\ninterface MetricMetadata {\n    name: string,\n    pmid: number,\n    sem: string\n}\n\nexport default class Context {\n\n    static datasourceRequest: (options: any) => any;\n    private context: string;\n    private contextPromise: Promise<void> | null = null;\n    private metricMetadataCache: MetricMetadata[] = [];\n    private missingMetrics: string[] = [];\n    private indomCache: Record<string, Record<number, string>> = {}; // indomCache[metric][instance_id] = instance_name\n\n    constructor(readonly url: string, readonly container: string | null = null) {\n    }\n\n    private async _createContext() {\n        //console.debug('** making request for context')\n        let contextUrl = `${this.url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`\n        if (this.container)\n            contextUrl += `&container=${this.container}`\n\n        const contextResponse = await Context.datasourceRequest({ url: contextUrl })\n        //console.log('** contextResponse:', contextResponse)\n        this.context = contextResponse.data.context\n\n        if (this.container) {\n            //console.log('selecting container..')\n            const containerResponse = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_store?name=pmcd.client.container&value=${this.container}`\n            })\n            //console.log('selected', containerResponse)\n        }\n\n        if (_.isEmpty(this.metricMetadataCache)) {\n            await this.fetchMetricMetadata();\n        }\n    }\n\n    // this method ensures that only one context request will be sent at a time\n    // if there are 2 simultaneous calls to createContext(), the second call\n    // will wait until the promise of the first call is resolved\n    async createContext() {\n        if (!this.contextPromise)\n            this.contextPromise = this._createContext();\n        await this.contextPromise;\n        this.contextPromise = null;\n    }\n\n    async ensureContext(fn: () => any) {\n        if (!this.context) {\n            await this.createContext();\n        }\n\n        try {\n            return await fn();\n        } catch (err) {\n            console.log(\"error\", err, \"creating new context...\");\n            await this.createContext();\n            return await fn();\n        }\n    }\n\n    async fetchMetricMetadata() {\n        //console.log('** making request for metrics')\n        await this.ensureContext(async () => {\n            const metricsResponse = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_metric`\n            });\n            this.metricMetadataCache = metricsResponse.data.metrics;\n        });\n    }\n\n    findMetricMetadata(metric: string) {\n        return this.metricMetadataCache.find(p => p.name === metric);\n    }\n\n    findPmidForMetric(metric: string) {\n        const metadata = this.findMetricMetadata(metric);\n        if (metadata) {\n            return metadata.pmid\n        } else { // no pmid found\n            // TODO: script is starting and has no registered metrics yet / error\n            if (!this.missingMetrics.includes(metric)) {\n                this.missingMetrics.push(metric)\n                console.debug(`Cannot find pmid for ${metric}. Is this PMDA enabled?`)\n            }\n            return null\n        }\n    }\n\n    async refreshIndoms(metric: string) {\n        const indoms = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_indom`,\n                params: { name: metric }\n            });\n            return response.data.instances;\n        });\n\n        // convert [{instance: X, name: Y}] to {instance: name}\n        this.indomCache[metric] = indoms.reduce((cache: any, indom: any) => {\n            cache[indom.instance] = indom.name;\n            return cache;\n        }, {});\n        return this.indomCache[metric];\n    }\n\n    async fetch(metrics: string[], instanceNames: boolean = false) {\n        console.debug(\"fetching metrics\", metrics);\n\n        // extract pmid for metric name\n        const queryPmids = metrics\n            .map((metric: string) => this.findPmidForMetric(metric))\n            .filter((metric: number | null) => metric) // filter out nulls from findPmidForMetric\n\n        if (!queryPmids.length)\n            return {}\n\n        // by now we have a context, the pmids to fetch, so lets do it\n        const data = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_fetch`,\n                params: { pmids: queryPmids.join(',') }\n            });\n            return response.data;\n        });\n\n        if (instanceNames) {\n            // add instance names to instances\n            for (const metric of data.values) {\n                if (metric.instances.length == 0) {\n                    continue;\n                } else if (metric.instances[0].instance === -1) { // this metric has no instances (single value)\n                    metric.instances[0].instanceName = null;\n                    continue;\n                }\n\n                let indomsForMetric = this.indomCache[metric.name];\n                if (!indomsForMetric)\n                    indomsForMetric = await this.refreshIndoms(metric.name);\n\n                let refreshed = false;\n                for (const instance of metric.instances) {\n                    instance.instanceName = indomsForMetric[instance.instance];\n                    if (!instance.instanceName && !refreshed) {\n                        // refresh instances at max once per metric\n                        indomsForMetric = await this.refreshIndoms(metric.name);\n                        instance.instanceName = indomsForMetric[instance.instance];\n                        refreshed = true;\n                    }\n                }\n            }\n        }\n\n        return data;\n    }\n\n    async store(metric: string, value: string) {\n        return await this.ensureContext(() => {\n            return Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_store`,\n                params: { name: metric, value: value }\n            })\n        });\n    }\n}\n","import _ from 'lodash';\nimport { Datapoint, TimeSeriesResult } from './datasource';\nimport Context from './context';\n\nexport default class DataStore {\n    private store: Record<string, Record<string, Datapoint[]>> = {}; // store[metric][instance] = [val,ts,origVal]\n\n    constructor(private context: Context, private oldestDataMs: number) {\n    }\n\n    ingest(data: any) {\n        if (_.isEmpty(data))\n            return;\n\n        const pollTimeEpochMs = data.timestamp.s * 1000 + data.timestamp.us / 1000;\n        for (const metric of data.values) {\n            let metricStore = this.store[metric.name];\n            if (!metricStore) {\n                metricStore = this.store[metric.name] = {};\n            }\n\n            const metadata = this.context.findMetricMetadata(metric.name);\n            for (const instance of metric.instances) {\n                const isExistingMetric = instance.instanceName in metricStore;\n                if (!isExistingMetric)\n                    metricStore[instance.instanceName] = [];\n\n                if (metadata.sem === \"counter\") {\n                    const instanceStore = metricStore[instance.instanceName];\n                    if (isExistingMetric) {\n                        let [, prevTimeMs, prevOrigVal] = instanceStore[instanceStore.length - 1];\n                        const deltaSec = (pollTimeEpochMs - prevTimeMs) / 1000;\n                        instanceStore.push([(instance.value - prevOrigVal!) / deltaSec, pollTimeEpochMs, instance.value]);\n                    }\n                    else {\n                        instanceStore.push([instance.value, pollTimeEpochMs, instance.value]);\n                    }\n                }\n                else {\n                    metricStore[instance.instanceName].push([instance.value, pollTimeEpochMs]);\n                }\n            }\n        }\n    }\n\n    queryTimeSeries(metrics: string[], from: number, to: number) {\n        let targetResults: TimeSeriesResult[] = [];\n        for (const metric of metrics) {\n            if (!(metric in this.store))\n                continue;\n\n            for (const instance in this.store[metric]) {\n                let target = {\n                    // for metrics without instance domains, show metric name\n                    target: instance === \"null\" ? metric : instance,\n                    datapoints: this.store[metric][instance].filter((dataPoint: Datapoint) => (\n                        from <= dataPoint[1] && dataPoint[1] <= to\n                    ))\n                };\n\n                targetResults.push(target);\n            }\n        }\n        return targetResults;\n    }\n\n    queryLastMetric(metric: string, instanceName: string) {\n        if (!(metric in this.store))\n            return \"\";\n\n        const vals = this.store[metric][instanceName];\n        if (!vals || vals.length === 0)\n            return \"\";\n\n        return vals[vals.length - 1][0];\n    }\n\n    cleanExpiredMetrics() {\n        const keepExpiry = new Date().getTime() - this.oldestDataMs\n        for (const metric in this.store) {\n            for (const instance in this.store[metric]) {\n                this.store[metric][instance] = this.store[metric][instance].filter(\n                    (dataPoint: Datapoint) => dataPoint[1] > keepExpiry\n                );\n            }\n        }\n    }\n}\n","import _ from 'lodash';\nimport Context from \"./context\";\nimport Poller from './poller';\n\nexport interface BPFtraceScript {\n    name: string;\n    vars: string[];\n    status: string;\n    output: string;\n    code: string;\n    lastRequested: number;\n}\n\nexport default class ScriptRegistry {\n\n    // currently active (requested) scripts\n    private scripts: Record<string, BPFtraceScript> = {}; // {name: BPFtraceScript}\n\n    // a script which failed once will fail every time\n    // store them in a separate object, otherwise the syncState()\n    // will clean them (as they don't exist on the PMDA)\n    // and the datasource will keep re-adding them\n    private failedScripts: Record<string, BPFtraceScript> = {}; // {code: BPFtraceScript}\n\n    constructor(private context: Context, private poller: Poller, private keepPollingMs: number) {\n    }\n\n    async ensureActive(code: string) {\n        if (code in this.failedScripts) {\n            return this.failedScripts[code];\n        }\n\n        const script = _.find(Object.values(this.scripts), (script: BPFtraceScript) => script.code === code);\n        if (script) {\n            script.lastRequested = new Date().getTime();\n            return script;\n        }\n        else {\n            return await this.register(code);\n        }\n    }\n\n    async register(code: string) {\n        console.debug(\"registering script\", code);\n\n        // create temporary context, required so that the PMDA can identify\n        // the client who sent the pmStore message\n        const context = new Context(this.context.url);\n        try {\n            await context.store(\"bpftrace.control.register\", code);\n        }\n        catch (error) {\n            if (error.data && error.data.includes(\"-12400\")) {\n                // PMDA returned PM_ERR_BADSTORE\n                // next fetch will show error reason\n            }\n            else {\n                // other error\n                throw error;\n            }\n        }\n        const response = await context.fetch([\"bpftrace.control.register\"]);\n\n        const script: BPFtraceScript = JSON.parse(response.values[0].instances[0].value);\n        script.code = code;\n        script.lastRequested = new Date().getTime();\n\n        console.debug(\"bpftrace.control.register response\", script);\n        if (script.status === \"stopped\") {\n            // script failed due to no variables found, invalid name etc.\n            this.failedScripts[code] = script;\n            throw { message: `BPFtrace error:\\n\\n${script.output}` };\n        }\n        else {\n            this.scripts[script.name] = script;\n            // script has registered new metric names, fetch them\n            await this.context.fetchMetricMetadata();\n        }\n\n        return script;\n    }\n\n    cleanupExpiredScripts() {\n        // clean up any not required metrics\n        const scriptExpiry = new Date().getTime() - this.keepPollingMs;\n        this.scripts = _.pickBy(this.scripts, (script: BPFtraceScript) => script.lastRequested > scriptExpiry);\n    }\n\n    async syncState() {\n        if (_.isEmpty(this.scripts)) {\n            return;\n        }\n\n        await this.context.fetchMetricMetadata();\n\n        let metrics: string[] = [];\n        for (const script of Object.values(this.scripts)) {\n            const status_metric = `bpftrace.scripts.${script.name}.status`;\n            const output_metric = `bpftrace.scripts.${script.name}.output`;\n\n            if (this.context.findMetricMetadata(status_metric) && this.context.findMetricMetadata(output_metric)) {\n                metrics.push(status_metric, output_metric);\n            }\n            // don't remove scripts which are currently starting and don't have their metrics registered yet\n            else if (script.status !== \"starting\") {\n                console.info(`script ${script.name} is missing on the PMDA ${script.status}`);\n                const script_metrics = script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n                delete this.scripts[script.name];\n                this.poller.removeMetricsFromPolling(script_metrics);\n            }\n        }\n\n        const response = await this.context.fetch(metrics);\n        for (const metric of response.values) {\n            const metric_split = metric.name.split('.');\n            const script_name = metric_split[2];\n            const metric_field = metric_split[3];\n\n            const script = this.scripts[script_name];\n            if (!script) {\n                // script got removed by cleanupExpiredScripts()\n                // while waiting for values from the PMDA\n                continue;\n            }\n            else if (metric_field === \"status\") {\n                script.status = metric.instances[0].value;\n            }\n            else if (metric_field === \"output\") {\n                script.output = metric.instances[0].value;\n            }\n        }\n    }\n}\n","import _ from \"lodash\";\nimport Context from \"./context\";\nimport DataStore from \"./datastore\";\n\nexport default class Poller {\n    private requestedMetrics: Record<string, number> = {}; // {metric: lastRequested}\n\n    constructor(private context: Context, private datastore: DataStore, private keepPollingMs: number) {\n    }\n\n    async poll() {\n        const metrics = Object.keys(this.requestedMetrics);\n        if (metrics.length == 0) {\n            return;\n        }\n\n        const data = await this.context.fetch(metrics, true);\n        this.datastore.ingest(data);\n    }\n\n    ensurePolling(metrics: string[]) {\n        const now = new Date().getTime()\n        for (const metric of metrics) {\n            this.requestedMetrics[metric] = now\n        }\n    }\n\n    removeMetricsFromPolling(metrics: string[]) {\n        for (const metric of metrics) {\n            delete this.requestedMetrics[metric];\n        }\n    }\n\n    cleanupExpiredMetrics() {\n        // clean up any not required metrics\n        const pollExpiry = new Date().getTime() - this.keepPollingMs;\n        this.requestedMetrics = _.pickBy(this.requestedMetrics, (lastRequested: number) => lastRequested > pollExpiry);\n    }\n}\n","import Context from \"./context\";\nimport DataStore from \"./datastore\";\nimport ScriptRegistry from \"./script_registry\";\nimport Poller from './poller';\n\ninterface Endpoint {\n    context: Context;\n    scriptRegistry: ScriptRegistry;\n    poller: Poller;\n    datastore: DataStore;\n}\n\nexport default class EndpointRegistry {\n    private endpoints: Record<string, Endpoint> = {};\n\n    private generateId(url: string, container: string | null = null) {\n        return `${url}::${container}`;\n    }\n\n    find(url: string, container: string | null = null) {\n        const id = this.generateId(url, container);\n        return this.endpoints[id];\n    }\n\n    create(url: string, container: string | null, keepPollingMs: number, oldestDataMs: number) {\n        const id = this.generateId(url, container);\n        const context = new Context(url, container);\n        const datastore = new DataStore(context, oldestDataMs);\n        const poller = new Poller(context, datastore, keepPollingMs);\n        const scriptRegistry = new ScriptRegistry(context, poller, keepPollingMs);\n\n        this.endpoints[id] = { context, datastore, poller, scriptRegistry };\n        return this.endpoints[id];\n    }\n\n    list() {\n        return Object.values(this.endpoints);\n    }\n\n}","import _ from 'lodash';\nimport { Datapoint, TargetFormat, TimeSeriesResult, TableResult } from \"./datasource\";\n\nexport default class Transformations {\n\n    constructor(private templateSrv: any) {\n    }\n\n    getLabel(target: string, legendFormat: string) {\n        if (_.isEmpty(legendFormat)) {\n            return target;\n        }\n        else {\n            let vars = {\n                instance: { value: target }\n            };\n            return this.templateSrv.replace(legendFormat, vars);\n        }\n    }\n\n    updateLabels(targetResults: TimeSeriesResult[], target: any) {\n        return targetResults.map((t: TimeSeriesResult) => {\n            return { target: this.getLabel(t.target, target.legendFormat), datapoints: t.datapoints }\n        });\n    }\n\n    transformToHistogram(targetResults: TimeSeriesResult[]) {\n        for (const target of targetResults) {\n            // target name is the upper bound\n            target.target = target.target.split('-')[1];\n\n            // round timestamps to one second - the heatmap panel calculates the x-axis size accordingly\n            target.datapoints = target.datapoints.map(\n                (dataPoint: Datapoint) => [dataPoint[0], Math.ceil(dataPoint[1] / 1000) * 1000, dataPoint[2]]\n            );\n        }\n        return targetResults;\n    }\n\n    transformToTable(tableText: string) {\n        let table: TableResult = { columns: [], rows: [], type: 'table' };\n        let lines = tableText.split('\\n');\n        let columnSizes: [number, number | undefined][] = [];\n\n        for (let line of lines) {\n            line = line.trim();\n            if (line.length === 0 || line.includes(\"Ctrl-C\"))\n                continue;\n\n            if (_.isEmpty(table.columns)) {\n                let tableHeaders = line.split(/\\s\\s+/);\n                for (let i = 0; i < tableHeaders.length; i++) {\n                    const colStartAt = line.indexOf(tableHeaders[i]);\n                    const colEndAt = i + 1 < tableHeaders.length ? line.indexOf(tableHeaders[i + 1]) - 1 : undefined;\n                    table.columns.push({ text: tableHeaders[i] });\n                    columnSizes.push([colStartAt, colEndAt]);\n                }\n            }\n            else {\n                let row = columnSizes.map((colSize: any) => line.substring(colSize[0], colSize[1]).trim());\n                table.rows.push(row);\n            }\n        }\n        return [table];\n    }\n\n    transform(targetResults: any, target: any) {\n        if (target.format === TargetFormat.TimeSeries)\n            return this.updateLabels(targetResults, target);\n        else if (target.format === TargetFormat.Heatmap)\n            return this.transformToHistogram(targetResults);\n        else if (target.format == TargetFormat.Table)\n            return this.transformToTable(targetResults);\n        else\n            throw { message: \"Invalid target format\" };\n    }\n\n\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\nimport { TargetFormat } from './datasource';\n\nexport class PCPBPFtraceDatasourceQueryCtrl extends QueryCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/query.editor.html';\n\n  formats: any = [];\n\n  /** @ngInject **/\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.code = this.target.code || \"\";\n    this.target.format = this.target.format || this.getDefaultFormat();\n\n    this.formats = [\n      { text: \"Time series\", value: TargetFormat.TimeSeries },\n      { text: \"Table\", value: TargetFormat.Table },\n      { text: \"Heatmap\", value: TargetFormat.Heatmap },\n    ];\n  }\n\n  getDefaultFormat() {\n    if (this.panelCtrl.panel.type === 'table') {\n      return TargetFormat.Table;\n    } else if (this.panelCtrl.panel.type === 'heatmap') {\n      return TargetFormat.Heatmap;\n    }\n    return TargetFormat.TimeSeries;\n  }\n\n  refreshMetricData() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n","import { PCPBPFtraceDatasource } from './datasource';\nimport { PCPBPFtraceDatasourceQueryCtrl } from './query_ctrl';\n\nclass PCPBPFtraceConfigCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/config.html';\n}\n\nclass PCPBPFtraceQueryOptionsCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/query.options.html';\n}\n\nclass PCPBPFtraceAnnotationsQueryCtrl {\n  static templateUrl = 'datasources/bpftrace/partials/annotations.editor.html';\n}\n\nexport {\n  PCPBPFtraceDatasource as Datasource,\n  PCPBPFtraceDatasourceQueryCtrl as QueryCtrl,\n  PCPBPFtraceConfigCtrl as ConfigCtrl,\n  PCPBPFtraceQueryOptionsCtrl as QueryOptionsCtrl,\n  PCPBPFtraceAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;"],"sourceRoot":""}