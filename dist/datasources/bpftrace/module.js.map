{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./datasources/lib/types.ts","webpack:///./datasources/lib/transformations.ts","webpack:///./datasources/lib/datastore.ts","webpack:///./datasources/lib/poller.ts","webpack:///./datasources/lib/endpoint_registry.ts","webpack:///./datasources/bpftrace/script_registry.ts","webpack:///./datasources/bpftrace/datasource.ts","webpack:///./datasources/bpftrace/query_ctrl.ts","webpack:///./datasources/bpftrace/module.ts","webpack:///./datasources/lib/utils.ts","webpack:///./datasources/lib/context.ts","webpack:///external \"app/core/utils/kbn\"","webpack:///external \"app/plugins/sdk\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","TargetFormat","__webpack_exports__","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","_types__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_2__","Transformations","templateSrv","this","getLabel","target","legendFormat","targetSpl","split","vars","instance","metric0","length","replace","updateLabel","targetResult","datapoints","transformToTimeSeries","queryResult","a","flatten","map","row","data","transformToHeatmap","targetResults","_i","targetResults_1","match","dataPoint","Math","floor","transformStringToTable","tableText","table","columns","rows","type","lines","columnSizes","line","trim","includes","tableHeaders","colStartAt","indexOf","colEndAt","undefined","push","text","colSize","substring","lines_1","transformMultipleMetricsToTable","queryResultRow","metric","queryResult_1","find","instances_1","keys","sort","b","parseInt","transformToTable","targets","transform","format","TimeSeries","Heatmap","Table","message","DataStore","context","localHistoryAgeMs","store","ingestCounterMetric","instanceStore","pollTimeEpochMs","_a","prevTimeMs","prevOrigVal","deltaSec","ingestMetric","metricStore","metadata","findMetricMetadata","instances","instanceName","labels","metrictype","sem","console","info","ingest","external_lodash_default","isEmpty","timestamp","us","values","queryMetric","from","to","results","filter","queryMetrics","metrics","_this","cleanExpiredMetrics","keepExpiry","Date","getTime","Poller","datastore","keepPollingMs","requestedMetrics","poll","fetch","sent","ensurePolling","now","metrics_1","removeMetricsFromPolling","metrics_2","cleanupExpiredMetrics","pollExpiry","pickBy","lastRequested","endpoint_registry_EndpointRegistry","EndpointRegistry","endpoints","generateId","url","container","id","lib_context","lib_datastore","poller","lib_poller","list","ScriptRegistry","scripts","failedScripts","ensureActive","code","script","status","exit_code","register","debug","error_1","response","JSON","parse","fetchMetricMetadata","cleanupExpiredScripts","scriptExpiry","syncState","_d","found_all_metrics","state_metrics_1","state_metric","this_1","script_metrics","var_","_b","_c","metric_split","script_name","metric_field","datasource_PCPBPFtraceDatasource","PCPBPFtraceDatasource","instanceSettings","backendSrv","variableSrv","withCredentials","headers","Content-Type","basicAuth","pollIntervalMs","kbn_default","interval_to_ms","jsonData","pollInterval","scriptSyncIntervalMs","scriptSyncInterval","keepPolling","localHistoryAge","datasourceRequest","doRequest","endpointRegistry","endpoint_registry","transformations","setInterval","doPollAll","syncScriptStates","$inject","endpoint","promises","Promise","all","scriptRegistry","getOrCreateEndpoint","utils","script_registry","options","title","datasource_generator","getMetricNameForMetricType","metricMetadata","getMetricNamesForTarget","types","hide","output","result","query","range","valueOf","panelData","apply","refId","query_ctrl_PCPBPFtraceDatasourceQueryCtrl","_super","$scope","$injector","formats","getDefaultFormat","__extends","PCPBPFtraceDatasourceQueryCtrl","panelCtrl","panel","refreshMetricData","templateUrl","PCPBPFtraceConfigCtrl","PCPBPFtraceAnnotationsQueryCtrl","synchronized","isBlank","getConnectionParams","method","descriptor","inflightCalls","propertyKey","arguments","then","reason","str","isString","dashboardVariables","variables","variableValue","variable","current","isEqual","allValue","slice","textValuePair","getDashboardVariables","Context","indomCache","label","contextUrl","contextResponse","params","trys","isObject","prefix","metricMetadataCache","getAllMetricNames","indoms","indoms_1","indom","instanceNames","names","join","indomsForMetric","refreshed","__decorate","_utils__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"4FACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,uBClFAhC,EAAAD,QAAAkC,kCCeA,IAAYC,EAAZrC,EAAAU,EAAA4B,EAAA,sBAAAD,IAAA,SAAYA,GACRA,EAAA,yBACAA,EAAA,cACAA,EAAA,kBAHJ,CAAYA,MAAY,sCCfxB,IAAAE,EAAAvC,EAAA,GAAAwC,EAAAxC,EAAA6B,EAAAU,GAAAE,EAAAzC,EAAA,GAAA0C,EAAA1C,EAAA,GAIA2C,EAAA,WAEI,SAAAA,EAAoBC,GAAAC,KAAAD,cAiHxB,OA9GID,EAAAX,UAAAc,SAAA,SAASC,EAAgBC,GACrB,GAAIlC,OAAA4B,EAAA,EAAA5B,CAAQkC,GACR,OAAOD,EAGP,IAAME,EAAYF,EAAOG,MAAM,KAC3BC,EAAO,CACPC,SAAU,CAAE/B,MAAO0B,GACnBM,QAAS,CAAEhC,MAAO4B,EAAUA,EAAUK,OAAS,KAEnD,OAAOT,KAAKD,YAAYW,QAAQP,EAAcG,IAItDR,EAAAX,UAAAwB,YAAA,SAAYT,EAAaU,GACrB,MAAO,CAAEV,OAAQF,KAAKC,SAASW,EAAaV,OAAQA,EAAOC,cAAeU,WAAYD,EAAaC,aAGvGf,EAAAX,UAAA2B,sBAAA,SAAsBC,EAAmCb,GAErD,OADwCP,EAAAqB,EAAEC,QAAQF,EAAYG,IAAI,SAACC,GAAiC,OAAAA,EAAAC,QAC/EF,IAAIlB,KAAKW,YAAY5B,KAAKiB,KAAME,KAGzDJ,EAAAX,UAAAkC,mBAAA,SAAmBN,GAEf,IADA,IAAMO,EAAkCP,EAAY,GAAGK,KAClCG,EAAA,EAAAC,EAAAF,EAAAC,EAAAC,EAAAf,OAAAc,IAAe,CAA/B,IAAMrB,EAAMsB,EAAAD,GAEPE,EAAQvB,EAAOA,OAAOuB,MAAM,kBAC9BA,IACAvB,EAAOA,OAASuB,EAAM,IAI1BvB,EAAOW,WAAaX,EAAOW,WAAWK,IAClC,SAACQ,GAAyB,OAACA,EAAU,GAAX,IAAeC,KAAKC,MAAMF,EAAU,GAAK,QAG3E,OAAOJ,GAGXxB,EAAAX,UAAA0C,uBAAA,SAAuBC,GAKnB,IAJA,IAAIC,EAAmB,CAAEC,QAAS,GAAIC,KAAM,GAAIC,KAAM,SAClDC,EAAQL,EAAUzB,MAAM,MACxB+B,EAA8C,cAEzCC,GAEL,GAAoB,KADpBA,EAAOA,EAAKC,QACH7B,QAAgB4B,EAAKE,SAAS,gBAC1B,WAEb,GAA6B,IAAzBR,EAAMC,QAAQvB,OAEd,IADA,IAAI+B,EAAeH,EAAKhC,MAAM,SACrB9C,EAAI,EAAGA,EAAIiF,EAAa/B,OAAQlD,IAAK,CAC1C,IAAMkF,EAAaJ,EAAKK,QAAQF,EAAajF,IACvCoF,EAAWpF,EAAI,EAAIiF,EAAa/B,OAAS4B,EAAKK,QAAQF,EAAajF,EAAI,IAAM,OAAIqF,EACvFb,EAAMC,QAAQa,KAAK,CAAEC,KAAMN,EAAajF,KACxC6E,EAAYS,KAAK,CAACJ,EAAYE,QAGjC,CACD,IAAIxB,EAAMiB,EAAYlB,IAAI,SAAC6B,GAAiB,OAAAV,EAAKW,UAAUD,EAAQ,GAAIA,EAAQ,IAAnCT,SAC5CP,EAAME,KAAKY,KAAK1B,KAhBPI,EAAA,EAAA0B,EAAAd,EAAAZ,EAAA0B,EAAAxC,OAAAc,IAAK,GAAT0B,EAAA1B,IAmBb,OAAOQ,GAGXjC,EAAAX,UAAA+D,gCAAA,SAAgCnC,GAC5B,IAAIgB,EAAmB,CAAEC,QAAS,GAAIC,KAAM,GAAIC,KAAM,SACtDH,EAAMC,QAAUjB,EAAYG,IAAI,SAACiC,GAAmB,MAAC,CAAEL,KAAMK,EAATC,UAEpD,IADA,eACW7C,GAEP,IADA,IAAMY,EAA2B,GACJI,EAAA,EAAA8B,EAAAtC,EAAAQ,EAAA8B,EAAA5C,OAAAc,IAAa,CAArC,IACKrB,EADemD,EAAA9B,GACSH,KAAKkC,KAAK,SAACpD,GAA2B,OAAAA,EAAOA,SAAPK,IAChEL,GAAUA,EAAOW,WAAWJ,OAAS,EACrCU,EAAI0B,KAAK3C,EAAOW,WAAWX,EAAOW,WAAWJ,OAAS,GAAG,IAEzDU,EAAI0B,KAAK,KAEjBd,EAAME,KAAKY,KAAK1B,IATGI,EAAA,EAAAgC,EADLtF,OAAOuF,KAAKzC,EAAY,GAAGK,MAAMqC,KAAK,SAACzC,EAAG0C,GAAM,OAAAC,SAAS3C,GAAK2C,SAAdD,KAC3CnC,EAAAgC,EAAA9C,OAAAc,IAAS,GAAbgC,EAAAhC,IAYnB,OAAOQ,GAGXjC,EAAAX,UAAAyE,iBAAA,SAAiB7C,GACb,GAAIA,EAAYN,OAAS,EACrB,OAAOT,KAAKkD,gCAAgCnC,GAE3C,GAA2B,IAAvBA,EAAYN,OAAc,CAC/B,IAAMoD,EAAU9C,EAAY,GAAGK,KAC/B,GAAIyC,EAAQpD,OAAS,GAAKoD,EAAQ,GAAGhD,WAAWJ,OAAS,EACrD,OAAOT,KAAK6B,uBAAuBgC,EAAQ,GAAGhD,WAAW,GAAG,IAEpE,MAAO,CAAEmB,QAAS,GAAIC,KAAM,GAAIC,KAAM,UAG1CpC,EAAAX,UAAA2E,UAAA,SAAU/C,EAAmCb,GACzC,GAAIA,EAAO6D,SAAWnE,EAAA,EAAaoE,WAC/B,OAAOhE,KAAKc,sBAAsBC,EAAab,GAC9C,GAAIA,EAAO6D,SAAWnE,EAAA,EAAaqE,QACpC,OAAOjE,KAAKqB,mBAAmBN,GAC9B,GAAIb,EAAO6D,QAAUnE,EAAA,EAAasE,MACnC,MAAO,CAAClE,KAAK4D,iBAAiB7C,IAE9B,KAAM,CAAEoD,QAAS,0BAA0BjE,EAAO6D,OAAM,wBAAwBnE,EAAA,EAAaoE,WAAU,KAAKpE,EAAA,EAAaqE,QAAO,KAAKrE,EAAA,EAAasE,QAI9JpE,EAnHA,uECEA,WAGI,SAAAsE,EAAoBC,EAA0BC,GAA1BtE,KAAAqE,UAA0BrE,KAAAsE,oBAFtCtE,KAAAuE,MAA2D,GAmFvE,OA9EYH,EAAAjF,UAAAqF,oBAAR,SAA4BC,EAAkClE,EAAemE,GAGzE,GAAID,EAAchE,OAAS,EAAG,CACtB,IAAAkE,EAAAF,IAAAhE,OAAA,GAAGmE,EAAAD,EAAA,GAAYE,EAAAF,EAAA,GACbG,GAAYJ,EAAkBE,GAAc,IAClDH,EAAc5B,KAAK,EAAEtC,EAAS/B,MAAQqG,GAAgBC,EAAUJ,EAAiBnE,EAAS/B,aAG1FiG,EAAc5B,KAAK,MAACD,EAAW8B,EAAiBnE,EAAS/B,SAIzD4F,EAAAjF,UAAA4F,aAAR,SAAqBC,EAAgD5B,EAAasB,GAC9E,IAAMO,EAAWjF,KAAKqE,QAAQa,mBAAmB9B,EAAOtF,MACxD,GAAKmH,EAKL,IAAuB,IAAA1D,EAAA,EAAAoD,EAAAvB,EAAO+B,UAAP5D,EAAAoD,EAAAlE,OAAAc,IAAkB,CAApC,IAAMhB,EAAQoE,EAAApD,GAEThB,EAAS6E,gBAAgBJ,KAAiBC,EAASI,QAAyC,WAA/BJ,EAASI,OAAOC,cAC/EN,EAAYzE,EAAS6E,cAAgB,IAGpB,YAAjBH,EAASM,IACTvF,KAAKwE,oBAAoBQ,EAAYzE,EAAS6E,cAAe7E,EAAUmE,GAGvEM,EAAYzE,EAAS6E,cAAcvC,KAAK,CAACtC,EAAS/B,MAAOkG,SAd7Dc,QAAQC,KAAK,yBAAyBrC,EAAOtF,KAAI,6BAmBzDsG,EAAAjF,UAAAuG,OAAA,SAAOtE,GACH,IAAIuE,EAAA3E,EAAE4E,QAAQxE,GAId,IADA,IAAMsD,EAAkBtD,EAAKyE,UAAUvG,EAAuB,IAAnB8B,EAAKyE,UAAUvG,EAAW8B,EAAKyE,UAAUC,GAAK,IAAwB,IAAjB1E,EAAKyE,UAChFtE,EAAA,EAAAoD,EAAAvD,EAAK2E,OAALxE,EAAAoD,EAAAlE,OAAAc,IAAa,CAA7B,IAAM6B,EAAMuB,EAAApD,GACRvB,KAAKuE,MAAMnB,EAAOtF,QACnBkC,KAAKuE,MAAMnB,EAAOtF,MAAQ,IAG9BkC,KAAK+E,aAAa/E,KAAKuE,MAAMnB,EAAOtF,MAAOsF,EAAQsB,KAI3DN,EAAAjF,UAAA6G,YAAA,SAAY5C,EAAgB6C,EAAcC,GACtC,IAAMC,EAA4B,GAClC,IAAK,IAAM5F,KAAYP,KAAKuE,MAAMnB,GAAS,CACvC,IAAIlD,EAAS,CAETA,OAAqB,SAAbK,EAAsB6C,EAAS7C,EACvCM,WAAYb,KAAKuE,MAAMnB,GAAQ7C,GAAU6F,OAAO,SAAC1E,GAA+B,OAC5EuE,GAAQvE,EAAU,IAAMA,EAAU,IAAMwE,GADoCtD,MAC9BlB,EAAU,MAGhEyE,EAAQtD,KAAK3C,GAEjB,OAAOiG,GAGX/B,EAAAjF,UAAAkH,aAAA,SAAaC,EAAmBL,EAAcC,GAA9C,IAAAK,EAAAvG,KACI,OAAOsG,EAAQpF,IAAI,SAACkC,GAAmB,MAAC,CAAEA,OAAQA,EAAQhC,KAAMmF,EAAKP,YAAY5C,EAAQ6C,EAAlDC,OAG3C9B,EAAAjF,UAAAqH,oBAAA,WACI,IAAMC,GAAa,IAAIC,MAAOC,UAAY3G,KAAKsE,kBAC/C,IAAK,IAAMlB,KAAUpD,KAAKuE,MACtB,IAAK,IAAMhE,KAAYP,KAAKuE,MAAMnB,GAC9BpD,KAAKuE,MAAMnB,GAAQ7C,GAAYP,KAAKuE,MAAMnB,GAAQ7C,GAAU6F,OACxD,SAAC1E,GAAyB,OAAAA,EAAU,GAAV+E,KAK9CrC,EApFA,izCCFA,WAGI,SAAAwC,EAAoBvC,EAA0BwC,EAA8BC,GAAxD9G,KAAAqE,UAA0BrE,KAAA6G,YAA8B7G,KAAA8G,gBAFpE9G,KAAA+G,iBAA2C,GAmCvD,OA9BUH,EAAAzH,UAAA6H,KAAN,2GAEI,OAAsB,IADhBV,EAAUrI,OAAOuF,KAAKxD,KAAK+G,mBACrBtG,OACR,IAGS,GAAMT,KAAKqE,QAAQ4C,MAAMX,GAAS,kBAAzClF,EAAOuD,EAAAuC,OACblH,KAAK6G,UAAUnB,OAAOtE,aAG1BwF,EAAAzH,UAAAgI,cAAA,SAAcb,GAEV,IADA,IAAMc,GAAM,IAAIV,MAAOC,UACFpF,EAAA,EAAA8F,EAAAf,EAAA/E,EAAA8F,EAAA5G,OAAAc,IAAS,CAAzB,IAAM6B,EAAMiE,EAAA9F,GACb,IAAKvB,KAAKqE,QAAQa,mBAAmB9B,GACjC,KAAM,CAAEe,QAAS,sBAAsBf,EAAM,aACjDpD,KAAK+G,iBAAiB3D,GAAUgE,IAIxCR,EAAAzH,UAAAmI,yBAAA,SAAyBhB,GACrB,IAAqB,IAAA/E,EAAA,EAAAgG,EAAAjB,EAAA/E,EAAAgG,EAAA9G,OAAAc,IAAS,CAAzB,IAAM6B,EAAMmE,EAAAhG,UACNvB,KAAK+G,iBAAiB3D,KAIrCwD,EAAAzH,UAAAqI,sBAAA,WAEI,IAAMC,GAAa,IAAIf,MAAOC,UAAY3G,KAAK8G,cAC/C9G,KAAK+G,iBAAmBpB,EAAA3E,EAAE0G,OAAO1H,KAAK+G,iBAAkB,SAACY,GAA0B,OAAAA,EAAAF,KAE3Fb,EApCA,GCMAgB,EAAA,oBAAAC,IACY7H,KAAA8H,UAA+B,GA2B3C,OAzBYD,EAAA1I,UAAA4I,WAAR,SAAmBC,EAAaC,GAG5B,OAFKA,IACDA,EAAY,IACND,EAAG,KAAKC,GAGtBJ,EAAA1I,UAAAmE,KAAA,SAAK0E,EAAaC,GACd,IAAMC,EAAKlI,KAAK+H,WAAWC,EAAKC,GAChC,OAAOjI,KAAK8H,UAAUI,IAG1BL,EAAA1I,UAAAN,OAAA,SAAOmJ,EAAaC,EAA+BnB,EAAuBxC,GACtE,IAAM4D,EAAKlI,KAAK+H,WAAWC,EAAKC,GAC1B5D,EAAU,IAAI8D,EAAA,EAAQH,EAAKC,GAC3BpB,EAAY,IAAIuB,EAAU/D,EAASC,GACnC+D,EAAS,IAAIC,EAAOjE,EAASwC,EAAWC,GAG9C,OADA9G,KAAK8H,UAAUI,GAAM,CAAE7D,QAAOA,EAAEwC,UAASA,EAAEwB,OAAMA,GAC1CrI,KAAK8H,UAAUI,IAG1BL,EAAA1I,UAAAoJ,KAAA,WACI,OAAOtK,OAAO8H,OAAO/F,KAAK8H,YAGlCD,EA5BA,q5CCOA,WAWI,SAAAW,EAAoBnE,EAA0BgE,EAAwBvB,GAAlD9G,KAAAqE,UAA0BrE,KAAAqI,SAAwBrI,KAAA8G,gBAR9D9G,KAAAyI,QAA0C,GAM1CzI,KAAA0I,cAAgD,GA2H5D,OAtHUF,EAAArJ,UAAAwJ,aAAN,SAAmBC,iGACf,OAAIA,KAAQ5I,KAAK0I,cACb,GAAO1I,KAAK0I,cAAcE,MAGxBC,EAAyBlD,EAAA3E,EAAEsC,KAAKrF,OAAO8H,OAAO/F,KAAKyI,SAAU,SAACI,GAA2B,OAAAA,EAAOD,OAAPA,MAC7D,YAAlBC,EAAOC,QAA4C,GAApBD,EAAOE,UAG3C,GAAM/I,KAAKgJ,SAASJ,IAH3B,aAGA,SAAOjE,EAAAuC,eAIP,OADA2B,EAAOlB,eAAgB,IAAIjB,MAAOC,UAClC,GAAOkC,SAITL,EAAArJ,UAAA6J,SAAN,SAAeJ,uGACXpD,QAAQyD,MAAM,qBAAsBL,GAI9BvE,EAAU,IAAI8D,EAAA,EAAQnI,KAAKqE,QAAQ2D,sBAErC,gCAAM3D,EAAQE,MAAM,4BAA6BqE,kBAAjDjE,EAAAuC,oBAGA,iBAAU9F,OAAQ8H,EAAM9H,KAAKmB,SAAS,UAMlC,MAAM2G,qBAGG,SAAM7E,EAAQ4C,MAAM,CAAC,sCAGtC,GAHMkC,EAAWxE,EAAAuC,OAEX2B,EAAyBO,KAAKC,MAAMF,EAASpD,OAAO,GAAGZ,UAAU,GAAG3G,OACtEmH,EAAA3E,EAAE4E,QAAQiD,GACV,KAAM,CAAE1E,QAAS,wEACrB0E,EAAOD,KAAOA,EACdC,EAAOlB,eAAgB,IAAIjB,MAAOC,UAElCnB,QAAQyD,MAAM,qCAAsCJ,GAC9B,YAAlBA,EAAOC,OAAP,OAEA9I,KAAK0I,cAAcE,GAAQC,gBAK3B,OAFA7I,KAAKyI,QAAQI,EAAO/K,MAAQ+K,EAE5B,GAAM7I,KAAKqE,QAAQiF,oBAAoB,oBAAvC3E,EAAAuC,wBAGJ,SAAO2B,SAGXL,EAAArJ,UAAAoK,sBAAA,WAGI,IAAMC,GAAe,IAAI9C,MAAOC,UAAY3G,KAAK8G,cACjD9G,KAAKyI,QAAU9C,EAAA3E,EAAE0G,OAAO1H,KAAKyI,QAAS,SAACI,GAA2B,OAAAA,EAAOlB,cAAP6B,KAGhEhB,EAAArJ,UAAAsK,UAAN,iIACI,OAAI9D,EAAA3E,EAAE4E,QAAQ5F,KAAKyI,SACf,IAIJ,GAAMzI,KAAKqE,QAAQiF,oBAAoB,oBAGvC,IAHAI,EAAAxC,OAEIZ,EAAoB,cACbuC,GAQP,IAPA,IAMIc,GAAoB,EACGpI,EAAA,EAAAqI,EAPL,CAClB,oBAAoBf,EAAO/K,KAAI,UAC/B,oBAAoB+K,EAAO/K,KAAI,aAC/B,oBAAoB+K,EAAO/K,KAAI,WAIRyD,EAAAqI,EAAAnJ,OAAAc,IAAe,CAArC,IAAMsI,EAAYD,EAAArI,GACfuI,EAAKzF,QAAQa,mBAAmB2E,GAChCvD,EAAQzD,KAAKgH,GAEbF,GAAoB,EAI5B,IAAKA,GAAuC,aAAlBd,EAAOC,OAAuB,CACpDtD,QAAQC,KAAK,UAAUoD,EAAO/K,KAAI,2BAA2B+K,EAAOC,QACpE,IAAMiB,EAAiBlB,EAAOvI,KAAKY,IAAI,SAAA8I,GAAQ,0BAAoBnB,EAAO/K,KAAI,SAA/BkM,WACxCF,EAAKrB,QAAQI,EAAO/K,MAC3BgM,EAAKzB,OAAOf,yBAAyByC,YApB7CxI,EAAA,EAAqBoD,EAAA1G,OAAO8H,OAAO/F,KAAKyI,SAAnBlH,EAAAoD,EAAAlE,OAAAc,IAAVsH,EAAMlE,EAAApD,KAANsH,GAwBX,OAAuB,IAAnBvC,EAAQ7F,OACR,IAEa,GAAMT,KAAKqE,QAAQ4C,MAAMX,WAC1C,IADM6C,EAAWO,EAAAxC,OACjB+C,EAAA,EAAqBC,EAAAf,EAASpD,OAATkE,EAAAC,EAAAzJ,OAAAwJ,IAAV7G,EAAM8G,EAAAD,GACPE,EAAe/G,EAAOtF,KAAKuC,MAAM,KACjC+J,EAAcD,EAAa,GAC3BE,EAAeF,EAAa,IAE5BtB,EAAS7I,KAAKyI,QAAQ2B,KAMnB,CAAC,SAAU,YAAa,UAAU7H,SAAS8H,KAChDxB,EAAOwB,GAAgBjH,EAAO+B,UAAU,GAAG3G,uBAI3DgK,EApIA,q0CCNA8B,EAAA,WAewB,SAAAC,EAAAC,EAAAC,EAAA1K,EAAA2K,GAA+B1K,KAAAwK,mBAAyBxK,KAAAyK,aAA0BzK,KAAAD,cAClGC,KAAK0K,YAAOA,EACZ1K,KAAKlC,KAAA0M,EAAkB1M,KACvBkC,KAAK2K,gBAAUH,EAAAG,gBAAE3K,KAAA4K,QAAA,CAAjBC,eAAA,oBAEoC,iBAA3BL,EAAQM,WAAoCN,EAAjDM,UAAArK,OAAA,IACHT,KAAA4K,QAAA,cAAAJ,EAAAM,WAGD9K,KAAK+K,eAAAC,EAAuBhK,EAAAiK,eAAIT,EAAeU,SAAiBC,cAAS,MACzEnL,KAAKoL,qBAAgBJ,EAAIhK,EAAAiK,eAAeT,EAAiBU,SAASG,oBAAlE,OACArL,KAAK8G,cAAAkE,EAAoBhK,EAAAiK,eAAIT,EAAeU,SAAiBI,aAAS,OAEtEtL,KAAAsE,kBAAA0G,EAAQhK,EAAAiK,eAAoBT,EAAoBU,SAAhDK,iBAAA,MACApD,EAA4B,EAAAqD,kBAAAxL,KAAAyL,UAA5B1M,KAAAiB,MACAA,KAAK0L,iBAAkB,IAAIC,EAAgB,EAE3C3L,KAAI4L,gBAAA,IAAJA,EACgB,EAAoB5L,KAArBD,aACXC,KAAK+K,eAAA,GAALc,YACA7L,KAAW8L,UAAM/M,KAAAiB,MAALA,KAAA+K,gBACnB/K,KAAAoL,qBAAA,GAAAS,YAAA7L,KAAA+L,iBAAAhN,KAAAiB,WAAAoL,sBApCL,OAeIb,EAAAyB,QAAoB,oBAA+B,aAAyB,cAA0B,eAwBlGzB,EAAApL,UAAA2M,UAAA,WACK,aAAMvK,EAAQ,EAAAoD,EAAA3E,KAAd0L,iBAAAnD,OAAAhH,EAAAoD,EAAAlE,OAAAc,IAAA,CACD,IAAA0K,EAAStH,EAATpD,GACA0K,EAASpF,UAAOL,sBAChByF,EAAS5D,OAAKb,wBACjB0E,EAAArJ,KAAAoJ,EAAA5D,OAAArB,QANL,OAAAmF,QAAAC,IAAAF,IAWI3B,EAAApL,UAAA4M,iBAAA,WACK,aAAMxK,EAAQ,EAAAoD,EAAA3E,KAAd0L,iBAAAnD,OAAAhH,EAAAoD,EAAAlE,OAAAc,IAAA,CACD,IAAA0K,EAAStH,EAAApD,GACT0K,EAASI,eAAc9C,wBAC1B2C,EAAArJ,KAAAoJ,EAAAI,eAAA5C,aALL,OAAA0C,QAAAC,IAAAF,IAUW3B,EAAApL,UAAAmN,oBAAA,SAAApM,GACP,IAAI8H,EAAA/J,OAAWsO,EAAf,EAAItO,CAAJ+B,KAAA0K,YAAAxK,EAAAF,KAAAwK,kBAAA,mCAFJ,OAIQyB,KACAA,EAASjM,KAAA0L,iBAAqB7M,OAAAmJ,OAAJpF,EAA4B5C,KAAA8G,cAAkB9G,KAAQsE,oBACnF+H,eAAA,IAAAG,EAAAP,EAAA5H,QAAA4H,EAAA5D,OAAArI,KAAA8G,gBANLmF,sHAWI,OAEO,OADPQ,EAAQ9B,gBAAe3K,KAAvB2K,gBACO8B,EAAA7B,QAAA5K,KAAA4K,QAAA,yCAAP,mKAIM,OACAjG,EAAA1G,OAAUsO,EAAY,EAAtBtO,CAA2B+B,KAAA0K,YAA3B,GAAA1K,KAAAwK,kBAAAxC,EAAArD,EAAA,GAAAsD,EAAAtD,EAAA,mCAEF,0DACA,mBAAS,CAAmBmE,OAAO,UAA4B3E,QAAO,yBAAtEuI,MAAA,mBAGA,OAAAzC,EAAA/C,OAAA,GACI,CACA4B,OAAO,QACP3E,QAAO,qBAAAE,EAAA2D,IAHX0E,MAAA,gHASJ,OAAAC,EAAA3M,KAAA,SAAA2E,GAAA,kBAIA4F,EAAmBpL,UAAOyN,2BAAM,SAAAvI,EAAAwE,EAAAvD,GAA3B,QAAM/D,EAAI,EAAAoD,EAAVkE,EAAAvI,KAAAiB,EAAAoD,EAAAlE,OAAAc,IAAA,CACD,IAAMyI,EAAMrF,EAAGpD,GACT6B,EAAA,oBAAyByF,EAAA/K,KAAmB,SAAlDkM,EACI6C,EAAcxI,EAAIa,mBAAyB9B,GAElD,GAAAyJ,KAAAxH,QAAAwH,EAAAxH,OAAAC,eAAA,OAAAlC,EANL,aAWImH,EAAIpL,UAAkB2N,wBAAa,SAAYzI,EAAAnE,EAAA2I,GAC3C,GAAA3I,EAAO6D,SAAYgJ,EAAQ,EAAA/I,WAAI,OAAA6E,EAAAvI,KAAAY,IAAA,SAAoB8I,GAAnD,0BAAAnB,EAAA/K,KAAA,SAAAkM,IAGM,GAAA9J,EAAS6D,SAAKgJ,EAAoC,EAAA9I,QAAQ,CAIpD,GAHRb,EACApD,KAAA4M,2BAEMvI,EAAAwE,EAAA,aAAW,OAAAzF,GAAA,MAAjBe,QAAA,sDAGE,GAAAjE,EAAS6D,SAAKgJ,EAAoC,EAAA7I,MAAQ,CAChE,IAAId,EAGQ,GAHRA,EACApD,KAAA4M,2BAEMvI,EAAAwE,EAAA,UAAW,OAAAzF,GAAA,MAAjBe,QAAA,kEAhBZ,iJAsBU,SACe,oCAAa,KAAA5C,EAAAoD,EAAAlE,QAAA,SAAvB,GAEH,IADJP,EAAIyE,EAAOpD,IACPyL,OAAA9M,EAAA0I,KAAA,SAIE,GAEF,QADJA,EAAI1I,EAAK0I,KAALtG,QACA7B,OAAA,SAEA,GACAwL,EAAMjM,KAANsM,oBAAApM,6BAIS,kEAFT,OAKU,GAAe,yBAAR4I,QAAyC,aAAjCD,EAAwBC,OAOrC,MAAR3E,QAAA,sBAAA0E,EAAAoE,eANA3G,EAAStG,KAAT8M,wBAAAb,EAAA5H,QAAAnE,EAAA2I,GAEIoD,EAAS5D,OAAAlB,cAAmBb,GAChC4G,EAASjB,EAAKpF,UAAdR,aAAuBC,EAAA6G,EAAgBC,MAArBnH,KAA+BoH,UAAjDF,EAAAC,MAAAlH,GAAAmH,WALJC,EAOKzK,KAAA0K,MAAAD,EAAAtN,KAAA4L,gBAAA9H,UAAAoJ,EAAAhN,mCAOCsN,MAANtN,EAAAsN,QA/Ba,wBAmCrB,gBAAS,CAATpM,KAAAkM,UAjKR/C,EAAA,8TCRAkD,EAAoD,SAAAC,mBAGhD,IAAAnH,EAAAmH,EAAAhQ,KAAAsC,KAAA2N,EAAAC,IAAA5N,YAOIuG,EAAKsH,QAAO,GACZtH,EAAKrG,OAAO0I,KAAMrC,EAAKrG,OAAO0I,MAAO,GAErCrC,EAAKrG,OAAL6D,OACIwC,EAAArG,OAAA6D,QAAAwC,EAAAuH,mBAAEvH,EAAIrG,OAAE8H,IAAAzB,EAARrG,OAAA8H,KAAA,KAAuBzB,EAAAsH,QAAO,EADnB/K,KAEX,cAAEtE,MAAMuO,EAAR,EAAA/I,YAAiB,CAFNlB,KAGX,QAAEtE,MAAMuO,EAAR,EAAA7I,OAAmB,CAHvBpB,KAAA,uCARJiL,EAAAC,EAAAN,GACAM,EACIhC,QAAc,UAAd,aAeIgC,EAAO7O,UAAa2O,iBAApB,WACH,MAA+B,UAFhC9N,KAEOiO,UAASC,MAALhM,KACA6K,EAAA,EAAa7I,MACvB,YAAAlE,KAAAiO,UAAAC,MAAAhM,iCAMJ8L,EAFD7O,UAAAgP,kBAAA,qCA7BgDH,EAApDI,YAAA,oDAAoD,cCHpDjR,EAAAU,EAAA4B,EAAA,+BAAA4O,IAAAlR,EAAAU,EAAA4B,EAAA,yCAAA6O,IAAAnR,EAAAU,EAAA4B,EAAA,+BAAA6K,IACAnN,EAAAU,EAAA4B,EAAA,8BAAAgO,IAEA,IAAAY,aACW,SAAAA,YADXA,EAAAD,YAAA,iDAIAE,aACW,SAAAA,YADXA,EAAAF,YAAA,gFCPA,aAAAjR,EAAAU,EAAA4B,EAAA,sBAAA8O,IAAApR,EAAAU,EAAA4B,EAAA,sBAAA+O,IAAArR,EAAAU,EAAA4B,EAAA,sBAAAgP,IAEA,IAAA/O,EAAAvC,EAAA,GACAwC,EAAAxC,EAAA6B,EAAAU,qBAKI,IAAAgP,EAAWC,EAAQnQ,yBACf,IAAI+H,EAAMvG,KAMV,OADKA,KAAA4O,gBAAc5O,KAAnB4O,cAAkC,IAClC5O,KAAO4O,cAAKC,GAAgC7O,KAAA4O,cAAYC,IACpD7O,KAAA4O,cAAKC,GAALH,EAAAnB,MAAAvN,KAAA8O,WACA9O,KAAO4O,cAAPC,GAAAE,KAAA,SAAA7B,GAEA,OAJG3G,EAGJqI,cAAYC,GAAA,KACN3B,GACL,SAAM8B,GAZd,MAOIzI,EAAAqI,cAAAC,GAAA,KAPJG,MAmBH,SAAAR,EAAAS,GAEK,QAAUtP,EAAsCqB,EAAAkO,SAAAD,MAAA3M,OAAA7B,OAAA,GA4BlD,SAAOgO,EAAP/D,EAAAxK,EAAAsK,GACA,IASYvC,EATRkH,cA3BJ,IAAIC,EAAY,GAEZ,OAAA1E,EAAA0E,2CAKA,IAAIC,EAAaC,EAAKC,QAAY/Q,OAEV,WAAhB6Q,GAAyB1P,EAAwCqB,EAAAwO,QAAAH,EAAA,eAAwBA,EAAnB,OAAAC,EAAAG,SAAtEH,EAAA7C,QAAAiD,MAAA,GAAAxO,IAAA,SAAAyO,GADJ,OAEOA,EAAAnR,QAGV8Q,EAAAG,UAIGL,EAAOE,EAAAxR,MAAA,CAFXgF,KAAAwM,EAAAC,QAAAzM,KAVJtE,MAAA6Q,KAmBYD,MAGZQ,CAAAlF,GAEI1C,EAAC,GAOK,GAANwG,EAAAtO,EAAA8H,KAAA,GAAAmH,EAAAnH,MAAAwG,EAAAW,EAAAnH,IAAAxJ,OAAAwJ,EAAAmH,EAAAnH,IAAAxJ,UAAA,IAAAgQ,EAAAhE,EAAAxC,KAAA,MAEJ7D,QAAK,mCAFD6D,EAAAwC,EAAAxC,WAAA9H,EAAA8H,mzDCzDR6H,EAQyB,WAAsB,SAAAA,EAAA7H,EAAAC,GAJnCjI,KAAAgI,MACAhI,KAAAiI,wCACAjI,KAAA8P,WAGJ,aAIC9H,EAAAzF,SAAA,YACJvC,KAAAnC,EAAA,0HAIO,OAAA8G,EAAAoL,OAEoB,cAAAC,EAAAhQ,KAAAgI,IAAA,mDAAM,GAAN6H,EAAArE,kBAAA,UACxB,OAEI,SAAK7G,EAALuC,OAAAlH,KAAAqE,QAAA4L,EAAA7O,KAAAiD,QAAArE,KAAAiI,UACM,GAEF4H,EAAQrE,kBAAA,CAAExD,IAAAhI,KAAMgI,IAAA,UAAAhI,KAARqE,QAAA,IAAArE,KAAAnC,EAAA,QAAiCqS,OAAK,CAAtCpS,KAAA,wBAFZU,MAAAwB,KAAAiI,cADA,GACA,0KAQC8H,OAAD,cAAA/P,KAAAqE,QAAA,GACA,GAAW,0DAIJ,OAAAM,EAAAwL,KAAAtN,KAAA,kBAAP,aAAO,oBAEH,OAAAqG,EAAAvE,EAAAuC,OAAAvH,EAAAqB,EAAAkO,SAAAhG,EAAA9H,OAAA8H,EAAA9H,KAAAmB,SAAA,UAAA5C,EAAAqB,EAAAoP,SAAAlH,EAAA9H,OAAA8H,EAAA9H,KAAA+C,QAAA5B,SAAA,+BAGAiD,QAAAyD,MAAA,4CAAW,0BAHX,GAGA,UACO,OAAAtE,EAAAuC,OAAA,QAAP,aAAO,wMASX,OAAAvC,EAAMoL,OACV,OAGgB,OAAAG,EAAA,GAAAG,IAAAH,EAAAG,UAAW,+FACN,OAAA1L,EAAAoL,OAAA,aAAM,GAEnBF,EAAKrE,kBAAA,CAFQxD,IAAA,kDAKjB,aAAO,GAAPrD,EAAAuC,6BAGJ,OAEI,eADJlH,KAAAsQ,oBAAqB,GACjB/O,EAAK,EAAA8F,EAAAf,EAA2B/E,EAAhC8F,EAAA5G,OAAAc,IACH6B,EAAAiE,EAAA9F,sDAKJsO,EAFD1Q,UAAA+F,mBAAA,SAAA9B,uCAMCyM,EAFD1Q,UAAAoR,kBAAA,mLAKmB,OAAA5L,EAAAoL,OAAA,aAAW,+FACL,OAAApL,EAAAoL,OAAA,aAAM,GAEnBF,EAAQrE,kBAAA,CAAExD,IAAAhI,KAAMgI,IAAA,UAAAhI,KAAAqE,QAAA,IAAArE,KAAAnC,EAAA,QAARqS,OAAA,CAFKpS,KAAAsF,MAIjB,aAAO,GAAPuB,EAAAuC,sCAMA,IAFJsJ,EAAK7L,EAAAuC,OACLlH,KAAA8P,WAAoB1M,GAAA,GAChB7B,EAAK,EAAAkP,EAALD,EAA8BjP,EAAAkP,EAAYhQ,OAA1Cc,IACHmP,EAAAD,EAAAlP,yCACD,MAAY,6BAGesO,EAAA1Q,UAAA8H,MAAA,SAAAX,EAAAqK,eAA8B,IAAAA,iGAC5C,OAAAjH,EAAAqG,OAAA,aAAW,+FACH,OAAApL,EAAAoL,OAAA,aAAM,GAEnBF,EAAQrE,kBAAA,CAAExD,IAAAhI,KAAOgI,IAAO,UAAPhI,KAAAqE,QAAA,IAAArE,KAAAnC,EAAA,QAATqS,OAAA,CAFKU,MAAAtK,EAAAuK,KAAA,SAIjB,aAAO,GAAPlM,EAAAuC,4BAGA,GAAA9F,EAAAsI,EAAAxC,QAAAyJ,EAAA,qCAEgC,cAAApP,EAAAoD,EAAAlE,OAExB,IADJ2C,EAAIuB,EAAOpD,IACP4D,UAAA1E,OAAA,GACuF,GACvF,OAAO2C,EAAP+B,UAAoB,GAAA5E,WAApB,IAAA6C,EAAA+B,UAAA,GAAA5E,UACA6C,EAAA+B,UAAA,GAAAC,aAAA,aAIA0L,EAAA9Q,KAAA8P,WAAA1M,EAAAtF,OAAA,GACkB,GAAW,+BAVL,0EAaW,cAAAmM,EAAAC,EAAAzJ,WAE9ByJ,EAAAD,IAAD7E,aAAA0L,EAAAvQ,cAAA6E,cAAA2L,EAAA,GAEkB,GAAW,gCAJE,GACnC,GAGI,OAEAD,EAAApH,EAAAxC,mGAMhB,qIAIO,OAAAvC,EAAAoL,OAAA,aAAW,+FACG,OAAApL,EAAAoL,OAAA,aAAM,GAEnBF,EAAQrE,kBAAA,CAAExD,IAAAhI,KAAMgI,IAAR,UAAAhI,KAAAqE,QAAA,IAAArE,KAAAnC,EAAA,QAAgBqS,OAAK,CAArBpS,KAAAsF,EAFK5E,YAIjB,aAAO,GAAPmG,EAAAuC,qBALJ,aAAO,gIAUA,OAAAvC,EAAAoL,OAAA,aAAW,+FACG,OAAApL,EAAAoL,OAAA,aAAM,GAEnBF,EAAQrE,kBAAA,CAAExD,IAAAhI,KAAQgI,IAAA,UAAAhI,KAAAqE,QAAA,IAAArE,KAAAnC,EAAA,WAAVqS,OAAA,CAFKG,aAIjB,aAAO,GAAP1L,EAAAuC,qBALJ,aAAO,mBAQf8J,EAAA,CAAAC,EAAA,GAAApB,EAAA1Q,UAAA,wBAlJyB,YClBzB,SAAA7B,EAAAD,kBCAA,SAAAC,EAAAD","file":"./datasources/bpftrace/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 134);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export type Datapoint = [number | string, number];\n\nexport interface TimeSeriesData {\n    target: string;\n    datapoints: Datapoint[]\n}\n\nexport interface TableData {\n    columns: any[]\n    rows: (string | number)[][]\n    type: string\n}\n\nexport type PanelData = TimeSeriesData | TableData;\n\nexport enum TargetFormat {\n    TimeSeries = \"time_series\",\n    Table = \"table\",\n    Heatmap = \"heatmap\",\n}\n\nexport interface DatastoreQueryResultRow {\n    metric: string;\n    data: TimeSeriesData[];\n}\n\nexport type DatastoreQueryResult = DatastoreQueryResultRow[];\n","import _ from 'lodash';\nimport { Datapoint, TargetFormat, TimeSeriesData, DatastoreQueryResult, PanelData, TableData, DatastoreQueryResultRow } from './types';\nimport { isBlank } from './utils';\n\nexport default class Transformations {\n\n    constructor(private templateSrv: any) {\n    }\n\n    getLabel(target: string, legendFormat: string) {\n        if (isBlank(legendFormat)) {\n            return target;\n        }\n        else {\n            const targetSpl = target.split('.');\n            let vars = {\n                instance: { value: target },\n                metric0: { value: targetSpl[targetSpl.length - 1] }\n            };\n            return this.templateSrv.replace(legendFormat, vars);\n        }\n    }\n\n    updateLabel(target: any, targetResult: TimeSeriesData) {\n        return { target: this.getLabel(targetResult.target, target.legendFormat), datapoints: targetResult.datapoints }\n    }\n\n    transformToTimeSeries(queryResult: DatastoreQueryResult, target: any): TimeSeriesData[] {\n        const targetResults: TimeSeriesData[] = _.flatten(queryResult.map((row: DatastoreQueryResultRow) => row.data));\n        return targetResults.map(this.updateLabel.bind(this, target));\n    }\n\n    transformToHeatmap(queryResult: DatastoreQueryResult) {\n        const targetResults: TimeSeriesData[] = queryResult[0].data;\n        for (const target of targetResults) {\n            // target name is the upper bound\n            const match = target.target.match(/^(.+?)\\-(.+?)$/);\n            if (match) {\n                target.target = match[2];\n            }\n\n            // round timestamps to one second - the heatmap panel calculates the x-axis size accordingly\n            target.datapoints = target.datapoints.map(\n                (dataPoint: Datapoint) => [dataPoint[0], Math.floor(dataPoint[1] / 1000) * 1000]\n            );\n        }\n        return targetResults;\n    }\n\n    transformStringToTable(tableText: string) {\n        let table: TableData = { columns: [], rows: [], type: 'table' };\n        let lines = tableText.split('\\n');\n        let columnSizes: [number, number | undefined][] = [];\n\n        for (let line of lines) {\n            line = line.trim();\n            if (line.length === 0 || line.includes(\"Ctrl-C\"))\n                continue;\n\n            if (table.columns.length === 0) {\n                let tableHeaders = line.split(/\\s\\s+/);\n                for (let i = 0; i < tableHeaders.length; i++) {\n                    const colStartAt = line.indexOf(tableHeaders[i]);\n                    const colEndAt = i + 1 < tableHeaders.length ? line.indexOf(tableHeaders[i + 1]) - 1 : undefined;\n                    table.columns.push({ text: tableHeaders[i] });\n                    columnSizes.push([colStartAt, colEndAt]);\n                }\n            }\n            else {\n                let row = columnSizes.map((colSize: any) => line.substring(colSize[0], colSize[1]).trim());\n                table.rows.push(row);\n            }\n        }\n        return table;\n    }\n\n    transformMultipleMetricsToTable(queryResult: DatastoreQueryResult) {\n        let table: TableData = { columns: [], rows: [], type: 'table' };\n        table.columns = queryResult.map((queryResultRow) => ({ text: queryResultRow.metric }));\n        const instances = Object.keys(queryResult[0].data).sort((a, b) => parseInt(a) - parseInt(b));\n        for (const instance of instances) {\n            const row: (string | number)[] = [];\n            for (const queryResultRow of queryResult) {\n                const target = queryResultRow.data.find((target: TimeSeriesData) => target.target === instance);\n                if (target && target.datapoints.length > 0)\n                    row.push(target.datapoints[target.datapoints.length - 1][0]);\n                else\n                    row.push('?');\n            }\n            table.rows.push(row);\n\n        }\n        return table;\n    }\n\n    transformToTable(queryResult: DatastoreQueryResult) {\n        if (queryResult.length > 1) {\n            return this.transformMultipleMetricsToTable(queryResult);\n        }\n        else if (queryResult.length === 1) {\n            const targets = queryResult[0].data;\n            if (targets.length > 0 && targets[0].datapoints.length > 0)\n                return this.transformStringToTable(targets[0].datapoints[0][0] as string);\n        }\n        return { columns: [], rows: [], type: 'table' };\n    }\n\n    transform(queryResult: DatastoreQueryResult, target: any): PanelData[] {\n        if (target.format === TargetFormat.TimeSeries)\n            return this.transformToTimeSeries(queryResult, target);\n        else if (target.format === TargetFormat.Heatmap)\n            return this.transformToHeatmap(queryResult);\n        else if (target.format == TargetFormat.Table)\n            return [this.transformToTable(queryResult)];\n        else\n            throw { message: `Invalid target format '${target.format}', possible options: ${TargetFormat.TimeSeries}, ${TargetFormat.Heatmap}, ${TargetFormat.Table}` };\n    }\n\n\n}\n","import _ from 'lodash';\nimport Context from './context';\nimport { Datapoint, TimeSeriesData } from './types';\n\ntype StoredDatapoint = [number | string | undefined, number, number?];\n\nexport default class DataStore {\n    private store: Record<string, Record<string, StoredDatapoint[]>> = {}; // store[metric][instance] = [val,ts,origVal]\n\n    constructor(private context: Context, private localHistoryAgeMs: number) {\n    }\n\n    private ingestCounterMetric(instanceStore: StoredDatapoint[], instance: any, pollTimeEpochMs: number) {\n        // first value: store it as undefined, to be filtered by queryTimeSeries()\n        // subsequent values: perform rate conversation\n        if (instanceStore.length > 0) {\n            let [, prevTimeMs, prevOrigVal] = instanceStore[instanceStore.length - 1];\n            const deltaSec = (pollTimeEpochMs - prevTimeMs) / 1000;\n            instanceStore.push([(instance.value - prevOrigVal!) / deltaSec, pollTimeEpochMs, instance.value]);\n        }\n        else {\n            instanceStore.push([undefined, pollTimeEpochMs, instance.value]);\n        }\n    }\n\n    private ingestMetric(metricStore: Record<string, StoredDatapoint[]>, metric: any, pollTimeEpochMs: number) {\n        const metadata = this.context.findMetricMetadata(metric.name);\n        if (!metadata) {\n            console.info(`skipping ingestion of ${metric.name}: metadata not available`);\n            return;\n        }\n\n        for (const instance of metric.instances) {\n            // for the bpftrace output variable, always recreate the metric store (do not store history)\n            if (!(instance.instanceName in metricStore) || (metadata.labels && metadata.labels.metrictype === \"output\")) {\n                metricStore[instance.instanceName] = [];\n            }\n\n            if (metadata.sem === \"counter\") {\n                this.ingestCounterMetric(metricStore[instance.instanceName], instance, pollTimeEpochMs);\n            }\n            else {\n                metricStore[instance.instanceName].push([instance.value, pollTimeEpochMs]);\n            }\n        }\n    }\n\n    ingest(data: any) {\n        if (_.isEmpty(data))\n            return;\n\n        const pollTimeEpochMs = data.timestamp.s ? data.timestamp.s * 1000 + data.timestamp.us / 1000 : data.timestamp * 1000;\n        for (const metric of data.values) {\n            if (!this.store[metric.name]) {\n                this.store[metric.name] = {};\n            }\n\n            this.ingestMetric(this.store[metric.name], metric, pollTimeEpochMs);\n        }\n    }\n\n    queryMetric(metric: string, from: number, to: number) {\n        const results: TimeSeriesData[] = [];\n        for (const instance in this.store[metric]) {\n            let target = {\n                // for metrics without instance domains, show metric name\n                target: instance === \"null\" ? metric : instance,\n                datapoints: this.store[metric][instance].filter((dataPoint: StoredDatapoint) => (\n                    from <= dataPoint[1] && dataPoint[1] <= to && dataPoint[0] != undefined\n                )) as Datapoint[]\n            };\n            results.push(target);\n        }\n        return results;\n    }\n\n    queryMetrics(metrics: string[], from: number, to: number) {\n        return metrics.map((metric: string) => ({ metric: metric, data: this.queryMetric(metric, from, to) }));\n    }\n\n    cleanExpiredMetrics() {\n        const keepExpiry = new Date().getTime() - this.localHistoryAgeMs\n        for (const metric in this.store) {\n            for (const instance in this.store[metric]) {\n                this.store[metric][instance] = this.store[metric][instance].filter(\n                    (dataPoint: Datapoint) => dataPoint[1] > keepExpiry\n                );\n            }\n        }\n    }\n}\n","import _ from \"lodash\";\nimport Context from \"./context\";\nimport DataStore from \"./datastore\";\n\nexport default class Poller {\n    private requestedMetrics: Record<string, number> = {}; // {metric: lastRequested}\n\n    constructor(private context: Context, private datastore: DataStore, private keepPollingMs: number) {\n    }\n\n    async poll() {\n        const metrics = Object.keys(this.requestedMetrics);\n        if (metrics.length == 0) {\n            return;\n        }\n\n        const data = await this.context.fetch(metrics, true);\n        this.datastore.ingest(data);\n    }\n\n    ensurePolling(metrics: string[]) {\n        const now = new Date().getTime()\n        for (const metric of metrics) {\n            if (!this.context.findMetricMetadata(metric))\n                throw { message: `Cannot find metric ${metric} on PMDA.` };\n            this.requestedMetrics[metric] = now\n        }\n    }\n\n    removeMetricsFromPolling(metrics: string[]) {\n        for (const metric of metrics) {\n            delete this.requestedMetrics[metric];\n        }\n    }\n\n    cleanupExpiredMetrics() {\n        // clean up any not required metrics\n        const pollExpiry = new Date().getTime() - this.keepPollingMs;\n        this.requestedMetrics = _.pickBy(this.requestedMetrics, (lastRequested: number) => lastRequested > pollExpiry);\n    }\n}\n","import Context from \"./context\";\nimport DataStore from \"./datastore\";\nimport Poller from './poller';\n\nexport interface Endpoint {\n    context: Context;\n    poller: Poller;\n    datastore: DataStore;\n}\n\nexport default class EndpointRegistry<T extends Endpoint> {\n    private endpoints: Record<string, T> = {};\n\n    private generateId(url: string, container?: string) {\n        if (!container)\n            container = \"\";\n        return `${url}::${container}`;\n    }\n\n    find(url: string, container?: string) {\n        const id = this.generateId(url, container);\n        return this.endpoints[id];\n    }\n\n    create(url: string, container: string | undefined, keepPollingMs: number, localHistoryAgeMs: number) {\n        const id = this.generateId(url, container);\n        const context = new Context(url, container);\n        const datastore = new DataStore(context, localHistoryAgeMs);\n        const poller = new Poller(context, datastore, keepPollingMs);\n\n        this.endpoints[id] = { context, datastore, poller } as T;\n        return this.endpoints[id];\n    }\n\n    list() {\n        return Object.values(this.endpoints);\n    }\n\n}","import _ from 'lodash';\nimport Context from \"../lib/context\";\nimport Poller from '../lib/poller';\n\nexport interface BPFtraceScript {\n    // from PMDA\n    readonly name: string;\n    readonly vars: string[];\n    status: string;\n    exit_code: number | null;\n    output: string;\n\n    // additional properties by ScriptRegistry\n    code: string;\n    lastRequested: number;\n}\n\nexport default class ScriptRegistry {\n\n    // currently active (requested) scripts\n    private scripts: Record<string, BPFtraceScript> = {}; // {name: BPFtraceScript}\n\n    // a script which failed once will fail every time\n    // store them in a separate object, otherwise the syncState()\n    // will clean them (as they don't exist on the PMDA)\n    // and the datasource will keep re-adding them\n    private failedScripts: Record<string, BPFtraceScript> = {}; // {code: BPFtraceScript}\n\n    constructor(private context: Context, private poller: Poller, private keepPollingMs: number) {\n    }\n\n    async ensureActive(code: string) {\n        if (code in this.failedScripts) {\n            return this.failedScripts[code];\n        }\n\n        const script: BPFtraceScript = _.find(Object.values(this.scripts), (script: BPFtraceScript) => script.code === code);\n        if (!script || (script.status === \"stopped\" && script.exit_code == 0)) {\n            // if script doesn't exist or script got stopped gracefully (exit_code == 0)\n            // register script\n            return await this.register(code);\n        }\n        else {\n            script.lastRequested = new Date().getTime();\n            return script;\n        }\n    }\n\n    async register(code: string) {\n        console.debug(\"registering script\", code);\n\n        // create temporary context, required so that the PMDA can identify\n        // the client who sent the pmStore message\n        const context = new Context(this.context.url);\n        try {\n            await context.store(\"bpftrace.control.register\", code);\n        }\n        catch (error) {\n            if (error.data && error.data.includes(\"-12400\")) {\n                // PMDA returned PM_ERR_BADSTORE\n                // next fetch will show error reason\n            }\n            else {\n                // other error\n                throw error;\n            }\n        }\n        const response = await context.fetch([\"bpftrace.control.register\"]);\n\n        const script: BPFtraceScript = JSON.parse(response.values[0].instances[0].value);\n        if (_.isEmpty(script))\n            throw { message: \"PMDA returned an empty response when registering this script.\" };\n        script.code = code;\n        script.lastRequested = new Date().getTime();\n\n        console.debug(\"bpftrace.control.register response\", script);\n        if (script.status === \"stopped\") {\n            // script failed due to no variables found, invalid name etc.\n            this.failedScripts[code] = script;\n        }\n        else {\n            this.scripts[script.name] = script;\n            // script has registered new metric names, fetch them\n            await this.context.fetchMetricMetadata(\"bpftrace\");\n        }\n\n        return script;\n    }\n\n    cleanupExpiredScripts() {\n        // clean up any not required scripts\n        // otherwise they get synced forever\n        const scriptExpiry = new Date().getTime() - this.keepPollingMs;\n        this.scripts = _.pickBy(this.scripts, (script: BPFtraceScript) => script.lastRequested > scriptExpiry);\n    }\n\n    async syncState() {\n        if (_.isEmpty(this.scripts)) {\n            return;\n        }\n\n        // sync available metrics on the PMDA\n        await this.context.fetchMetricMetadata(\"bpftrace\");\n\n        let metrics: string[] = [];\n        for (const script of Object.values(this.scripts)) {\n            const state_metrics = [\n                `bpftrace.scripts.${script.name}.status`,\n                `bpftrace.scripts.${script.name}.exit_code`,\n                `bpftrace.scripts.${script.name}.output`\n            ];\n\n            let found_all_metrics = true;\n            for (const state_metric of state_metrics) {\n                if (this.context.findMetricMetadata(state_metric))\n                    metrics.push(state_metric);\n                else\n                    found_all_metrics = false;\n            }\n\n            // don't remove scripts which are currently starting and don't have their metrics registered yet\n            if (!found_all_metrics && script.status !== \"starting\") {\n                console.info(`script ${script.name} is missing on the PMDA ${script.status}`);\n                const script_metrics = script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n                delete this.scripts[script.name];\n                this.poller.removeMetricsFromPolling(script_metrics);\n            }\n        }\n\n        if (metrics.length === 0)\n            return;\n\n        const response = await this.context.fetch(metrics);\n        for (const metric of response.values) {\n            const metric_split = metric.name.split('.');\n            const script_name = metric_split[2];\n            const metric_field = metric_split[3];\n\n            const script = this.scripts[script_name];\n            if (!script) {\n                // script got removed by cleanupExpiredScripts()\n                // while waiting for values from the PMDA\n                continue;\n            }\n            else if ([\"status\", \"exit_code\", \"output\"].includes(metric_field)) {\n                script[metric_field] = metric.instances[0].value;\n            }\n        }\n    }\n}\n","///<reference path=\"../../../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\nimport _ from 'lodash';\nimport kbn from 'grafana/app/core/utils/kbn';\nimport Context from '../lib/context';\nimport EndpointRegistry from '../lib/endpoint_registry';\nimport ScriptRegistry, { BPFtraceScript } from './script_registry';\nimport Transformations from '../lib/transformations';\nimport BPFtraceEndpoint from './bpftrace_endpoint';\nimport { TargetFormat, PanelData } from '../lib/types';\nimport { getConnectionParams } from '../lib/utils';\n\nexport class PCPBPFtraceDatasource {\n\n    name: string;\n    withCredentials: boolean;\n    headers: any;\n\n    pollIntervalMs: number; // poll metric sources every X ms\n    scriptSyncIntervalMs: number; // // script sync interval\n    keepPollingMs: number; // we will keep polling a metric for up to X ms after it was last requested\n    localHistoryAgeMs: number; // age out time\n\n    endpointRegistry: EndpointRegistry<BPFtraceEndpoint>;\n    transformations: Transformations;\n\n    /** @ngInject **/\n    constructor(private instanceSettings: any, private backendSrv: any, private templateSrv: any, private variableSrv: any) {\n        this.name = instanceSettings.name;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n        this.pollIntervalMs = kbn.interval_to_ms(instanceSettings.jsonData.pollInterval || '1s');\n        this.scriptSyncIntervalMs = kbn.interval_to_ms(instanceSettings.jsonData.scriptSyncInterval || '20s');\n        this.keepPollingMs = kbn.interval_to_ms(instanceSettings.jsonData.keepPolling || '20s');\n        this.localHistoryAgeMs = kbn.interval_to_ms(instanceSettings.jsonData.localHistoryAge || '5m');\n\n        Context.datasourceRequest = this.doRequest.bind(this);\n        this.endpointRegistry = new EndpointRegistry();\n        this.transformations = new Transformations(this.templateSrv);\n\n        if (this.pollIntervalMs > 0)\n            setInterval(this.doPollAll.bind(this), this.pollIntervalMs);\n        if (this.scriptSyncIntervalMs > 0)\n            setInterval(this.syncScriptStates.bind(this), this.scriptSyncIntervalMs);\n    }\n\n    doPollAll() {\n        let promises: Promise<void>[] = [];\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.datastore.cleanExpiredMetrics();\n            endpoint.poller.cleanupExpiredMetrics();\n            promises.push(endpoint.poller.poll());\n        }\n        return Promise.all(promises);\n    }\n\n    syncScriptStates() {\n        let promises: Promise<void>[] = [];\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.scriptRegistry.cleanupExpiredScripts();\n            promises.push(endpoint.scriptRegistry.syncState());\n        }\n        return Promise.all(promises);\n    }\n\n    getOrCreateEndpoint(target: any) {\n        const [url,] = getConnectionParams(this.variableSrv, target, this.instanceSettings);\n        let endpoint = this.endpointRegistry.find(url);\n        if (!endpoint) {\n            endpoint = this.endpointRegistry.create(url, undefined, this.keepPollingMs, this.localHistoryAgeMs);\n            endpoint.scriptRegistry = new ScriptRegistry(endpoint.context, endpoint.poller, this.keepPollingMs);\n        }\n        return endpoint;\n    }\n\n    async doRequest(options: any) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n        return await this.backendSrv.datasourceRequest(options);\n    }\n\n    async testDatasource() {\n        const [url, container] = getConnectionParams(this.variableSrv, {}, this.instanceSettings);\n        const context = new Context(url, container);\n        try {\n            await context.createContext();\n            return { status: 'success', message: \"Data source is working\", title: \"Success\" };\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                message: `Cannot connect to ${context.url}`,\n                title: 'Error',\n            };\n        }\n    }\n\n    async metricFindQuery(query: any) {\n        return [];\n    }\n\n    getMetricNameForMetricType(context: Context, script: BPFtraceScript, metrictype: string) {\n        for (const var_ of script.vars) {\n            const metric = `bpftrace.scripts.${script.name}.data.${var_}`;\n            const metricMetadata = context.findMetricMetadata(metric);\n            if (metricMetadata && metricMetadata.labels && metricMetadata.labels.metrictype === metrictype)\n                return metric;\n        }\n        return null;\n    }\n\n    getMetricNamesForTarget(context: Context, target: any, script: BPFtraceScript) {\n        if (target.format === TargetFormat.TimeSeries) {\n            return script.vars.map(var_ => `bpftrace.scripts.${script.name}.data.${var_}`);\n        }\n        else if (target.format === TargetFormat.Heatmap) {\n            const metric = this.getMetricNameForMetricType(context, script, \"histogram\");\n            if (metric)\n                return [metric];\n            else\n                throw { message: \"Cannot find any histogram in this BPFtrace script.\" };\n        }\n        else if (target.format === TargetFormat.Table) {\n            const metric = this.getMetricNameForMetricType(context, script, \"output\");\n            if (metric)\n                return [metric];\n            else\n                throw { message: \"Table format is only supported with printf() BPFtrace scripts.\" };\n        }\n        return [];\n    }\n\n    async query(query: any) {\n        const panelData: PanelData[] = [];\n        for (const target of query.targets) {\n            if (target.hide || !target.code)\n                continue;\n\n            // TODO: allow templating of bpftrace script code?\n            // possible clashes of grafana templating syntax with bpftrace syntax\n            const code = target.code.trim();\n            if (code.length === 0)\n                continue;\n\n            let endpoint = this.getOrCreateEndpoint(target);\n            let script: BPFtraceScript;\n            try {\n                // ensureActive registers the script (if required)\n                // register is async\n                script = await endpoint.scriptRegistry.ensureActive(code);\n\n                if (script.status === \"started\" || script.status === \"starting\") {\n                    const metrics = this.getMetricNamesForTarget(endpoint.context, target, script);\n                    endpoint.poller.ensurePolling(metrics);\n\n                    let result = endpoint.datastore.queryMetrics(metrics, query.range.from.valueOf(), query.range.to.valueOf());\n                    panelData.push(...this.transformations.transform(result, target));\n                }\n                else {\n                    throw { message: `BPFtrace error:\\n\\n${script.output}` };\n                }\n            }\n            catch (error) {\n                // catch all exceptions and add the refId of the panel\n                error.refId = target.refId;\n                throw error;\n            }\n        }\n\n        return { data: panelData };\n    }\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\nimport { TargetFormat } from '../lib/types';\n\nexport class PCPBPFtraceDatasourceQueryCtrl extends QueryCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/query.editor.html';\n\n    formats: any = [];\n\n    /** @ngInject **/\n    constructor($scope, $injector) {\n        super($scope, $injector);\n\n        this.target.code = this.target.code || \"\";\n        this.target.format = this.target.format || this.getDefaultFormat();\n        this.target.url = this.target.url || null;\n\n        this.formats = [\n            { text: \"Time series\", value: TargetFormat.TimeSeries },\n            { text: \"Table\", value: TargetFormat.Table },\n            { text: \"Heatmap\", value: TargetFormat.Heatmap },\n        ];\n    }\n\n    getDefaultFormat() {\n        if (this.panelCtrl.panel.type === 'table') {\n            return TargetFormat.Table;\n        } else if (this.panelCtrl.panel.type === 'heatmap') {\n            return TargetFormat.Heatmap;\n        }\n        return TargetFormat.TimeSeries;\n    }\n\n    refreshMetricData() {\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n}\n","import { PCPBPFtraceDatasource } from './datasource';\nimport { PCPBPFtraceDatasourceQueryCtrl } from './query_ctrl';\n\nclass PCPBPFtraceConfigCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/config.html';\n}\n\nclass PCPBPFtraceAnnotationsQueryCtrl {\n    static templateUrl = 'datasources/bpftrace/partials/annotations.editor.html';\n}\n\nexport {\n    PCPBPFtraceDatasource as Datasource,\n    PCPBPFtraceDatasourceQueryCtrl as QueryCtrl,\n    PCPBPFtraceConfigCtrl as ConfigCtrl,\n    PCPBPFtraceAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from \"lodash\";\n\n// typescript decorator which makes sure that this function\n// is called only once at a time\n// subsequent calls return the promise of the first call\nexport function synchronized(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    let method = descriptor.value;\n\n    descriptor.value = function () {\n        if (!this.inflightCalls)\n            this.inflightCalls = {};\n        if (this.inflightCalls[propertyKey])\n            return this.inflightCalls[propertyKey];\n\n        this.inflightCalls[propertyKey] = method.apply(this, arguments);\n        return this.inflightCalls[propertyKey].then((result: any) => {\n            this.inflightCalls[propertyKey] = null;\n            return result;\n        }, (reason: any) => {\n            this.inflightCalls[propertyKey] = null;\n            throw reason;\n        });\n    }\n}\n\nexport function isBlank(str: string) {\n    return !(_.isString(str) && str.trim().length > 0);\n}\n\nexport function getDashboardVariables(variableSrv: any): any {\n    const variables = {};\n    if (!variableSrv.variables) {\n        // variables are not defined on the datasource settings page\n        return {};\n    }\n\n    variableSrv.variables.forEach((variable) => {\n        let variableValue = variable.current.value;\n        if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n            if (variable.allValue === null) {\n                variableValue = variable.options.slice(1).map((textValuePair: any) => textValuePair.value);\n            } else {\n                variableValue = variable.allValue;\n            }\n        }\n\n        variables[variable.name] = {\n            text: variable.current.text,\n            value: variableValue,\n        };\n    });\n\n    return variables;\n}\n\nexport function getConnectionParams(variableSrv: any, target: any, instanceSettings: any): [string, string?] {\n    const dashboardVariables = getDashboardVariables(variableSrv);\n    let url: string = \"\";\n    let container: string | undefined;\n\n    if (!isBlank(target.url))\n        url = target.url;\n    else if (dashboardVariables.url && !isBlank(dashboardVariables.url.value))\n        url = dashboardVariables.url.value;\n    else if (!isBlank(instanceSettings.url))\n        url = instanceSettings.url;\n    else\n        throw { message: \"Cannot find any connection url.\" };\n\n    if (!isBlank(target.container))\n        container = target.container;\n    else if (dashboardVariables.container && !isBlank(dashboardVariables.container.value))\n        container = dashboardVariables.container.value;\n    else if (!isBlank(instanceSettings.container))\n        container = instanceSettings.container;\n\n    return [url, container];\n}\n","import _ from 'lodash';\nimport { synchronized } from './utils';\n\ninterface MetricMetadata {\n    name: string,\n    pmid: number,\n    sem: string,\n    labels: Record<string, any>\n}\n\nexport default class Context {\n\n    static datasourceRequest: (options: any) => any;\n    private context: string;\n    private metricMetadataCache: Record<string, MetricMetadata> = {};\n    private indomCache: Record<string, Record<number, string>> = {}; // indomCache[metric][instance_id] = instance_name\n    private d: string = '';\n\n    constructor(readonly url: string, readonly container?: string) {\n        // if port != 44322, use pmwebd API with underscore\n        // TODO: remove once transition to pmproxy is done\n        if (!url.includes(\":44322\")) {\n            this.d = '_';\n        }\n    }\n\n    @synchronized\n    async createContext() {\n        let contextUrl = `${this.url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`;\n\n        const contextResponse = await Context.datasourceRequest({ url: contextUrl });\n        this.context = contextResponse.data.context;\n\n        if (this.container) {\n            await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: \"pmcd.client.container\", value: this.container }\n            });\n        }\n    }\n\n    private async ensureContext(fn: () => any) {\n        if (!this.context) {\n            await this.createContext();\n        }\n\n        try {\n            return await fn();\n        } catch (error) {\n            if ((_.isString(error.data) && error.data.includes(\"12376\")) ||\n                (_.isObject(error.data) && error.data.message.includes(\"unknown context identifier\"))) {\n                console.debug(\"context expired, creating new context...\");\n                await this.createContext();\n                return await fn();\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n\n    async fetchMetricMetadata(prefix?: string) {\n        let params: any = {};\n        if (prefix)\n            params.prefix = prefix;\n\n        const metrics = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                //url: `${this.url}/pmapi/${this.context}/${this.d}metric`,\n                url: `http://localhost:44322/pmapi/metric`,\n                params\n            });\n            return response.data.metrics;\n        });\n\n        this.metricMetadataCache = {};\n        for (const metric of metrics) {\n            this.metricMetadataCache[metric.name] = metric;\n        }\n    }\n\n    findMetricMetadata(metric: string) {\n        return this.metricMetadataCache[metric];\n    }\n\n    getAllMetricNames() {\n        return Object.keys(this.metricMetadataCache);\n    }\n\n    private async refreshIndoms(metric: string) {\n        const indoms = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}indom`,\n                params: { name: metric }\n            });\n            return response.data.instances;\n        });\n\n        // convert [{instance: X, name: Y}] to {instance: name}\n        this.indomCache[metric] = {};\n        for (const indom of indoms) {\n            this.indomCache[metric][indom.instance] = indom.name;\n        }\n        return this.indomCache[metric];\n    }\n\n    async fetch(metrics: string[], instanceNames: boolean = false) {\n        const data = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}fetch`,\n                params: { names: metrics.join(',') }\n            });\n            return response.data;\n        });\n\n        if (instanceNames) {\n            // add instance names to instances\n            for (const metric of data.values) {\n                if (metric.instances.length == 0) {\n                    continue;\n                } else if (metric.instances[0].instance === null || metric.instances[0].instance === -1) { // this metric has no instances (single value)\n                    metric.instances[0].instanceName = null;\n                    continue;\n                }\n\n                let indomsForMetric = this.indomCache[metric.name];\n                if (!indomsForMetric)\n                    indomsForMetric = await this.refreshIndoms(metric.name);\n\n                let refreshed = false;\n                for (const instance of metric.instances) {\n                    instance.instanceName = indomsForMetric[instance.instance];\n                    if (!instance.instanceName && !refreshed) {\n                        // refresh instances at max once per metric\n                        indomsForMetric = await this.refreshIndoms(metric.name);\n                        instance.instanceName = indomsForMetric[instance.instance];\n                        refreshed = true;\n                    }\n                }\n            }\n        }\n\n        return data;\n    }\n\n    async store(metric: string, value: string) {\n        return await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: metric, value: value }\n            });\n            return response.data;\n        });\n    }\n\n    async children(prefix: string) {\n        return await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}children`,\n                params: { prefix: prefix }\n            });\n            return response.data;\n        });\n    }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;"],"sourceRoot":""}