{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./datasources/lib/types.ts","webpack:///./datasources/lib/transformations.ts","webpack:///./datasources/lib/datastore.ts","webpack:///./datasources/lib/poller.ts","webpack:///./datasources/lib/endpoint_registry.ts","webpack:///./datasources/live/datasource.ts","webpack:///./datasources/live/query_ctrl.ts","webpack:///./datasources/live/config_ctrl.ts","webpack:///./datasources/live/module.ts","webpack:///./datasources/lib/context.ts","webpack:///./datasources/lib/utils.ts","webpack:///external \"app/core/utils/kbn\"","webpack:///external \"app/plugins/sdk\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","TargetFormat","__webpack_exports__","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","_types__WEBPACK_IMPORTED_MODULE_1__","Transformations","templateSrv","this","getLabel","target","legendFormat","a","isEmpty","targetSpl","split","vars","instance","metric0","length","replace","updateLabel","targetResult","datapoints","transformToTimeSeries","queryResult","flatten","map","row","data","transformToHeatmap","targetResults","_i","targetResults_1","match","dataPoint","Math","floor","transformStringToTable","tableText","table","columns","rows","type","lines","columnSizes","line","trim","includes","tableHeaders","colStartAt","indexOf","colEndAt","undefined","push","text","colSize","substring","lines_1","transformMultipleMetricsToTable","queryResultRow","metric","queryResult_1","find","instances_1","keys","sort","b","parseInt","transformToTable","targets","transform","format","TimeSeries","Heatmap","Table","message","DataStore","context","localHistoryAgeMs","store","ingestCounterMetric","instanceStore","pollTimeEpochMs","_a","prevTimeMs","prevOrigVal","deltaSec","ingestMetric","metricStore","metadata","findMetricMetadata","instances","instanceName","labels","metrictype","sem","console","info","ingest","external_lodash_default","timestamp","us","values","queryMetric","from","to","results","filter","queryMetrics","metrics","_this","cleanExpiredMetrics","keepExpiry","Date","getTime","Poller","datastore","keepPollingMs","requestedMetrics","poll","fetch","sent","ensurePolling","now","metrics_1","removeMetricsFromPolling","metrics_2","cleanupExpiredMetrics","pollExpiry","pickBy","lastRequested","endpoint_registry_EndpointRegistry","EndpointRegistry","endpoints","generateId","url","container","id","lib_context","lib_datastore","poller","lib_poller","list","datasource_PcpLiveDatasource","PcpLiveDatasource","instanceSettings","backendSrv","variableSrv","withCredentials","headers","Content-Type","basicAuth","pollIntervalMs","kbn_default","interval_to_ms","jsonData","pollInterval","keepPolling","localHistoryAge","datasourceRequest","doRequest","endpointRegistry","endpoint_registry","transformations","setInterval","doPollAll","container_name_filter","$inject","endpoint","promises","Promise","all","getOrCreateEndpoint","utils","options","status","title","_b","query","hide","expr","types","every","metricsToPoll","range","valueOf","error","refId","panelData","query_ctrl_PcpLiveDatasourceQueryCtrl","_super","PcpLiveDatasourceQueryCtrl","$scope","$injector","getDefaultFormat","formats","panelCtrl","panel","containers","unshift","refreshMetricData","refresh","templateUrl","config_ctrl_PcpLiveConfigCtrl","PcpLiveConfigCtrl","label","trys","PcpLiveAnnotationsQueryCtrl","Context","indomCache","contextUrl","contextResponse","params","error_1","isString","isObject","debug","prefix","metricMetadataCache","getAllMetricNames","indoms","indoms_1","indom","instanceNames","_d","names","join","indomsForMetric","_c","refreshed","ensureContext","__decorate","_utils__WEBPACK_IMPORTED_MODULE_1__","synchronized","getConnectionParams","method","descriptor","inflightCalls","propertyKey","apply","arguments","then","result","reason","isBlank","str","dashboardVariables","variables","variableValue","variable","current","isEqual","allValue","slice","textValuePair","getDashboardVariables"],"mappings":"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","file":"./datasources/live/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 132);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export type Datapoint = [number | string, number];\n\nexport interface TimeSeriesData {\n    target: string;\n    datapoints: Datapoint[]\n}\n\nexport interface TableData {\n    columns: any[]\n    rows: (string | number)[][]\n    type: string\n}\n\nexport type PanelData = TimeSeriesData | TableData;\n\nexport enum TargetFormat {\n    TimeSeries = \"time_series\",\n    Table = \"table\",\n    Heatmap = \"heatmap\",\n}\n\nexport interface DatastoreQueryResultRow {\n    metric: string;\n    data: TimeSeriesData[];\n}\n\nexport type DatastoreQueryResult = DatastoreQueryResultRow[];\n","import _ from 'lodash';\nimport { Datapoint, TargetFormat, TimeSeriesData, DatastoreQueryResult, PanelData, TableData, DatastoreQueryResultRow } from './types';\n\nexport default class Transformations {\n\n    constructor(private templateSrv: any) {\n    }\n\n    getLabel(target: string, legendFormat: string) {\n        if (_.isEmpty(legendFormat)) {\n            return target;\n        }\n        else {\n            const targetSpl = target.split('.');\n            let vars = {\n                instance: { value: target },\n                metric0: { value: targetSpl[targetSpl.length - 1] }\n            };\n            return this.templateSrv.replace(legendFormat, vars);\n        }\n    }\n\n    updateLabel(target: any, targetResult: TimeSeriesData) {\n        return { target: this.getLabel(targetResult.target, target.legendFormat), datapoints: targetResult.datapoints }\n    }\n\n    transformToTimeSeries(queryResult: DatastoreQueryResult, target: any): TimeSeriesData[] {\n        const targetResults: TimeSeriesData[] = _.flatten(queryResult.map((row: DatastoreQueryResultRow) => row.data));\n        return targetResults.map(this.updateLabel.bind(this, target));\n    }\n\n    transformToHeatmap(queryResult: DatastoreQueryResult) {\n        const targetResults: TimeSeriesData[] = queryResult[0].data;\n        for (const target of targetResults) {\n            // target name is the upper bound\n            const match = target.target.match(/^(.+?)\\-(.+?)$/);\n            if (match) {\n                target.target = match[2];\n            }\n\n            // round timestamps to one second - the heatmap panel calculates the x-axis size accordingly\n            target.datapoints = target.datapoints.map(\n                (dataPoint: Datapoint) => [dataPoint[0], Math.floor(dataPoint[1] / 1000) * 1000]\n            );\n        }\n        return targetResults;\n    }\n\n    transformStringToTable(tableText: string) {\n        let table: TableData = { columns: [], rows: [], type: 'table' };\n        let lines = tableText.split('\\n');\n        let columnSizes: [number, number | undefined][] = [];\n\n        for (let line of lines) {\n            line = line.trim();\n            if (line.length === 0 || line.includes(\"Ctrl-C\"))\n                continue;\n\n            if (_.isEmpty(table.columns)) {\n                let tableHeaders = line.split(/\\s\\s+/);\n                for (let i = 0; i < tableHeaders.length; i++) {\n                    const colStartAt = line.indexOf(tableHeaders[i]);\n                    const colEndAt = i + 1 < tableHeaders.length ? line.indexOf(tableHeaders[i + 1]) - 1 : undefined;\n                    table.columns.push({ text: tableHeaders[i] });\n                    columnSizes.push([colStartAt, colEndAt]);\n                }\n            }\n            else {\n                let row = columnSizes.map((colSize: any) => line.substring(colSize[0], colSize[1]).trim());\n                table.rows.push(row);\n            }\n        }\n        return table;\n    }\n\n    transformMultipleMetricsToTable(queryResult: DatastoreQueryResult) {\n        let table: TableData = { columns: [], rows: [], type: 'table' };\n        table.columns = queryResult.map((queryResultRow) => ({ text: queryResultRow.metric }));\n        const instances = Object.keys(queryResult[0].data).sort((a, b) => parseInt(a) - parseInt(b));\n        for (const instance of instances) {\n            const row: (string | number)[] = [];\n            for (const queryResultRow of queryResult) {\n                const target = queryResultRow.data.find((target: TimeSeriesData) => target.target === instance);\n                if (target && target.datapoints.length > 0)\n                    row.push(target.datapoints[target.datapoints.length - 1][0]);\n                else\n                    row.push('?');\n            }\n            table.rows.push(row);\n\n        }\n        return table;\n    }\n\n    transformToTable(queryResult: DatastoreQueryResult) {\n        if (queryResult.length > 1) {\n            return this.transformMultipleMetricsToTable(queryResult);\n        }\n        else if (queryResult.length === 1) {\n            const targets = queryResult[0].data;\n            if (targets.length > 0 && targets[0].datapoints.length > 0)\n                return this.transformStringToTable(targets[0].datapoints[0][0] as string);\n        }\n        return { columns: [], rows: [], type: 'table' };\n    }\n\n    transform(queryResult: DatastoreQueryResult, target: any): PanelData[] {\n        if (target.format === TargetFormat.TimeSeries)\n            return this.transformToTimeSeries(queryResult, target);\n        else if (target.format === TargetFormat.Heatmap)\n            return this.transformToHeatmap(queryResult);\n        else if (target.format == TargetFormat.Table)\n            return [this.transformToTable(queryResult)];\n        else\n            throw { message: `Invalid target format '${target.format}', possible options: ${TargetFormat.TimeSeries}, ${TargetFormat.Heatmap}, ${TargetFormat.Table}` };\n    }\n\n\n}\n","import _ from 'lodash';\nimport Context from './context';\nimport { Datapoint, TimeSeriesData } from './types';\n\ntype StoredDatapoint = [number | string | undefined, number, number?];\n\nexport default class DataStore {\n    private store: Record<string, Record<string, StoredDatapoint[]>> = {}; // store[metric][instance] = [val,ts,origVal]\n\n    constructor(private context: Context, private localHistoryAgeMs: number) {\n    }\n\n    private ingestCounterMetric(instanceStore: StoredDatapoint[], instance: any, pollTimeEpochMs: number) {\n        // first value: store it as undefined, to be filtered by queryTimeSeries()\n        // subsequent values: perform rate conversation\n        if (instanceStore.length > 0) {\n            let [, prevTimeMs, prevOrigVal] = instanceStore[instanceStore.length - 1];\n            const deltaSec = (pollTimeEpochMs - prevTimeMs) / 1000;\n            instanceStore.push([(instance.value - prevOrigVal!) / deltaSec, pollTimeEpochMs, instance.value]);\n        }\n        else {\n            instanceStore.push([undefined, pollTimeEpochMs, instance.value]);\n        }\n    }\n\n    private ingestMetric(metricStore: Record<string, StoredDatapoint[]>, metric: any, pollTimeEpochMs: number) {\n        const metadata = this.context.findMetricMetadata(metric.name);\n        if (!metadata) {\n            console.info(`skipping ingestion of ${metric.name}: metadata not available`);\n            return;\n        }\n\n        for (const instance of metric.instances) {\n            // for the bpftrace output variable, always recreate the metric store (do not store history)\n            if (!(instance.instanceName in metricStore) || (metadata.labels && metadata.labels.metrictype === \"output\")) {\n                metricStore[instance.instanceName] = [];\n            }\n\n            if (metadata.sem === \"counter\") {\n                this.ingestCounterMetric(metricStore[instance.instanceName], instance, pollTimeEpochMs);\n            }\n            else {\n                metricStore[instance.instanceName].push([instance.value, pollTimeEpochMs]);\n            }\n        }\n    }\n\n    ingest(data: any) {\n        if (_.isEmpty(data))\n            return;\n\n        const pollTimeEpochMs = data.timestamp.s ? data.timestamp.s * 1000 + data.timestamp.us / 1000 : data.timestamp * 1000;\n        for (const metric of data.values) {\n            if (!this.store[metric.name]) {\n                this.store[metric.name] = {};\n            }\n\n            this.ingestMetric(this.store[metric.name], metric, pollTimeEpochMs);\n        }\n    }\n\n    queryMetric(metric: string, from: number, to: number) {\n        const results: TimeSeriesData[] = [];\n        for (const instance in this.store[metric]) {\n            let target = {\n                // for metrics without instance domains, show metric name\n                target: instance === \"null\" ? metric : instance,\n                datapoints: this.store[metric][instance].filter((dataPoint: StoredDatapoint) => (\n                    from <= dataPoint[1] && dataPoint[1] <= to && dataPoint[0] != undefined\n                )) as Datapoint[]\n            };\n            results.push(target);\n        }\n        return results;\n    }\n\n    queryMetrics(metrics: string[], from: number, to: number) {\n        return metrics.map((metric: string) => ({ metric: metric, data: this.queryMetric(metric, from, to) }));\n    }\n\n    cleanExpiredMetrics() {\n        const keepExpiry = new Date().getTime() - this.localHistoryAgeMs\n        for (const metric in this.store) {\n            for (const instance in this.store[metric]) {\n                this.store[metric][instance] = this.store[metric][instance].filter(\n                    (dataPoint: Datapoint) => dataPoint[1] > keepExpiry\n                );\n            }\n        }\n    }\n}\n","import _ from \"lodash\";\nimport Context from \"./context\";\nimport DataStore from \"./datastore\";\n\nexport default class Poller {\n    private requestedMetrics: Record<string, number> = {}; // {metric: lastRequested}\n\n    constructor(private context: Context, private datastore: DataStore, private keepPollingMs: number) {\n    }\n\n    async poll() {\n        const metrics = Object.keys(this.requestedMetrics);\n        if (metrics.length == 0) {\n            return;\n        }\n\n        const data = await this.context.fetch(metrics, true);\n        this.datastore.ingest(data);\n    }\n\n    ensurePolling(metrics: string[]) {\n        const now = new Date().getTime()\n        for (const metric of metrics) {\n            if (!this.context.findMetricMetadata(metric))\n                throw { message: `Cannot find metric ${metric} on PMDA.` };\n            this.requestedMetrics[metric] = now\n        }\n    }\n\n    removeMetricsFromPolling(metrics: string[]) {\n        for (const metric of metrics) {\n            delete this.requestedMetrics[metric];\n        }\n    }\n\n    cleanupExpiredMetrics() {\n        // clean up any not required metrics\n        const pollExpiry = new Date().getTime() - this.keepPollingMs;\n        this.requestedMetrics = _.pickBy(this.requestedMetrics, (lastRequested: number) => lastRequested > pollExpiry);\n    }\n}\n","import Context from \"./context\";\nimport DataStore from \"./datastore\";\nimport Poller from './poller';\n\nexport interface Endpoint {\n    context: Context;\n    poller: Poller;\n    datastore: DataStore;\n}\n\nexport default class EndpointRegistry<T extends Endpoint> {\n    private endpoints: Record<string, T> = {};\n\n    private generateId(url: string, container?: string) {\n        if (!container)\n            container = \"\";\n        return `${url}::${container}`;\n    }\n\n    find(url: string, container?: string) {\n        const id = this.generateId(url, container);\n        return this.endpoints[id];\n    }\n\n    create(url: string, container: string | undefined, keepPollingMs: number, localHistoryAgeMs: number) {\n        const id = this.generateId(url, container);\n        const context = new Context(url, container);\n        const datastore = new DataStore(context, localHistoryAgeMs);\n        const poller = new Poller(context, datastore, keepPollingMs);\n\n        this.endpoints[id] = { context, datastore, poller } as T;\n        return this.endpoints[id];\n    }\n\n    list() {\n        return Object.values(this.endpoints);\n    }\n\n}","import _ from \"lodash\";\nimport kbn from \"grafana/app/core/utils/kbn\";\nimport { TargetFormat, PanelData } from \"../lib/types\";\nimport EndpointRegistry, { Endpoint } from \"../lib/endpoint_registry\";\nimport Transformations from \"../lib/transformations\";\nimport Context from \"../lib/context\";\nimport { synchronized, getConnectionParams } from \"../lib/utils\";\n\nexport class PcpLiveDatasource {\n\n    name: string;\n    withCredentials: boolean;\n    headers: any;\n\n    pollIntervalMs: number; // poll metric sources every X ms\n    keepPollingMs: number; // we will keep polling a metric for up to X ms after it was last requested\n    localHistoryAgeMs: number; // age out time\n\n    endpointRegistry: EndpointRegistry<Endpoint>;\n    transformations: Transformations;\n\n    container_name_filter: any;\n\n    /** @ngInject **/\n    constructor(private instanceSettings: any, private backendSrv: any, private templateSrv: any, private variableSrv: any) {\n        this.name = instanceSettings.name;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n        this.pollIntervalMs = kbn.interval_to_ms(instanceSettings.jsonData.pollInterval || '1s');\n        this.keepPollingMs = kbn.interval_to_ms(instanceSettings.jsonData.keepPolling || '20s');\n        this.localHistoryAgeMs = kbn.interval_to_ms(instanceSettings.jsonData.localHistoryAge || '5m');\n\n        Context.datasourceRequest = this.doRequest.bind(this);\n        this.endpointRegistry = new EndpointRegistry();\n        this.transformations = new Transformations(this.templateSrv);\n\n        if (this.pollIntervalMs > 0)\n            setInterval(this.doPollAll.bind(this), this.pollIntervalMs);\n\n        const UUID_REGEX = /[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/\n        this.container_name_filter = name => true // name => name.match(UUID_REGEX)\n    }\n\n    doPollAll() {\n        let promises: Promise<void>[] = [];\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.datastore.cleanExpiredMetrics();\n            endpoint.poller.cleanupExpiredMetrics();\n            promises.push(endpoint.poller.poll());\n        }\n        return Promise.all(promises);\n    }\n\n    @synchronized\n    async getOrCreateEndpoint(target: any = {}) {\n        const [url, container] = getConnectionParams(this.variableSrv, target, this.instanceSettings);\n        let endpoint = this.endpointRegistry.find(url, container);\n        if (!endpoint) {\n            endpoint = this.endpointRegistry.create(url, container, this.keepPollingMs, this.localHistoryAgeMs);\n            await endpoint.context.fetchMetricMetadata(); // TODO: where?\n        }\n        return endpoint;\n    }\n\n    async doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n        return await this.backendSrv.datasourceRequest(options);\n    }\n\n    async testDatasource() {\n        const [url, container] = getConnectionParams(this.variableSrv, {}, this.instanceSettings);\n        const context = new Context(url, container);\n        try {\n            await context.createContext();\n            return { status: 'success', message: \"Data source is working\", title: \"Success\" };\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                title: 'Additional configuration required',\n                message: `Could not connect to ${url}. To use this data source, ` +\n                    'please configure the url, and optionally the container dashboard variable(s).',\n            }\n        }\n    }\n\n    /**\n     * called by the templating engine (dashboard variables with type = query)\n     */\n    async metricFindQuery(query) {\n        let endpoint = await this.getOrCreateEndpoint();\n        if (query === 'containers.name') {\n            const metricsResponse = await endpoint.context.fetch([\"containers.name\"]);\n            return metricsResponse.values[0].instances\n                .map((instance: any) => instance.value)\n                .filter(this.container_name_filter)\n                .map((container: string) => ({ text: container, value: container }));\n        }\n        else {\n            return [];\n        }\n    }\n\n    async query(query: any) {\n        const panelData: PanelData[] = [];\n        for (const target of query.targets) {\n            if (target.hide || (!target.expr && !target.target))\n                continue;\n\n            // TODO: remove me: workaround for old dashboards\n            if (!target.expr)\n                target.expr = target.target;\n            if (!target.format && (target.type === \"timeseries\" || target.type === \"timeserie\"))\n                target.format = \"time_series\";\n\n            // TODO: allow templating\n            const expr: string = target.expr.trim();\n            if (expr.length === 0)\n                continue;\n\n            let endpoint = await this.getOrCreateEndpoint(target);\n            try {\n                //const parser = new Parser();\n                //const expressions = parser.parse(expr);\n                //const metricsToPoll = expressions.variables({ withMembers: true });\n\n                let metricsToPoll: string[] = [];\n                if (target.format === TargetFormat.Table) {\n                    if (!_.every(query.targets, ['format', TargetFormat.Table]))\n                        throw { message: \"To use the table format, every query of this panel has to be in table format\" };\n                    // note: this ignores that the endpoint could be different for each query\n                    metricsToPoll = query.targets.map((target: any) => target.expr);\n                }\n                else {\n                    metricsToPoll = [expr];\n                }\n\n                endpoint.poller.ensurePolling(metricsToPoll);\n                let queryResult = endpoint.datastore.queryMetrics(metricsToPoll, query.range.from.valueOf(), query.range.to.valueOf());\n                panelData.push(...this.transformations.transform(queryResult, target));\n\n                if (target.format === TargetFormat.Table) {\n                    break;\n                }\n            }\n            catch (error) {\n                // catch all exceptions and add the refId of the panel\n                error.refId = target.refId;\n                throw error;\n            }\n        }\n\n        return { data: panelData };\n    }\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\nimport { TargetFormat } from '../lib/types';\n\nexport class PcpLiveDatasourceQueryCtrl extends QueryCtrl {\n    static templateUrl = 'datasources/live/partials/query.editor.html'\n\n    formats: any = [];\n\n    constructor($scope, $injector) {\n        super($scope, $injector);\n\n        // TODO: remove workaround\n        this.target.expr = this.target.expr || this.target.target || \"\";\n        this.target.format = this.target.format || this.getDefaultFormat();\n        this.target.url = this.target.url || null;\n        this.target.container = this.target.container || null;\n\n        this.formats = [\n            { text: \"Time series\", value: TargetFormat.TimeSeries },\n            { text: \"Table\", value: TargetFormat.Table },\n            { text: \"Heatmap\", value: TargetFormat.Heatmap },\n        ];\n    }\n\n    getDefaultFormat() {\n        if (this.panelCtrl.panel.type === 'table') {\n            return TargetFormat.Table;\n        } else if (this.panelCtrl.panel.type === 'heatmap') {\n            return TargetFormat.Heatmap;\n        }\n        return TargetFormat.TimeSeries;\n    }\n\n    async getContainers() {\n        let containers = await this.datasource.metricFindQuery('containers.name');\n        containers.unshift({ text: '-', value: null });\n        return containers;\n    }\n\n    refreshMetricData() {\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n}\n","import _ from \"lodash\";\nimport { PcpLiveDatasource } from \"./datasource\";\n\nexport class PcpLiveConfigCtrl {\n    static templateUrl = 'datasources/live/partials/config.html'\n    current: any;\n\n    /** @ngInject **/\n    constructor(private backendSrv: any, private templateSrv: any, private variableSrv: any) {\n        this.current.jsonData.container = this.current.jsonData.container || null;\n    }\n\n    async getContainers() {\n        const instanceSettings = _.cloneDeep(this.current);\n        instanceSettings.jsonData.pollInterval = '0s'; // otherwise setInterval will be called in constructor\n        let datasource = new PcpLiveDatasource(instanceSettings, this.backendSrv, this.templateSrv, this.variableSrv);\n\n        let containers: any = [];\n        try {\n            containers = await datasource.metricFindQuery('containers.name');\n        }\n        catch (e) {\n            // probably URL is not set up correctly, ignore\n        }\n        containers.unshift({ text: '-', value: null });\n        return containers;\n    }\n\n}\n","import { PcpLiveDatasource } from './datasource';\nimport { PcpLiveDatasourceQueryCtrl } from './query_ctrl';\nimport { PcpLiveConfigCtrl } from './config_ctrl';\n\nclass PcpLiveAnnotationsQueryCtrl {\n  static templateUrl = 'datasources/live/partials/annotations.editor.html'\n}\n\nexport {\n  PcpLiveDatasource as Datasource,\n  PcpLiveDatasourceQueryCtrl as QueryCtrl,\n  PcpLiveConfigCtrl as ConfigCtrl,\n  PcpLiveAnnotationsQueryCtrl as AnnotationsQueryCtrl\n};\n","import _ from 'lodash';\nimport { synchronized } from './utils';\n\ninterface MetricMetadata {\n    name: string,\n    pmid: number,\n    sem: string,\n    labels: Record<string, any>\n}\n\nexport default class Context {\n\n    static datasourceRequest: (options: any) => any;\n    private context: string;\n    private metricMetadataCache: Record<string, MetricMetadata> = {};\n    private indomCache: Record<string, Record<number, string>> = {}; // indomCache[metric][instance_id] = instance_name\n    private d: string = '';\n\n    constructor(readonly url: string, readonly container?: string) {\n        // if port != 44322, use pmwebd API with underscore\n        // TODO: remove once transition to pmproxy is done\n        if (!url.includes(\":44322\")) {\n            this.d = '_';\n        }\n    }\n\n    @synchronized\n    async createContext() {\n        let contextUrl = `${this.url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`;\n\n        const contextResponse = await Context.datasourceRequest({ url: contextUrl });\n        this.context = contextResponse.data.context;\n\n        if (this.container) {\n            await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: \"pmcd.client.container\", value: this.container }\n            });\n        }\n    }\n\n    private async ensureContext(fn: () => any) {\n        if (!this.context) {\n            await this.createContext();\n        }\n\n        try {\n            return await fn();\n        } catch (error) {\n            if ((_.isString(error.data) && error.data.includes(\"12376\")) ||\n                (_.isObject(error.data) && error.data.message.includes(\"unknown context identifier\"))) {\n                console.debug(\"context expired, creating new context...\");\n                await this.createContext();\n                return await fn();\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n\n    async fetchMetricMetadata(prefix?: string) {\n        let params: any = {};\n        if (prefix)\n            params.prefix = prefix;\n\n        const metrics = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                //url: `${this.url}/pmapi/${this.context}/${this.d}metric`,\n                url: `http://localhost:44322/pmapi/metric`,\n                params\n            });\n            return response.data.metrics;\n        });\n\n        this.metricMetadataCache = {};\n        for (const metric of metrics) {\n            this.metricMetadataCache[metric.name] = metric;\n        }\n    }\n\n    findMetricMetadata(metric: string) {\n        return this.metricMetadataCache[metric];\n    }\n\n    getAllMetricNames() {\n        return Object.keys(this.metricMetadataCache);\n    }\n\n    private async refreshIndoms(metric: string) {\n        const indoms = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}indom`,\n                params: { name: metric }\n            });\n            return response.data.instances;\n        });\n\n        // convert [{instance: X, name: Y}] to {instance: name}\n        this.indomCache[metric] = {};\n        for (const indom of indoms) {\n            this.indomCache[metric][indom.instance] = indom.name;\n        }\n        return this.indomCache[metric];\n    }\n\n    async fetch(metrics: string[], instanceNames: boolean = false) {\n        const data = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}fetch`,\n                params: { names: metrics.join(',') }\n            });\n            return response.data;\n        });\n\n        if (instanceNames) {\n            // add instance names to instances\n            for (const metric of data.values) {\n                if (metric.instances.length == 0) {\n                    continue;\n                } else if (metric.instances[0].instance === null || metric.instances[0].instance === -1) { // this metric has no instances (single value)\n                    metric.instances[0].instanceName = null;\n                    continue;\n                }\n\n                let indomsForMetric = this.indomCache[metric.name];\n                if (!indomsForMetric)\n                    indomsForMetric = await this.refreshIndoms(metric.name);\n\n                let refreshed = false;\n                for (const instance of metric.instances) {\n                    instance.instanceName = indomsForMetric[instance.instance];\n                    if (!instance.instanceName && !refreshed) {\n                        // refresh instances at max once per metric\n                        indomsForMetric = await this.refreshIndoms(metric.name);\n                        instance.instanceName = indomsForMetric[instance.instance];\n                        refreshed = true;\n                    }\n                }\n            }\n        }\n\n        return data;\n    }\n\n    async store(metric: string, value: string) {\n        return await this.ensureContext(() => {\n            return Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: metric, value: value }\n            })\n        });\n    }\n}\n","import _ from \"lodash\";\n\n// typescript decorator which makes sure that this function\n// is called only once at a time\n// subsequent calls return the promise of the first call\nexport function synchronized(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    let method = descriptor.value;\n\n    descriptor.value = function () {\n        if (!this.inflightCalls)\n            this.inflightCalls = {};\n        if (this.inflightCalls[propertyKey])\n            return this.inflightCalls[propertyKey];\n\n        this.inflightCalls[propertyKey] = method.apply(this, arguments);\n        return this.inflightCalls[propertyKey].then((result: any) => {\n            this.inflightCalls[propertyKey] = null;\n            return result;\n        }, (reason: any) => {\n            this.inflightCalls[propertyKey] = null;\n            throw reason;\n        });\n    }\n}\n\nexport function isBlank(str: string) {\n    return !(_.isString(str) && str.trim().length > 0);\n}\n\nexport function getDashboardVariables(variableSrv: any): any {\n    const variables = {};\n    if (!variableSrv.variables) {\n        // variables are not defined on the datasource settings page\n        return {};\n    }\n\n    variableSrv.variables.forEach((variable) => {\n        let variableValue = variable.current.value;\n        if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n            if (variable.allValue === null) {\n                variableValue = variable.options.slice(1).map((textValuePair: any) => textValuePair.value);\n            } else {\n                variableValue = variable.allValue;\n            }\n        }\n\n        variables[variable.name] = {\n            text: variable.current.text,\n            value: variableValue,\n        };\n    });\n\n    return variables;\n}\n\nexport function getConnectionParams(variableSrv: any, target: any, instanceSettings: any): [string, string?] {\n    const dashboardVariables = getDashboardVariables(variableSrv);\n    let url: string = \"\";\n    let container: string | undefined;\n\n    if (!isBlank(target.url))\n        url = target.url;\n    else if (dashboardVariables.url && !isBlank(dashboardVariables.url.value))\n        url = dashboardVariables.url.value;\n    else if (!isBlank(instanceSettings.url))\n        url = instanceSettings.url;\n    else\n        throw { message: \"Cannot find any connection url.\" };\n\n    if (!isBlank(target.container))\n        container = target.container;\n    else if (dashboardVariables.container && !isBlank(dashboardVariables.container.value))\n        container = dashboardVariables.container.value;\n    else if (!isBlank(instanceSettings.container))\n        container = instanceSettings.container;\n\n    return [url, container];\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;"],"sourceRoot":""}