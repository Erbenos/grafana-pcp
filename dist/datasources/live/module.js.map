{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./datasources/lib/types.ts","webpack:///./datasources/lib/transformations.ts","webpack:///./datasources/lib/datastore.ts","webpack:///./datasources/lib/poller.ts","webpack:///./datasources/lib/endpoint_registry.ts","webpack:///./datasources/live/mode-pcp.js","webpack:///./datasources/live/datasource.ts","webpack:///./datasources/live/completer.ts","webpack:///./datasources/live/query_ctrl.ts","webpack:///./datasources/live/config_ctrl.ts","webpack:///./datasources/live/module.ts","webpack:///./datasources/lib/utils.ts","webpack:///./datasources/lib/context.ts","webpack:///external \"app/core/utils/kbn\"","webpack:///external \"app/plugins/sdk\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","TargetFormat","__webpack_exports__","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","_types__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_2__","Transformations","templateSrv","this","getLabel","target","legendFormat","targetSpl","split","vars","instance","metric0","length","replace","updateLabel","targetResult","datapoints","transformToTimeSeries","queryResult","a","flatten","map","row","instances","transformToHeatmap","targetResults","_i","targetResults_1","match","dataPoint","Math","floor","transformStringToTable","tableText","table","columns","rows","type","lines","columnSizes","line","trim","includes","tableHeaders","colStartAt","indexOf","colEndAt","undefined","push","text","colSize","substring","lines_1","transformMultipleMetricsToTable","queryResultRow","queryResult_1","find","instances_1","keys","sort","b","parseInt","transformToTable","targets","transform","format","TimeSeries","Heatmap","Table","message","DataStore","context","localHistoryAgeMs","store","ingestCounterMetric","instanceStore","pollTimeEpochMs","_a","prevTimeMs","prevOrigVal","deltaSec","ingestMetric","metricStore","metric","metricMetadata","metadata","_b","sent","console","info","instanceName","labels","metrictype","sem","ingest","data","external_lodash_default","isEmpty","timestamp","us","values","queryMetric","from","to","results","filter","queryMetrics","metrics","_this","cleanExpiredMetrics","keepExpiry","Date","getTime","Poller","datastore","keepPollingMs","requestedMetrics","poll","fetch","returnedMetrics","missingMetrics","difference","debug","join","missingMetrics_1","missingMetric","ensurePolling","now","metricMetadatas","metadatas","validMetrics","intersection","validMetrics_1","removeMetricsFromPolling","metrics_1","cleanupExpiredMetrics","pollExpiry","pickBy","lastRequested","endpoint_registry_EndpointRegistry","EndpointRegistry","endpoints","generateId","url","container","id","lib_context","lib_datastore","poller","lib_poller","list","ace","define","require","snippets","scope","oop","TextHighlightRules","PcpHighlightRules","$rules","start","token","regex","normalizeRules","inherits","TextMode","Mode","HighlightRules","$behaviour","$defaultBehaviour","$id","datasource_PcpLiveDatasource","PcpLiveDatasource","instanceSettings","backendSrv","variableSrv","withCredentials","headers","Content-Type","basicAuth","pollIntervalMs","kbn_default","interval_to_ms","jsonData","pollInterval","keepPolling","localHistoryAge","datasourceRequest","doRequest","endpointRegistry","endpoint_registry","transformations","setInterval","doPollAll","container_name_filter","$inject","endpoint","promises","Promise","all","getOrCreateEndpoint","utils","options","status","title","hide","expr","types","every","query","metricsToPoll","range","valueOf","refId","panelData","PCPMetricCompleter","datasource","identifierRegexps","getCompletions","editor","session","pos","prefix","callback","completers","slice","findCompletions","then","reason","getHelpText","units","editorValue","getValue","metricPrefix","lastIndexOf","suggestions","completions","apply","nonleaf","caption","meta","score","Number","MAX_VALUE","leaf","docHTML","query_ctrl_PcpLiveDatasourceQueryCtrl","_super","$scope","$injector","formats","getDefaultFormat","__extends","PcpLiveDatasourceQueryCtrl","panelCtrl","panel","label","containers","unshift","getCompleter","refreshMetricData","templateUrl","config_ctrl_PcpLiveConfigCtrl","PcpLiveConfigCtrl","current","config_ctrl_generator","cloneDeep","trys","metricFindQuery","PcpLiveAnnotationsQueryCtrl","synchronized","isBlank","getConnectionParams","propertyKey","descriptor","method","inflightCalls","arguments","result","str","isString","dashboardVariables","variables","forEach","variable","variableValue","isEqual","allValue","textValuePair","getDashboardVariables","Context","metricMetadataCache","indomCache","__generator","contextUrl","contextResponse","params","createContext","fn","error_1","isObject","requiredMetrics","metadata_1","indoms_1","indoms","indom","_f","refreshIndoms","_c","_d","_e","instanceNames","updateInstanceNames","__decorate","_utils__WEBPACK_IMPORTED_MODULE_1__","6","7"],"mappings":"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","file":"./datasources/live/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 133);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export interface MetricMetadata {\n    name: string,\n    pmid: number,\n    sem: string,\n    type: string,\n    units: string,\n    labels: Record<string, any>\n}\n\nexport type Datapoint = [number | string, number];\n\nexport interface TimeSeriesData {\n    target: string;\n    datapoints: Datapoint[]\n}\n\nexport interface TableData {\n    columns: any[]\n    rows: (string | number)[][]\n    type: string\n}\n\nexport type PanelData = TimeSeriesData | TableData;\n\nexport enum TargetFormat {\n    TimeSeries = \"time_series\",\n    Table = \"table\",\n    Heatmap = \"heatmap\",\n}\n\nexport interface DatastoreQueryResultRow {\n    name: string;\n    instances: TimeSeriesData[];\n}\n\nexport type DatastoreQueryResult = DatastoreQueryResultRow[];\n","import _ from 'lodash';\nimport { Datapoint, TargetFormat, TimeSeriesData, DatastoreQueryResult, PanelData, TableData, DatastoreQueryResultRow } from './types';\nimport { isBlank } from './utils';\n\nexport default class Transformations {\n\n    constructor(private templateSrv: any) {\n    }\n\n    getLabel(target: string, legendFormat: string) {\n        if (isBlank(legendFormat)) {\n            return target;\n        }\n        else {\n            const targetSpl = target.split('.');\n            let vars = {\n                instance: { value: target },\n                metric0: { value: targetSpl[targetSpl.length - 1] }\n            };\n            return this.templateSrv.replace(legendFormat, vars);\n        }\n    }\n\n    updateLabel(target: any, targetResult: TimeSeriesData) {\n        return { target: this.getLabel(targetResult.target, target.legendFormat), datapoints: targetResult.datapoints }\n    }\n\n    transformToTimeSeries(queryResult: DatastoreQueryResult, target: any): TimeSeriesData[] {\n        const instances: TimeSeriesData[] = _.flatten(queryResult.map((row: DatastoreQueryResultRow) => row.instances));\n        return instances.map(this.updateLabel.bind(this, target));\n    }\n\n    transformToHeatmap(queryResult: DatastoreQueryResult) {\n        const targetResults: TimeSeriesData[] = queryResult[0].instances;\n        for (const target of targetResults) {\n            // target name is the upper bound\n            const match = target.target.match(/^(.+?)\\-(.+?)$/);\n            if (match) {\n                target.target = match[2];\n            }\n\n            // round timestamps to one second - the heatmap panel calculates the x-axis size accordingly\n            target.datapoints = target.datapoints.map(\n                (dataPoint: Datapoint) => [dataPoint[0], Math.floor(dataPoint[1] / 1000) * 1000]\n            );\n        }\n        return targetResults;\n    }\n\n    transformStringToTable(tableText: string) {\n        let table: TableData = { columns: [], rows: [], type: 'table' };\n        let lines = tableText.split('\\n');\n        let columnSizes: [number, number | undefined][] = [];\n\n        for (let line of lines) {\n            line = line.trim();\n            if (line.length === 0 || line.includes(\"Ctrl-C\"))\n                continue;\n\n            if (table.columns.length === 0) {\n                let tableHeaders = line.split(/\\s\\s+/);\n                for (let i = 0; i < tableHeaders.length; i++) {\n                    const colStartAt = line.indexOf(tableHeaders[i]);\n                    const colEndAt = i + 1 < tableHeaders.length ? line.indexOf(tableHeaders[i + 1]) - 1 : undefined;\n                    table.columns.push({ text: tableHeaders[i] });\n                    columnSizes.push([colStartAt, colEndAt]);\n                }\n            }\n            else {\n                let row = columnSizes.map((colSize: any) => line.substring(colSize[0], colSize[1]).trim());\n                table.rows.push(row);\n            }\n        }\n        return table;\n    }\n\n    transformMultipleMetricsToTable(queryResult: DatastoreQueryResult) {\n        let table: TableData = { columns: [], rows: [], type: 'table' };\n        table.columns = queryResult.map((queryResultRow) => ({ text: queryResultRow.name }));\n        const instances = Object.keys(queryResult[0].instances).sort((a, b) => parseInt(a) - parseInt(b));\n        for (const instance of instances) {\n            const row: (string | number)[] = [];\n            for (const queryResultRow of queryResult) {\n                const target = queryResultRow.instances.find((target: TimeSeriesData) => target.target === instance);\n                if (target && target.datapoints.length > 0)\n                    row.push(target.datapoints[target.datapoints.length - 1][0]);\n                else\n                    row.push('?');\n            }\n            table.rows.push(row);\n\n        }\n        return table;\n    }\n\n    transformToTable(queryResult: DatastoreQueryResult) {\n        if (queryResult.length > 1) {\n            return this.transformMultipleMetricsToTable(queryResult);\n        }\n        else if (queryResult.length === 1) {\n            const targets = queryResult[0].instances;\n            if (targets.length > 0 && targets[0].datapoints.length > 0)\n                return this.transformStringToTable(targets[0].datapoints[0][0] as string);\n        }\n        return { columns: [], rows: [], type: 'table' };\n    }\n\n    transform(queryResult: DatastoreQueryResult, target: any): PanelData[] {\n        if (target.format === TargetFormat.TimeSeries)\n            return this.transformToTimeSeries(queryResult, target);\n        else if (target.format === TargetFormat.Heatmap)\n            return this.transformToHeatmap(queryResult);\n        else if (target.format == TargetFormat.Table)\n            return [this.transformToTable(queryResult)];\n        else\n            throw { message: `Invalid target format '${target.format}', possible options: ${TargetFormat.TimeSeries}, ${TargetFormat.Heatmap}, ${TargetFormat.Table}` };\n    }\n\n\n}\n","import _ from 'lodash';\nimport Context from './context';\nimport { Datapoint, TimeSeriesData, DatastoreQueryResultRow } from './types';\n\ntype StoredDatapoint = [number | string | undefined, number, number?];\n\nexport default class DataStore {\n    private store: Record<string, Record<string, StoredDatapoint[]>> = {}; // store[metric][instance] = [val,ts,origVal]\n\n    constructor(private context: Context, private localHistoryAgeMs: number) {\n    }\n\n    private ingestCounterMetric(instanceStore: StoredDatapoint[], instance: any, pollTimeEpochMs: number) {\n        // first value: store it as undefined, to be filtered by queryTimeSeries()\n        // subsequent values: perform rate conversation\n        if (instanceStore.length > 0) {\n            let [, prevTimeMs, prevOrigVal] = instanceStore[instanceStore.length - 1];\n            const deltaSec = (pollTimeEpochMs - prevTimeMs) / 1000;\n            instanceStore.push([(instance.value - prevOrigVal!) / deltaSec, pollTimeEpochMs, instance.value]);\n        }\n        else {\n            instanceStore.push([undefined, pollTimeEpochMs, instance.value]);\n        }\n    }\n\n    private async ingestMetric(metricStore: Record<string, StoredDatapoint[]>, metric: any, pollTimeEpochMs: number) {\n        const metadata = await this.context.metricMetadata(metric.name);\n        if (!metadata) {\n            console.info(`skipping ingestion of ${metric.name}: metadata not available`);\n            return;\n        }\n\n        for (const instance of metric.instances) {\n            // do not store history for the bpftrace control and output metrics\n            if (!(instance.instanceName in metricStore) ||\n                (metadata.labels && [\"control\", \"output\"].includes(metadata.labels.metrictype))) {\n                metricStore[instance.instanceName] = [];\n            }\n\n            if (metadata.sem === \"counter\") {\n                this.ingestCounterMetric(metricStore[instance.instanceName], instance, pollTimeEpochMs);\n            }\n            else {\n                metricStore[instance.instanceName].push([instance.value, pollTimeEpochMs]);\n            }\n        }\n    }\n\n    async ingest(data: any) {\n        if (_.isEmpty(data))\n            return;\n\n        const pollTimeEpochMs = data.timestamp.s ? data.timestamp.s * 1000 + data.timestamp.us / 1000 : data.timestamp * 1000;\n        for (const metric of data.values) {\n            if (!this.store[metric.name]) {\n                this.store[metric.name] = {};\n            }\n\n            await this.ingestMetric(this.store[metric.name], metric, pollTimeEpochMs);\n        }\n    }\n\n    queryMetric(metric: string, from: number, to: number) {\n        const results: TimeSeriesData[] = [];\n        for (const instance in this.store[metric]) {\n            let target = {\n                // for metrics without instance domains, show metric name\n                target: instance === \"null\" ? metric : instance,\n                datapoints: this.store[metric][instance].filter((dataPoint: StoredDatapoint) => (\n                    from <= dataPoint[1] && dataPoint[1] <= to && dataPoint[0] != undefined\n                )) as Datapoint[]\n            };\n            results.push(target);\n        }\n        return results;\n    }\n\n    queryMetrics(metrics: string[], from: number, to: number) : DatastoreQueryResultRow[] {\n        return metrics.map((metric: string) => ({ name: metric, instances: this.queryMetric(metric, from, to) }));\n    }\n\n    cleanExpiredMetrics() {\n        const keepExpiry = new Date().getTime() - this.localHistoryAgeMs\n        for (const metric in this.store) {\n            for (const instance in this.store[metric]) {\n                this.store[metric][instance] = this.store[metric][instance].filter(\n                    (dataPoint: Datapoint) => dataPoint[1] > keepExpiry\n                );\n            }\n        }\n    }\n}\n","import _ from \"lodash\";\nimport Context from \"./context\";\nimport DataStore from \"./datastore\";\n\nexport default class Poller {\n    private requestedMetrics: Record<string, number> = {}; // {metric: lastRequested}\n\n    constructor(private context: Context, private datastore: DataStore, private keepPollingMs: number) {\n    }\n\n    async poll() {\n        const metrics = Object.keys(this.requestedMetrics);\n        if (metrics.length == 0) {\n            return;\n        }\n\n        const data = await this.context.fetch(metrics, true);\n        await this.datastore.ingest(data);\n\n        const returnedMetrics = data.values.map((metric: any) => metric.name);\n        const missingMetrics = _.difference(metrics, returnedMetrics);\n        if (missingMetrics.length > 0) {\n            console.debug(`fetch didn't include result for ${missingMetrics.join(',')}, clearing it from requested metrics`);\n            for (const missingMetric of missingMetrics) {\n                delete this.requestedMetrics[missingMetric];\n            }\n        }\n    }\n\n    async ensurePolling(metrics: string[]) {\n        const now = new Date().getTime()\n        const metadatas = await this.context.metricMetadatas(metrics);\n        const validMetrics = _.intersection(metrics, Object.keys(metadatas));\n        for (const metric of validMetrics) {\n            this.requestedMetrics[metric] = now\n        }\n        return validMetrics;\n    }\n\n    removeMetricsFromPolling(metrics: string[]) {\n        for (const metric of metrics) {\n            delete this.requestedMetrics[metric];\n        }\n    }\n\n    cleanupExpiredMetrics() {\n        // clean up any not required metrics\n        const pollExpiry = new Date().getTime() - this.keepPollingMs;\n        this.requestedMetrics = _.pickBy(this.requestedMetrics, (lastRequested: number) => lastRequested > pollExpiry);\n    }\n}\n","import Context from \"./context\";\nimport DataStore from \"./datastore\";\nimport Poller from './poller';\n\nexport interface Endpoint {\n    context: Context;\n    poller: Poller;\n    datastore: DataStore;\n}\n\nexport default class EndpointRegistry<T extends Endpoint> {\n    private endpoints: Record<string, T> = {};\n\n    private generateId(url: string, container?: string) {\n        if (!container)\n            container = \"\";\n        return `${url}::${container}`;\n    }\n\n    find(url: string, container?: string) {\n        const id = this.generateId(url, container);\n        return this.endpoints[id];\n    }\n\n    create(url: string, container: string | undefined, keepPollingMs: number, localHistoryAgeMs: number) {\n        const id = this.generateId(url, container);\n        const context = new Context(url, container);\n        const datastore = new DataStore(context, localHistoryAgeMs);\n        const poller = new Poller(context, datastore, keepPollingMs);\n\n        this.endpoints[id] = { context, datastore, poller } as T;\n        return this.endpoints[id];\n    }\n\n    list() {\n        return Object.values(this.endpoints);\n    }\n\n}","// jshint ignore: start\nace.define(\"ace/snippets/pcp\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n    \"use strict\";\n\n    exports.snippets = [];\n    exports.scope = \"pcp\";\n});\n\nace.define(\"ace/mode/pcp_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n    \"use strict\";\n\n    var oop = require(\"../lib/oop\");\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n    var PcpHighlightRules = function () {\n        this.$rules = {\n            \"start\": [{\n                token: \"punctuation\",\n                regex: \"\\\\.\"\n            }, {\n                token: \"entity.name.tag\",\n                regex: '[a-zA-Z]\\\\w*'\n            }]\n        };\n        this.normalizeRules();\n    };\n\n    oop.inherits(PcpHighlightRules, TextHighlightRules);\n\n    exports.PcpHighlightRules = PcpHighlightRules;\n});\n\nace.define(\"ace/mode/pcp\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/pcp_highlight_rules\"], function (require, exports, module) {\n    \"use strict\";\n\n    var oop = require(\"../lib/oop\");\n    var TextMode = require(\"./text\").Mode;\n    var PcpHighlightRules = require(\"./pcp_highlight_rules\").PcpHighlightRules;\n\n    var Mode = function () {\n        this.HighlightRules = PcpHighlightRules;\n        this.$behaviour = this.$defaultBehaviour;\n    };\n    oop.inherits(Mode, TextMode);\n\n    (function () {\n        this.$id = \"ace/mode/pcp\";\n    }).call(Mode.prototype);\n\n    exports.Mode = Mode;\n\n});\n","import _ from \"lodash\";\nimport kbn from \"grafana/app/core/utils/kbn\";\nimport { TargetFormat, PanelData } from \"../lib/types\";\nimport EndpointRegistry, { Endpoint } from \"../lib/endpoint_registry\";\nimport Transformations from \"../lib/transformations\";\nimport Context from \"../lib/context\";\nimport { getConnectionParams } from \"../lib/utils\";\n\nexport class PcpLiveDatasource {\n\n    name: string;\n    withCredentials: boolean;\n    headers: any;\n\n    pollIntervalMs: number; // poll metric sources every X ms\n    keepPollingMs: number; // we will keep polling a metric for up to X ms after it was last requested\n    localHistoryAgeMs: number; // age out time\n\n    endpointRegistry: EndpointRegistry<Endpoint>;\n    transformations: Transformations;\n\n    container_name_filter: any;\n\n    /** @ngInject **/\n    constructor(private instanceSettings: any, private backendSrv: any, private templateSrv: any, private variableSrv: any) {\n        this.name = instanceSettings.name;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n        this.pollIntervalMs = kbn.interval_to_ms(instanceSettings.jsonData.pollInterval || '1s');\n        this.keepPollingMs = kbn.interval_to_ms(instanceSettings.jsonData.keepPolling || '20s');\n        this.localHistoryAgeMs = kbn.interval_to_ms(instanceSettings.jsonData.localHistoryAge || '5m');\n\n        Context.datasourceRequest = this.doRequest.bind(this);\n        this.endpointRegistry = new EndpointRegistry();\n        this.transformations = new Transformations(this.templateSrv);\n\n        if (this.pollIntervalMs > 0)\n            setInterval(this.doPollAll.bind(this), this.pollIntervalMs);\n\n        const UUID_REGEX = /[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/\n        this.container_name_filter = name => true // name => name.match(UUID_REGEX)\n    }\n\n    doPollAll() {\n        let promises: Promise<void>[] = [];\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.datastore.cleanExpiredMetrics();\n            endpoint.poller.cleanupExpiredMetrics();\n            promises.push(endpoint.poller.poll());\n        }\n        return Promise.all(promises);\n    }\n\n    getOrCreateEndpoint(target: any = {}) {\n        const [url, container] = getConnectionParams(this.variableSrv, target, this.instanceSettings);\n        let endpoint = this.endpointRegistry.find(url, container);\n        if (!endpoint) {\n            endpoint = this.endpointRegistry.create(url, container, this.keepPollingMs, this.localHistoryAgeMs);\n        }\n        return endpoint;\n    }\n\n    async doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n        return await this.backendSrv.datasourceRequest(options);\n    }\n\n    async testDatasource() {\n        const [url, container] = getConnectionParams(this.variableSrv, {}, this.instanceSettings);\n        const context = new Context(url, container);\n        try {\n            await context.createContext();\n            return { status: 'success', message: \"Data source is working\", title: \"Success\" };\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                title: 'Additional configuration required',\n                message: `Could not connect to ${url}. To use this data source, ` +\n                    'please configure the url, and optionally the container dashboard variable(s).',\n            }\n        }\n    }\n\n    /**\n     * called by the templating engine (dashboard variables with type = query)\n     */\n    async metricFindQuery(query: string) {\n        let endpoint = this.getOrCreateEndpoint();\n        const metricsResponse = await endpoint.context.fetch([query]);\n        return metricsResponse.values[0].instances\n            .map((instance: any) => ({ text: instance.value, value: instance.value }));\n    }\n\n    async query(query: any) {\n        const panelData: PanelData[] = [];\n        for (const target of query.targets) {\n            if (target.hide || (!target.expr && !target.target))\n                continue;\n\n            // TODO: remove me: workaround for old dashboards\n            if (!target.expr)\n                target.expr = target.target;\n            if (!target.format && (target.type === \"timeseries\" || target.type === \"timeserie\"))\n                target.format = \"time_series\";\n\n            // TODO: allow templating\n            const expr: string = target.expr.trim();\n            if (expr.length === 0)\n                continue;\n\n            let endpoint = this.getOrCreateEndpoint(target);\n            try {\n                //const parser = new Parser();\n                //const expressions = parser.parse(expr);\n                //const metricsToPoll = expressions.variables({ withMembers: true });\n\n                let metricsToPoll: string[] = [];\n                if (target.format === TargetFormat.Table) {\n                    if (!_.every(query.targets, ['format', TargetFormat.Table]))\n                        throw { message: \"To use the table format, every query of this panel has to be in table format\" };\n                    // note: this ignores that the endpoint could be different for each query\n                    metricsToPoll = query.targets.map((target: any) => target.expr);\n                }\n                else {\n                    metricsToPoll = [expr];\n                }\n\n                const validMetrics = await endpoint.poller.ensurePolling(metricsToPoll);\n                if (validMetrics.length !== metricsToPoll.length) {\n                    const invalidMetrics = _.difference(metricsToPoll, validMetrics);\n                    throw { message: `Cannot find metric ${invalidMetrics.join(',')} on PMDA.` };\n                }\n\n                let queryResult = endpoint.datastore.queryMetrics(metricsToPoll, query.range.from.valueOf(), query.range.to.valueOf());\n                panelData.push(...this.transformations.transform(queryResult, target));\n                if (target.format === TargetFormat.Table) {\n                    break;\n                }\n            }\n            catch (error) {\n                // catch all exceptions and add the refId of the panel\n                error.refId = target.refId;\n                throw error;\n            }\n        }\n\n        return { data: panelData };\n    }\n}\n","import { PcpLiveDatasource } from \"./datasource\";\nimport Context from \"../lib/context\";\nimport { Endpoint } from \"../lib/endpoint_registry\";\nimport { MetricMetadata } from \"../lib/types\";\n\nexport default class PCPMetricCompleter {\n\n    identifierRegexps = [/\\./, /[a-zA-Z0-9_]/];\n\n    constructor(private datasource: PcpLiveDatasource, private target: any) {\n    }\n\n    getCompletions(editor: any, session: any, pos: any, prefix: any, callback: any) {\n        if (editor.completers.length > 1) {\n            // the ace editor comes with a snippetCompleter, textCompleter, keywordCompleter\n            // our completor is the last of the array - let's remove all other\n            // completers except ours\n            editor.completers = editor.completers.slice(-1);\n        }\n\n        this.findCompletions(editor, session, pos, prefix).then((value) => {\n            callback(null, value);\n        }, (reason: any) => {\n            callback(reason, []);\n        });\n    }\n\n    getHelpText(metric: string, metadata: MetricMetadata) {\n        const type = metadata.type;\n        const semantics = metadata.sem;\n        const units = metadata.units;\n        const help = metadata['text-help'] || metadata['text-oneline'];\n        return `<b>${metric}</b><hr />` +\n            `Type: ${type}<br />` +\n            `Semantics: ${semantics}<br />` +\n            `Units: ${units}<br /><br />` +\n            `${help}`;\n    }\n\n    async findCompletions(editor: any, session: any, pos: any, prefix: any) {\n        // don't do this in constructor of PCPMetricCompleter, as the user could\n        // change the endpoint settings of the query, but the constructor is only called once\n        const endpoint = this.datasource.getOrCreateEndpoint(this.target);\n\n        const editorValue: string = editor.getValue();\n        let metricPrefix = \"\";\n\n        if (editorValue.includes(\".\")) {\n            metricPrefix = editorValue.substring(0, editorValue.lastIndexOf(\".\"));\n        }\n\n        const suggestions = await endpoint.context.children(metricPrefix);\n        if (prefix !== \".\")\n            prefix = \"\";\n\n        const completions: any[] = [];\n        completions.push(...suggestions.nonleaf.map((nonleaf: string) => ({\n            caption: nonleaf,\n            value: prefix + nonleaf,\n            meta: \"namespace\",\n            score: Number.MAX_VALUE\n        })));\n\n        const metadatas = await endpoint.context.metricMetadatas(suggestions.leaf.map((leaf: string) => `${metricPrefix}.${leaf}`));\n        completions.push(...suggestions.leaf.map((leaf: string) => ({\n            caption: leaf,\n            value: prefix + leaf,\n            meta: \"metric\",\n            score: Number.MAX_VALUE,\n            docHTML: this.getHelpText(`${metricPrefix}.${leaf}`, metadatas[`${metricPrefix}.${leaf}`])\n        })));\n\n        return completions;\n    }\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\nimport { TargetFormat } from '../lib/types';\nimport PCPMetricCompleter from './completer';\nimport './mode-pcp';\n\nexport class PcpLiveDatasourceQueryCtrl extends QueryCtrl {\n    static templateUrl = 'datasources/live/partials/query.editor.html'\n\n    formats: any = [];\n\n    /** @ngInject **/\n    constructor($scope, $injector) {\n        super($scope, $injector);\n\n        // TODO: remove workaround\n        this.target.expr = this.target.expr || this.target.target || \"\";\n        this.target.format = this.target.format || this.getDefaultFormat();\n        this.target.url = this.target.url || null;\n        this.target.container = this.target.container || null;\n\n        this.formats = [\n            { text: \"Time series\", value: TargetFormat.TimeSeries },\n            { text: \"Table\", value: TargetFormat.Table },\n            { text: \"Heatmap\", value: TargetFormat.Heatmap },\n        ];\n    }\n\n    getDefaultFormat() {\n        if (this.panelCtrl.panel.type === 'table') {\n            return TargetFormat.Table;\n        } else if (this.panelCtrl.panel.type === 'heatmap') {\n            return TargetFormat.Heatmap;\n        }\n        return TargetFormat.TimeSeries;\n    }\n\n    async getContainers() {\n        let containers = await this.datasource.metricFindQuery('containers.name');\n        containers.unshift({ text: '-', value: null });\n        return containers;\n    }\n\n    getCompleter() {\n        return new PCPMetricCompleter(this.datasource, this.target);\n    }\n\n    refreshMetricData() {\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n}\n","import _ from \"lodash\";\nimport { PcpLiveDatasource } from \"./datasource\";\n\nexport class PcpLiveConfigCtrl {\n    static templateUrl = 'datasources/live/partials/config.html'\n    current: any;\n\n    /** @ngInject **/\n    constructor(private backendSrv: any, private templateSrv: any, private variableSrv: any) {\n        this.current.jsonData.container = this.current.jsonData.container || null;\n    }\n\n    async getContainers() {\n        const instanceSettings = _.cloneDeep(this.current);\n        instanceSettings.jsonData.pollInterval = '0s'; // otherwise setInterval will be called in constructor\n        let datasource = new PcpLiveDatasource(instanceSettings, this.backendSrv, this.templateSrv, this.variableSrv);\n\n        let containers: any = [];\n        try {\n            containers = await datasource.metricFindQuery('containers.name');\n        }\n        catch (e) {\n            // probably URL is not set up correctly, ignore\n        }\n        containers.unshift({ text: '-', value: null });\n        return containers;\n    }\n\n}\n","import { PcpLiveDatasource } from './datasource';\nimport { PcpLiveDatasourceQueryCtrl } from './query_ctrl';\nimport { PcpLiveConfigCtrl } from './config_ctrl';\n\nclass PcpLiveAnnotationsQueryCtrl {\n  static templateUrl = 'datasources/live/partials/annotations.editor.html'\n}\n\nexport {\n  PcpLiveDatasource as Datasource,\n  PcpLiveDatasourceQueryCtrl as QueryCtrl,\n  PcpLiveConfigCtrl as ConfigCtrl,\n  PcpLiveAnnotationsQueryCtrl as AnnotationsQueryCtrl\n};\n","import _ from \"lodash\";\n\n// typescript decorator which makes sure that this function\n// is called only once at a time\n// subsequent calls return the promise of the first call\nexport function synchronized(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    let method = descriptor.value;\n\n    descriptor.value = function () {\n        if (!this.inflightCalls)\n            this.inflightCalls = {};\n        if (this.inflightCalls[propertyKey])\n            return this.inflightCalls[propertyKey];\n\n        this.inflightCalls[propertyKey] = method.apply(this, arguments);\n        return this.inflightCalls[propertyKey].then((result: any) => {\n            this.inflightCalls[propertyKey] = null;\n            return result;\n        }, (reason: any) => {\n            this.inflightCalls[propertyKey] = null;\n            throw reason;\n        });\n    }\n}\n\nexport function isBlank(str: string) {\n    return !(_.isString(str) && str.trim().length > 0);\n}\n\nexport function getDashboardVariables(variableSrv: any): any {\n    const variables = {};\n    if (!variableSrv.variables) {\n        // variables are not defined on the datasource settings page\n        return {};\n    }\n\n    variableSrv.variables.forEach((variable) => {\n        let variableValue = variable.current.value;\n        if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n            if (variable.allValue === null) {\n                variableValue = variable.options.slice(1).map((textValuePair: any) => textValuePair.value);\n            } else {\n                variableValue = variable.allValue;\n            }\n        }\n\n        variables[variable.name] = {\n            text: variable.current.text,\n            value: variableValue,\n        };\n    });\n\n    return variables;\n}\n\nexport function getConnectionParams(variableSrv: any, target: any, instanceSettings: any): [string, string?] {\n    const dashboardVariables = getDashboardVariables(variableSrv);\n    let url: string = \"\";\n    let container: string | undefined;\n\n    if (!isBlank(target.url))\n        url = target.url;\n    else if (dashboardVariables.url && !isBlank(dashboardVariables.url.value))\n        url = dashboardVariables.url.value;\n    else if (!isBlank(instanceSettings.url))\n        url = instanceSettings.url;\n    else\n        throw { message: \"Cannot find any connection url.\" };\n\n    if (!isBlank(target.container))\n        container = target.container;\n    else if (dashboardVariables.container && !isBlank(dashboardVariables.container.value))\n        container = dashboardVariables.container.value;\n    else if (!isBlank(instanceSettings.container))\n        container = instanceSettings.container;\n\n    return [url, container];\n}\n","import _ from 'lodash';\nimport { synchronized } from './utils';\nimport { MetricMetadata } from './types';\n\nexport default class Context {\n\n    static datasourceRequest: (options: any) => any;\n    private context: string;\n    private metricMetadataCache: Record<string, MetricMetadata> = {};\n    private indomCache: Record<string, Record<number, string>> = {}; // indomCache[metric][instance_id] = instance_name\n    private d: string = '';\n\n    constructor(readonly url: string, readonly container?: string) {\n        // if port != 44322, use pmwebd API with underscore\n        // TODO: remove once transition to pmproxy is done\n        if (!url.includes(\":44322\")) {\n            this.d = '_';\n        }\n    }\n\n    @synchronized\n    async createContext() {\n        let contextUrl = `${this.url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`;\n\n        const contextResponse = await Context.datasourceRequest({ url: contextUrl });\n        this.context = contextResponse.data.context;\n\n        if (this.container) {\n            await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: \"pmcd.client.container\", value: this.container }\n            });\n        }\n    }\n\n    private async ensureContext(fn: () => any) {\n        if (!this.context) {\n            await this.createContext();\n        }\n\n        try {\n            return await fn();\n        } catch (error) {\n            if ((_.isString(error.data) && error.data.includes(\"12376\")) ||\n                (_.isObject(error.data) && error.data.message.includes(\"unknown context identifier\"))) {\n                console.debug(\"context expired, creating new context...\");\n                await this.createContext();\n                return await fn();\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n\n    async metricMetadatas(metrics: string[]): Promise<{ [key: string]: MetricMetadata }> {\n        const requiredMetrics = _.difference(metrics, Object.keys(this.metricMetadataCache));\n        if (requiredMetrics.length > 0) {\n            requiredMetrics.push(\"pmcd.control.timeout\"); // TODO: remove workaround - server should return empty list if no metrics were found\n            const metadata = await this.ensureContext(async () => {\n                const response = await Context.datasourceRequest({\n                    //url: `${this.url}/pmapi/${this.context}/${this.d}metric`,\n                    url: `http://localhost:44322/pmapi/metric`,\n                    params: { names: requiredMetrics.join(',') }\n                });\n                return response.data.metrics;\n            });\n\n            for (const metric of metadata) {\n                this.metricMetadataCache[metric.name] = metric;\n            }\n        }\n        return _.pick(this.metricMetadataCache, metrics); // _.pick ignores non-existing keys\n    }\n\n    async metricMetadata(metric: string) {\n        const metadata = await this.metricMetadatas([metric]);\n        return metadata[metric];\n    }\n\n    private async refreshIndoms(metric: string) {\n        const indoms = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}indom`,\n                params: { name: metric }\n            });\n            return response.data.instances;\n        });\n\n        // convert [{instance: X, name: Y}] to {instance: name}\n        this.indomCache[metric] = {};\n        for (const indom of indoms) {\n            this.indomCache[metric][indom.instance] = indom.name;\n        }\n        return this.indomCache[metric];\n    }\n\n    private async updateInstanceNames(metric: any) {\n        if (metric.instances.length == 0) {\n            return;\n        } else if (metric.instances[0].instance === null || metric.instances[0].instance === -1) {\n            // this metric has no instances (single value)\n            metric.instances[0].instanceName = null;\n            return;\n        }\n\n        if (!(metric.name in this.indomCache))\n            this.indomCache[metric.name] = await this.refreshIndoms(metric.name);\n\n        let refreshed = false;\n        for (const instance of metric.instances) {\n            instance.instanceName = this.indomCache[metric.name][instance.instance];\n            if (!instance.instanceName && !refreshed) {\n                // refresh instances at max once per metric\n                this.indomCache[metric.name] = await this.refreshIndoms(metric.name);\n                instance.instanceName = this.indomCache[metric.name][instance.instance];\n                refreshed = true;\n            }\n        }\n    }\n\n    async fetch(metrics: string[], instanceNames: boolean = false) {\n        metrics.push(\"pmcd.control.timeout\"); // TODO: remove workaround - server should return empty list if no metrics were found\n\n        const data = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}fetch`,\n                params: { names: metrics.join(',') }\n            });\n            return response.data;\n        });\n\n        const returnedMetrics = data.values.map((metric: any) => metric.name);\n        const missingMetrics = _.difference(metrics, returnedMetrics);\n        if (missingMetrics.length > 0) {\n            console.debug(`fetch didn't include result for ${missingMetrics.join(',')}, clearing it from metric metadata cache`);\n            for (const missingMetric of missingMetrics) {\n                delete this.metricMetadataCache[missingMetric];\n            }\n        }\n\n        if (instanceNames) {\n            for (const metric of data.values) {\n                await this.updateInstanceNames(metric);\n            }\n        }\n\n        return data;\n    }\n\n    async store(metric: string, value: string) {\n        return await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: metric, value: value }\n            });\n            return response.data;\n        });\n    }\n\n    async children(prefix: string) {\n        return await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}children`,\n                params: { prefix: prefix }\n            });\n            return response.data;\n        });\n    }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;"],"sourceRoot":""}