{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./datasources/lib/types.ts","webpack:///external \"lodash\"","webpack:///./datasources/lib/transformations.ts","webpack:///./datasources/lib/datastore.ts","webpack:///./datasources/lib/poller.ts","webpack:///./datasources/lib/endpoint_registry.ts","webpack:///./datasources/live/datasource.ts","webpack:///./datasources/live/utils.ts","webpack:///./datasources/live/query_ctrl.ts","webpack:///./datasources/live/module.ts","webpack:///./datasources/lib/context.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TargetFormat","__webpack_exports__","__WEBPACK_EXTERNAL_MODULE__1__","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","_types__WEBPACK_IMPORTED_MODULE_1__","Transformations","templateSrv","this","getLabel","target","legendFormat","a","isEmpty","targetSpl","split","vars","instance","metric0","length","replace","updateLabels","targetResults","_this","map","datapoints","transformToHeatmap","_i","targetResults_1","match","dataPoint","Math","floor","transformToTable","tableText","table","columns","rows","type","lines","columnSizes","line","trim","includes","tableHeaders","colStartAt","indexOf","colEndAt","undefined","push","text","row","colSize","substring","lines_1","transform","format","TimeSeries","Heatmap","Table","message","DataStore","context","oldestDataMs","store","ingestCounterMetric","instanceStore","pollTimeEpochMs","_a","prevTimeMs","prevOrigVal","deltaSec","ingestMetric","metricStore","metric","metadata","findMetricMetadata","instances","instanceName","labels","metrictype","sem","console","info","ingest","data","external_lodash_default","timestamp","us","values","queryTimeSeries","metrics","from","to","metrics_1","filter","cleanExpiredMetrics","keepExpiry","Date","getTime","Poller","datastore","keepPollingMs","requestedMetrics","poll","keys","fetch","sent","ensurePolling","now","removeMetricsFromPolling","metrics_2","cleanupExpiredMetrics","pollExpiry","pickBy","lastRequested","endpoint_registry_EndpointRegistry","EndpointRegistry","endpoints","generateId","url","container","find","id","lib_context","lib_datastore","poller","lib_poller","list","datasource_PcpLiveDatasource","PcpLiveDatasource","instanceSettings","$q","backendSrv","variableSrv","q","withCredentials","headers","Content-Type","basicAuth","container_name_filter","pollIntervalMs","jsonData","olderstDataMs","datasourceRequest","doRequest","endpointRegistry","endpoint_registry","transformations","setInterval","doPollAll","$inject","endpoint","promises","Promise","all","buildQueryTargets","options","targets","replacedMatch","JSON","parse","scopedVars","displayName","refId","hide","getVariables","variables","forEach","variable","variableValue","isEqual","allValue","slice","textValuePair","current","getConfiguredEndpoint","_container","targetName","iname","targetDisplay","array","A","concat","sort","a1","a2","L","charAt","sharedPrefixLength","firstInstanceValue","allInstancesTheSame","every","request","__assign","status","title","__generator","query","iv","getAllMetricNames","mn","dashboardVariables","expr","result","range","valueOf","apply","error","query_ctrl_GenericDatasourceQueryCtrl","_super","GenericDatasourceQueryCtrl","$scope","$injector","getDefaultFormat","formats","types","panelCtrl","panel","getAllMetrics","datasource","metricFindQuery","refreshMetricData","refresh","templateUrl","GenericConfigCtrl","GenericQueryOptionsCtrl","GenericAnnotationsQueryCtrl","Context","contextPromise","metricMetadataCache","contextUrl","contextResponse","params","_createContext","isString","error_1","debug","prefix","ensureContext","indoms_1","indoms","indom","indomCache","instanceNames","names","join","_d","_b","_c","indomsForMetric","refreshed"],"mappings":"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","file":"./datasources/live/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 130);\n","export type Datapoint = [number | string | undefined, number, number?];\n\nexport interface TimeSeriesResult {\n    target: string;\n    datapoints: Datapoint[]\n}\n\nexport interface TableResult {\n    columns: any[]\n    rows: any[]\n    type: string\n}\n\nexport type TargetResult = TimeSeriesResult | TableResult;\n\nexport enum TargetFormat {\n    TimeSeries = \"time_series\",\n    Table = \"table\",\n    Heatmap = \"heatmap\",\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import _ from 'lodash';\nimport { TimeSeriesResult, Datapoint, TableResult, TargetFormat } from './types';\n\nexport default class Transformations {\n\n    constructor(private templateSrv: any) {\n    }\n\n    getLabel(target: string, legendFormat: string) {\n        if (_.isEmpty(legendFormat)) {\n            return target;\n        }\n        else {\n            const targetSpl = target.split('.');\n            let vars = {\n                instance: { value: target },\n                metric0: { value: targetSpl[targetSpl.length - 1] }\n            };\n            return this.templateSrv.replace(legendFormat, vars);\n        }\n    }\n\n    updateLabels(targetResults: TimeSeriesResult[], target: any) {\n        return targetResults.map((t: TimeSeriesResult) => {\n            return { target: this.getLabel(t.target, target.legendFormat), datapoints: t.datapoints }\n        });\n    }\n\n    transformToHeatmap(targetResults: TimeSeriesResult[]) {\n        for (const target of targetResults) {\n            // target name is the upper bound\n            const match = target.target.match(/^(.+?)\\-(.+?)$/);\n            if (match) {\n                target.target = match[2];\n            }\n\n            // round timestamps to one second - the heatmap panel calculates the x-axis size accordingly\n            target.datapoints = target.datapoints.map(\n                (dataPoint: Datapoint) => [dataPoint[0], Math.floor(dataPoint[1] / 1000) * 1000]\n            );\n        }\n        return targetResults;\n    }\n\n    transformToTable(targetResults: TimeSeriesResult[]) {\n        let tableText = \"\";\n        if (targetResults.length > 0 && targetResults[0].datapoints.length > 0)\n            tableText = targetResults[0].datapoints[0][0] as string;\n\n        let table: TableResult = { columns: [], rows: [], type: 'table' };\n        let lines = tableText.split('\\n');\n        let columnSizes: [number, number | undefined][] = [];\n\n        for (let line of lines) {\n            line = line.trim();\n            if (line.length === 0 || line.includes(\"Ctrl-C\"))\n                continue;\n\n            if (_.isEmpty(table.columns)) {\n                let tableHeaders = line.split(/\\s\\s+/);\n                for (let i = 0; i < tableHeaders.length; i++) {\n                    const colStartAt = line.indexOf(tableHeaders[i]);\n                    const colEndAt = i + 1 < tableHeaders.length ? line.indexOf(tableHeaders[i + 1]) - 1 : undefined;\n                    table.columns.push({ text: tableHeaders[i] });\n                    columnSizes.push([colStartAt, colEndAt]);\n                }\n            }\n            else {\n                let row = columnSizes.map((colSize: any) => line.substring(colSize[0], colSize[1]).trim());\n                table.rows.push(row);\n            }\n        }\n        return [table];\n    }\n\n    transform(targetResults: TimeSeriesResult[], target: any) {\n        if (target.format === TargetFormat.TimeSeries)\n            return this.updateLabels(targetResults, target);\n        else if (target.format === TargetFormat.Heatmap)\n            return this.transformToHeatmap(targetResults);\n        else if (target.format == TargetFormat.Table)\n            return this.transformToTable(targetResults);\n        else\n            throw { message: `Invalid target format '${target.format}', possible options: ${TargetFormat.TimeSeries}, ${TargetFormat.Heatmap}, ${TargetFormat.Table}` };\n    }\n\n\n}\n","import _ from 'lodash';\nimport Context from './context';\nimport { Datapoint, TimeSeriesResult } from './types';\n\nexport default class DataStore {\n    private store: Record<string, Record<string, Datapoint[]>> = {}; // store[metric][instance] = [val,ts,origVal]\n\n    constructor(private context: Context, private oldestDataMs: number) {\n    }\n\n    ingestCounterMetric(instanceStore: Datapoint[], instance: any, pollTimeEpochMs: number) {\n        // first value: store it as undefined, to be filtered by queryTimeSeries()\n        // subsequent values: perform rate conversation\n        if (instanceStore.length > 0) {\n            let [, prevTimeMs, prevOrigVal] = instanceStore[instanceStore.length - 1];\n            const deltaSec = (pollTimeEpochMs - prevTimeMs) / 1000;\n            instanceStore.push([(instance.value - prevOrigVal!) / deltaSec, pollTimeEpochMs, instance.value]);\n        }\n        else {\n            instanceStore.push([undefined, pollTimeEpochMs, instance.value]);\n        }\n    }\n\n    ingestMetric(metricStore: Record<string, Datapoint[]>, metric: any, pollTimeEpochMs: number) {\n        const metadata = this.context.findMetricMetadata(metric.name);\n        if (!metadata) {\n            console.info(`skipping ingestion of ${metric.name}: metadata not available`);\n            return;\n        }\n\n        for (const instance of metric.instances) {\n            let instanceStore = metricStore[instance.instanceName];\n\n            // for the bpftrace output variable, always recreate the metric store (do not store history)\n            if (!instanceStore || (metadata.labels && metadata.labels.metrictype === \"output\")) {\n                instanceStore = metricStore[instance.instanceName] = [];\n            }\n\n            if (metadata.sem === \"counter\") {\n                this.ingestCounterMetric(instanceStore, instance, pollTimeEpochMs);\n            }\n            else {\n                instanceStore.push([instance.value, pollTimeEpochMs]);\n            }\n        }\n    }\n\n    ingest(data: any) {\n        if (_.isEmpty(data))\n            return;\n\n        const pollTimeEpochMs = data.timestamp.s * 1000 + data.timestamp.us / 1000;\n        for (const metric of data.values) {\n            if (!this.store[metric.name]) {\n                this.store[metric.name] = {};\n            }\n\n            this.ingestMetric(this.store[metric.name], metric, pollTimeEpochMs);\n        }\n    }\n\n    queryTimeSeries(metrics: string[], from: number, to: number) {\n        let targetResults: TimeSeriesResult[] = [];\n        for (const metric of metrics) {\n            if (!(metric in this.store))\n                continue;\n\n            for (const instance in this.store[metric]) {\n                let target = {\n                    // for metrics without instance domains, show metric name\n                    target: instance === \"null\" ? metric : instance,\n                    datapoints: this.store[metric][instance].filter((dataPoint: Datapoint) => (\n                        from <= dataPoint[1] && dataPoint[1] <= to && dataPoint[0] != undefined\n                    ))\n                };\n\n                targetResults.push(target);\n            }\n        }\n        return targetResults;\n    }\n\n    cleanExpiredMetrics() {\n        const keepExpiry = new Date().getTime() - this.oldestDataMs\n        for (const metric in this.store) {\n            for (const instance in this.store[metric]) {\n                this.store[metric][instance] = this.store[metric][instance].filter(\n                    (dataPoint: Datapoint) => dataPoint[1] > keepExpiry\n                );\n            }\n        }\n    }\n}\n","import _ from \"lodash\";\nimport Context from \"./context\";\nimport DataStore from \"./datastore\";\n\nexport default class Poller {\n    private requestedMetrics: Record<string, number> = {}; // {metric: lastRequested}\n\n    constructor(private context: Context, private datastore: DataStore, private keepPollingMs: number) {\n    }\n\n    async poll() {\n        const metrics = Object.keys(this.requestedMetrics);\n        if (metrics.length == 0) {\n            return;\n        }\n\n        const data = await this.context.fetch(metrics, true);\n        this.datastore.ingest(data);\n    }\n\n    ensurePolling(metrics: string[]) {\n        const now = new Date().getTime()\n        for (const metric of metrics) {\n            if (!this.context.findMetricMetadata(metric))\n                throw { message: `Cannot find metric ${metric} on PMDA.` };\n            this.requestedMetrics[metric] = now\n        }\n    }\n\n    removeMetricsFromPolling(metrics: string[]) {\n        for (const metric of metrics) {\n            delete this.requestedMetrics[metric];\n        }\n    }\n\n    cleanupExpiredMetrics() {\n        // clean up any not required metrics\n        const pollExpiry = new Date().getTime() - this.keepPollingMs;\n        this.requestedMetrics = _.pickBy(this.requestedMetrics, (lastRequested: number) => lastRequested > pollExpiry);\n    }\n}\n","import Context from \"./context\";\nimport DataStore from \"./datastore\";\nimport Poller from './poller';\n\nexport interface Endpoint {\n    context: Context;\n    poller: Poller;\n    datastore: DataStore;\n}\n\nexport default class EndpointRegistry<T extends Endpoint> {\n    private endpoints: Record<string, T> = {};\n\n    private generateId(url: string, container?: string) {\n        if (!container)\n            container = \"\";\n        return `${url}::${container}`;\n    }\n\n    find(url: string, container?: string) {\n        const id = this.generateId(url, container);\n        return this.endpoints[id];\n    }\n\n    create(url: string, container: string | null, keepPollingMs: number, oldestDataMs: number) {\n        const id = this.generateId(url, container!);\n        const context = new Context(url, container!);\n        const datastore = new DataStore(context, oldestDataMs);\n        const poller = new Poller(context, datastore, keepPollingMs);\n\n        this.endpoints[id] = { context, datastore, poller } as T;\n        return this.endpoints[id];\n    }\n\n    list() {\n        return Object.values(this.endpoints);\n    }\n\n}","import _ from \"lodash\";\nimport { Parser } from 'expr-eval'\n\nimport Poller from './poller'\nimport * as utils from './utils'\nimport * as extensions from './extensions'\nimport { TargetResult } from \"../lib/types\";\nimport EndpointRegistry, { Endpoint } from \"../lib/endpoint_registry\";\nimport Transformations from \"../lib/transformations\";\nimport Context from \"../lib/context\";\n\nexport class PcpLiveDatasource {\n\n  instanceSettings: any;\n  name: string;\n  url: string;\n  q: any;\n  backendSrv: any;\n  templateSrv: any;\n  variableSrv: any;\n  withCredentials: boolean;\n  headers: any;\n  poller: Poller;\n  container_name_filter: any;\n\n  pollIntervalMs: number; // poll metric sources every X ms\n  keepPollingMs: number; // we will keep polling a metric for up to X ms after it was last requested\n  olderstDataMs: number; // age out time\n\n  endpointRegistry: EndpointRegistry<Endpoint>;\n  transformations: Transformations;\n\n  /** @ngInject **/\n  constructor(instanceSettings, $q, backendSrv, templateSrv, variableSrv) {\n    this.instanceSettings = instanceSettings;\n    this.name = instanceSettings.name;\n    this.url = instanceSettings.url;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.variableSrv = variableSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    //this.poller = new Poller(backendSrv);\n\n    const UUID_REGEX = /[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/\n    this.container_name_filter = name => true // name => name.match(UUID_REGEX)\n\n\n    this.pollIntervalMs = instanceSettings.jsonData.pollIntervalMs || 1000;\n    this.keepPollingMs = instanceSettings.jsonData.keepPollingMs || 20000;\n    this.olderstDataMs = instanceSettings.jsonData.olderstDataMs || 5 * 60 * 1000;\n\n    Context.datasourceRequest = this.doRequest.bind(this);\n    this.endpointRegistry = new EndpointRegistry();\n    this.transformations = new Transformations(this.templateSrv);\n\n    if (this.pollIntervalMs > 0)\n      setInterval(this.doPollAll.bind(this), this.pollIntervalMs);\n  }\n\n  doPollAll() {\n    let promises: Promise<void>[] = [];\n    for (const endpoint of this.endpointRegistry.list()) {\n        endpoint.datastore.cleanExpiredMetrics();\n        endpoint.poller.cleanupExpiredMetrics();\n        promises.push(endpoint.poller.poll());\n    }\n    return Promise.all(promises);\n  }\n\n  buildQueryTargets(options) {\n    return options.targets\n      .filter((target) => {\n        // remove placeholder targets\n        return target.target !== 'select metric';\n      })\n      .map((target) => {\n        let data = _.isUndefined(target.data) ? null : target.data;\n\n        if (typeof data === 'string' && data.trim() === '') {\n          data = null;\n        }\n\n        if (data !== null) {\n          const match = data.match(/(\"(\\$.+?)\")/g);\n          if (match !== null) {\n            data\n              .match(/(\"(\\$.+?)\")/g)\n              .map((match) => {\n                const replacedMatch = this.templateSrv.replace(match, options.scopedVars, 'json');\n                if (replacedMatch !== match) {\n                  data = data.replace(match, replacedMatch.substring(1, replacedMatch.length - 1));\n                }\n              });\n          }\n          data = JSON.parse(data);\n        }\n\n        return {\n          data,\n          target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n          displayName: this.templateSrv.replace(target.displayName, options.scopedVars, 'regex'),\n          refId: target.refId,\n          hide: target.hide,\n          type: target.type,\n        };\n      });\n  }\n\n  getVariables(): any {\n    const variables = {};\n    if (!this.variableSrv.variables) {\n        // variables are not defined on the datasource settings page\n        return {};\n    }\n\n    this.variableSrv.variables.forEach((variable) => {\n      let variableValue = variable.current.value;\n      if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n        if (variable.allValue === null) {\n          variableValue = variable.options.slice(1).map(textValuePair => textValuePair.value);\n        } else {\n          variableValue = variable.allValue;\n        }\n      }\n\n      variables[variable.name] = {\n        text: variable.current.text,\n        value: variableValue,\n      };\n    });\n\n    return variables;\n  }\n\n  getConfiguredEndpoint() {\n      const variables = this.getVariables();\n      if ('_proto' in variables && '_host' in variables && '_port' in variables) {\n          let endpoint = `${variables._proto.value}://${variables._host.value}:${variables._port.value}`;\n          if ('_container' in variables) {\n              endpoint += `::${variables._container.value}`;\n          }\n          return endpoint;\n      }\n      else {\n          let endpoint = this.instanceSettings.url;\n          if (this.instanceSettings.jsonData.container) {\n            endpoint += `::${this.instanceSettings.jsonData.container}`;\n        }\n        return endpoint;\n      }\n  }\n\n// above here, standard simple json datasource\n/////////////////////////\n// below here, pcp specific stuff\n\n    targetName(instances, instance, targets, target) {\n        // special fixes for these histogram labels\n        const HISTOGRAM_INSTANCE_NAME_FIX_TARGETS = ['bcc.runq.latency', 'bcc.disk.all.latency']\n        if (HISTOGRAM_INSTANCE_NAME_FIX_TARGETS.includes(target)) {\n            const iname = instances[instance]\n            return (iname.split && iname.split('-')[1]) || iname\n        }\n\n        const targetDisplay = (targets.length <= 1)\n            ? target\n            : target.substring(utils.sharedPrefixLength(targets.map(t => t.target)))\n\n        const firstInstanceValue = instances && Object.values(instances)[0]\n        const allInstancesTheSame = instances && Object.values(instances).every(i => i === firstInstanceValue)\n\n        if (instances[instance]) {\n            if (targets.length > 1) {\n                if (allInstancesTheSame) {\n                    return targetDisplay\n                } else {\n                    return `${targetDisplay} (${instances[instance]})`\n                }\n            } else {\n                return instances[instance]\n            }\n        } else {\n            return targetDisplay\n        }\n    }\n\n    async doRequest(options) {\n        const request = {\n            ...options,\n            withCredentials: this.withCredentials,\n            headers: this.headers,\n        }\n\n        return await this.backendSrv.datasourceRequest(request);\n    }\n\n    async testDatasource() {\n        let context = new Context(this.url);\n        try {\n            await context.createContext();\n            return {\n              status: 'success',\n              title: 'Success',\n              message: 'Data source configured successfully. If you wish to override the PCP endpoint for specific dashboards, '+\n                       'you can use the  _host, _port, _proto, (and optionally _container) variables.'\n          }\n        }\n        catch (error) {\n          return {\n            status: 'error',\n            title: 'Additional configuration required',\n            message: 'Could not connect to the specified url. To use this data source, '+\n                     'please configure the _host, _port, _proto, (and optionally _container) dashboard variables.',\n           }\n        }\n    }\n\n    async annotationQuery(options) {\n        return []\n    }\n\n    /**\n     * called by the query editor for auto completion of metric names\n     * also used by the templating engine (dashboard variables with type = query)\n     */\n    async metricFindQuery(query) {\n        let endpoint = await this.findOrCreateEndpoint();\n\n        // if the query is for containers.name, return the containers\n        // otherwise, default to providing a list of all metrics\n        if (query === 'containers.name') {\n          const metricsResponse = await endpoint.context.fetch([\"containers.name\"]);\n            return metricsResponse.values[0].instances\n                .map(iv => iv.value)\n                .filter(this.container_name_filter)\n                .map(i => ({ text: i, value: i }))\n        } else {\n            const filteredMetrics = endpoint.context.getAllMetricNames()\n                .filter(mn => !query || mn.includes(query))\n            return filteredMetrics\n                .map(mn => ({ text: mn, value: mn }))\n        }\n    }\n\n    async findOrCreateEndpoint() {\n      const dashboardVariables = this.getVariables();\n\n      // TODO: also allow overriding of url in query editor\n      let url: string;\n      if (dashboardVariables.url && dashboardVariables.url.value.length > 0)\n          url = dashboardVariables.url.value;\n      else\n          url = this.url;\n\n      let endpoint = this.endpointRegistry.find(url);\n      if (!endpoint) {\n          endpoint = this.endpointRegistry.create(url, null, this.keepPollingMs, this.olderstDataMs);\n          await endpoint.context.fetchMetricMetadata(); // TODO: where?\n      }\n      return endpoint;\n    }\n\n    async query(options) {\n        const query = options;\n        if (query.targets.length == 0) {\n            return { data: [] };\n        }\n\n        const targetResults: TargetResult[] = [];\n        for (const target of query.targets) {\n            if (target.hide || !target.target)\n                continue;\n\n            // TODO: remove me: workaround for old dashboards\n            if (!target.expr)\n              target.expr = target.target;\n            if (!target.format && (target.type === \"timeseries\" || target.type === \"timeserie\"))\n              target.format = \"time_series\";\n\n            // TODO: allow templating\n            const expr:string = target.expr.trim();\n            if (expr.length === 0)\n                continue;\n\n            let endpoint = await this.findOrCreateEndpoint();\n            try {\n                //const parser = new Parser();\n                //const expressions = parser.parse(expr);\n                //const metricsToPoll = expressions.variables({ withMembers: true });\n\n                endpoint.poller.ensurePolling([expr]);\n                let result = endpoint.datastore.queryTimeSeries([expr], options.range.from.valueOf(), options.range.to.valueOf());\n                targetResults.push(...this.transformations.transform(result, target));\n            }\n            catch (error) {\n                // catch all exceptions and add the refId of the panel\n                error.refId = target.refId;\n                throw error;\n            }\n        }\n\n        return { data: targetResults };\n\n/*\n\n        // TODO all this is generic boilerplate, we can probably get rid of it\n        // by cutting down to only what we need\n        const query = options\n        query.targets = this.buildQueryTargets(options);\n\n        const parser = new Parser()\n\n        if (this.templateSrv.getAdhocFilters) {\n            query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n        } else {\n            query.adhocFilters = [];\n        }\n\n        options.scopedVars = { ...this.getVariables(), ...options.scopedVars };\n\n        const { targets } = options\n        const endpoint = this.getConfiguredEndpoint();\n        const container = endpoint.split('::')[1] || null\n\n        const expressions = targets.map(t => t.target).map(t => parser.parse(t))\n        const metricsToPoll = utils.flatMap(e => e.variables({ withMembers: true }), expressions)\n        this.poller.ensurePolling(endpoint, metricsToPoll)\n\n        const rawCollected = this.poller.collectData(endpoint, metricsToPoll)\n        const collected = extensions.transformAfterCollected(rawCollected, container)\n\n        const collectApplied = [] as any\n\n        // oh the for loops\n\n        if (collected[0]) {\n            for(const t of targets) {\n                // for now we just take the first timeslot as the reference for the series\n                const applied = [] as any\n                const expr = parser.parse(t.target)\n                for(const data of collected[0].datas) {\n                    const ts = data[0]\n                    const ivout = [] as any\n                    for(const ivToCollect of data[1]) {\n                        // look up all available data for this ts/instance combo\n                        const valuesAtTimestampForInstance = collected.map(c => {\n                            const valuesAtTs = c.datas.find(data => data[0] === ts)\n                            const v = valuesAtTs\n                                    && valuesAtTs[1]\n                                    && valuesAtTs[1].find(civ => civ.instance === ivToCollect.instance)\n                            return {\n                                metric: c.metric,\n                                value: v && v.value,\n                            }\n                        })\n\n                        // provide a default 0, load in all of the values\n                        const variables = {}\n                        metricsToPoll.forEach(\n                            v => _.set(variables, v, 0))\n                        valuesAtTimestampForInstance.forEach(\n                            v => _.set(variables, v.metric, v.value))\n                        const calculated = expr.evaluate(variables)\n                        ivout.push({\n                            instance: ivToCollect.instance,\n                            instanceName: ivToCollect.instanceName,\n                            value: calculated,\n                        })\n                    }\n                    applied.push([ts, ivout])\n                }\n\n                collectApplied.push({\n                    datas: applied,\n                    endpoint,\n                    metric: t.displayName || t.target,\n                })\n            }\n        }\n\n        // flatten the metric instance data out\n        const plotted : any[] = [];\n\n        for(const data of collectApplied) {\n            // TODO this looping is a bit O(n^2) but should be ok for proof of concept\n\n            // get a list of all unique instances and carry forward the instance name\n            const instances = {}\n            data.datas.forEach(d => d[1].forEach(iv => instances[iv.instance] = iv.instanceName))\n\n            for(const instance of Object.keys(instances)) {\n                const target = this.targetName(instances, instance, targets, data.metric)\n\n                const datapoints = [] as any // array of: [ value, unix_epoch_ms ]\n                for (const tsiv of data.datas) {\n                    const ts = tsiv[0]\n                    const iv = tsiv[1]\n                    const foundIv = iv.find(ivi => ivi.instance == instance)\n                    if (foundIv) {\n                        const value = foundIv.value\n                        datapoints.push([ value, ts ])\n                    }\n                }\n\n                plotted.push({\n                    metric: data.metric,\n                    instance,\n                    target,\n                    datapoints,\n                })\n            }\n        }\n\n        // most data is for a request of type 'timeserie'[sic]\n        // if the user requests everything of type 'table'\n        // then let's make them a table\n        let output\n        if (targets.every(t => t.type === 'table')) {\n            // for a table, we are going to assume just take the LATEST of the dataset\n            // output everything as a string:\n            // each metric is a column, each instance is a row\n            const type = 'table'\n            const columns = targets.map(t => ({ text: t.target, type: 'string' }))\n            const rows = [] as any\n            plotted.forEach(p => rows.push([]))\n            for (let i = 0; i < rows.length; i++) {\n                for (let j = 0; j < columns.length; j++) {\n                    const instanceAsString = `${i}`\n                    const colName = columns[j].text\n                    const foundPoints = plotted.find(p => p.instance === instanceAsString && p.metric === colName)\n                    if (foundPoints) {\n                        const points = foundPoints.datapoints\n                        rows[i][j] = points[points.length - 1][0]\n                    }\n                }\n            }\n            output = [{\n                columns,\n                rows,\n                type,\n            }]\n        } else {\n            output = plotted.map(p => ({ target: p.target, datapoints: p.datapoints }))\n        }\n\n        return {\n            data: output\n        }*/\n    }\n//////////\n}\n","// stackoverflow development ftw\n//\n// https://stackoverflow.com/a/34890276/\nfunction groupBy(xs, key) {\n  return xs.reduce(function(rv, x) {\n    (rv[x[key]] = rv[x[key]] || []).push(x)\n    return rv\n  }, {})\n}\n\n// https://stackoverflow.com/a/14810722/\nfunction objectMap(object, mapFn) {\n  return Object.keys(object).reduce(function(result, key) {\n    result[key] = mapFn(object[key])\n    return result\n  }, {})\n}\n\n// https://stackoverflow.com/a/1917041/\nfunction sharedPrefixLength(array) {\n  var A = array.concat().sort()\n  var a1= A[0], a2= A[A.length-1], L= a1.length, i= 0;\n  while(i<L && a1.charAt(i)=== a2.charAt(i))\n      i++;\n  return i\n}\n\nconst flatMap = (f, arr) => arr.reduce((x, y) => [...x, ...f(y)], [])\n\n// https://stackoverflow.com/a/31464652/\nfunction expandDottedStringToObject(str, value)\n{\n    var items = str.split(\".\") // split on dot notation\n    var output = {} // prepare an empty object, to fill later\n    var ref = output // keep a reference of the new object\n\n    //  loop through all nodes, except the last one\n    for(var i = 0; i < items.length - 1; i ++)\n    {\n        ref[items[i]] = {} // create a new element inside the reference\n        ref = ref[items[i]] // shift the reference to the newly created object\n    }\n\n    ref[items[items.length - 1]] = value // apply the final value\n\n    return output // return the full object\n}\n\nexport {\n    groupBy,\n    objectMap,\n    sharedPrefixLength,\n    flatMap,\n    expandDottedStringToObject,\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\nimport { TargetFormat } from '../lib/types';\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n    static templateUrl = 'datasources/live/partials/query.editor.html'\n\n    formats: any = [];\n\n    constructor($scope, $injector) {\n        super($scope, $injector);\n\n        // TODO: remove workaround\n        this.target.expr = this.target.expr || this.target.target || \"\";\n        this.target.format = this.target.format || this.getDefaultFormat();\n\n        this.formats = [\n            { text: \"Time series\", value: TargetFormat.TimeSeries },\n            { text: \"Table\", value: TargetFormat.Table },\n            { text: \"Heatmap\", value: TargetFormat.Heatmap },\n        ];\n    }\n\n    getDefaultFormat() {\n        if (this.panelCtrl.panel.type === 'table') {\n            return TargetFormat.Table;\n        } else if (this.panelCtrl.panel.type === 'heatmap') {\n            return TargetFormat.Heatmap;\n        }\n        return TargetFormat.TimeSeries;\n    }\n\n    getAllMetrics(query) {\n        return this.datasource.metricFindQuery(query || '');\n    }\n\n    refreshMetricData() {\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n}\n","import {PcpLiveDatasource} from './datasource';\nimport {GenericDatasourceQueryCtrl} from './query_ctrl';\n\nclass GenericConfigCtrl {\n  static templateUrl = 'datasources/live/partials/config.html'\n}\n\nclass GenericQueryOptionsCtrl {\n  static templateUrl = 'datasources/live/partials/query.options.html'\n}\n\nclass GenericAnnotationsQueryCtrl {\n  static templateUrl = 'datasources/live/partials/annotations.editor.html'\n}\n\nexport {\n  PcpLiveDatasource as Datasource,\n  GenericDatasourceQueryCtrl as QueryCtrl,\n  GenericConfigCtrl as ConfigCtrl,\n  GenericQueryOptionsCtrl as QueryOptionsCtrl,\n  GenericAnnotationsQueryCtrl as AnnotationsQueryCtrl\n};\n","import _ from 'lodash';\n\ninterface MetricMetadata {\n    name: string,\n    pmid: number,\n    sem: string,\n    labels: Record<string, any>\n}\n\nexport default class Context {\n\n    static datasourceRequest: (options: any) => any;\n    private context: string;\n    private contextPromise: Promise<void> | null = null;\n    private metricMetadataCache: Record<string, MetricMetadata> = {};\n    private indomCache: Record<string, Record<number, string>> = {}; // indomCache[metric][instance_id] = instance_name\n    private d: string = '';\n\n    constructor(readonly url: string, readonly container?: string) {\n        // if port != 44322, use pmwebd API with underscore\n        // TODO: remove once transition to pmproxy is done\n        if (!url.includes(\":44322\")) {\n            this.d = '_';\n        }\n    }\n\n    private async _createContext() {\n        let contextUrl = `${this.url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`;\n\n        const contextResponse = await Context.datasourceRequest({ url: contextUrl });\n        this.context = contextResponse.data.context;\n\n        if (this.container) {\n            await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: \"pmcd.client.container\", value: this.container }\n            });\n        }\n    }\n\n    // this method ensures that only one context request will be sent at a time\n    // if there are 2 simultaneous calls to createContext(), the second call\n    // will return the promise of the first call\n    async createContext() {\n        if (this.contextPromise)\n            return this.contextPromise;\n\n        this.contextPromise = this._createContext();\n        await this.contextPromise;\n        this.contextPromise = null;\n    }\n\n    async ensureContext(fn: () => any) {\n        if (!this.context) {\n            await this.createContext();\n        }\n\n        try {\n            return await fn();\n        } catch (error) {\n            if (_.isString(error.data) && (error.data.includes(\"12376\") || error.data.includes(\"unknown context identifier\"))) {\n                console.debug(\"context expired, creating new context...\");\n                await this.createContext();\n                return await fn();\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n\n    async fetchMetricMetadata(prefix?: string) {\n        let params: any = {};\n        if (prefix)\n            params.prefix = prefix;\n\n        const metrics = await this.ensureContext(async () => {\n            // TODO: use this.url again\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/_metric`,\n                //url: `http://localhost:44322/pmapi/metric`,\n                params\n            });\n            return response.data.metrics;\n        });\n\n        this.metricMetadataCache = {};\n        for (const metric of metrics) {\n            this.metricMetadataCache[metric.name] = metric;\n        }\n    }\n\n    findMetricMetadata(metric: string) {\n        return this.metricMetadataCache[metric];\n    }\n\n    getAllMetricNames() {\n        return Object.keys(this.metricMetadataCache);\n    }\n\n    async refreshIndoms(metric: string) {\n        const indoms = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}indom`,\n                params: { name: metric }\n            });\n            return response.data.instances;\n        });\n\n        // convert [{instance: X, name: Y}] to {instance: name}\n        this.indomCache[metric] = {};\n        for (const indom of indoms) {\n            this.indomCache[metric][indom.instance] = indom.name;\n        }\n        return this.indomCache[metric];\n    }\n\n    async fetch(metrics: string[], instanceNames: boolean = false) {\n        const data = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}fetch`,\n                params: { names: metrics.join(',') }\n            });\n            return response.data;\n        });\n\n        if (instanceNames) {\n            // add instance names to instances\n            for (const metric of data.values) {\n                if (metric.instances.length == 0) {\n                    continue;\n                } else if (metric.instances[0].instance === -1) { // this metric has no instances (single value)\n                    metric.instances[0].instanceName = null;\n                    continue;\n                }\n\n                let indomsForMetric = this.indomCache[metric.name];\n                if (!indomsForMetric)\n                    indomsForMetric = await this.refreshIndoms(metric.name);\n\n                let refreshed = false;\n                for (const instance of metric.instances) {\n                    instance.instanceName = indomsForMetric[instance.instance];\n                    if (!instance.instanceName && !refreshed) {\n                        // refresh instances at max once per metric\n                        indomsForMetric = await this.refreshIndoms(metric.name);\n                        instance.instanceName = indomsForMetric[instance.instance];\n                        refreshed = true;\n                    }\n                }\n            }\n        }\n\n        return data;\n    }\n\n    async store(metric: string, value: string) {\n        return await this.ensureContext(() => {\n            return Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: metric, value: value }\n            })\n        });\n    }\n}\n"],"sourceRoot":""}