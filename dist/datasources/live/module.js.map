{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./datasources/lib/types.ts","webpack:///./datasources/lib/transformations.ts","webpack:///./datasources/lib/pcp_query_ctrl.ts","webpack:///./datasources/live/mode-pcp.js","webpack:///./datasources/live/datasource.ts","webpack:///./datasources/live/completer.ts","webpack:///./datasources/live/query_ctrl.ts","webpack:///./datasources/live/config_ctrl.ts","webpack:///./datasources/live/module.ts","webpack:///./datasources/lib/datastore.ts","webpack:///./datasources/lib/endpoint_registry.ts","webpack:///./datasources/lib/poller.ts","webpack:///./datasources/lib/utils.ts","webpack:///./datasources/lib/context.ts","webpack:///external \"app/core/utils/kbn\"","webpack:///external \"app/plugins/sdk\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","TargetFormat","__webpack_exports__","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","_types__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_2__","Transformations","templateSrv","this","getLabel","target","legendFormat","targetSpl","split","vars","instance","metric0","length","replace","updateLabel","targetResult","datapoints","transformToTimeSeries","queryResult","a","flatten","map","row","instances","transformToHeatmap","targetResults","_i","targetResults_1","match","dataPoint","Math","floor","transformStringToTable","tableText","table","columns","rows","type","lines","columnSizes","line","trim","includes","tableHeaders","colStartAt","indexOf","colEndAt","undefined","push","text","colSize","substring","lines_1","transformMultipleMetricsToTable","queryResultRow","queryResult_1","find","instances_1","keys","sort","b","parseInt","transformToTable","targets","transform","format","TimeSeries","Heatmap","Table","message","PcpQueryCtrl","_super","$scope","$injector","typingDebounceTime","_this","stopTypingDebounced","debounce","stopTyping","__extends","isTyping","startTyping","targetChanged","panelCtrl","refresh","grafana_app_plugins_sdk__WEBPACK_IMPORTED_MODULE_1__","ace","define","require","snippets","scope","oop","TextHighlightRules","PcpHighlightRules","$rules","start","token","regex","normalizeRules","inherits","TextMode","Mode","HighlightRules","$behaviour","$defaultBehaviour","$id","datasource_PcpLiveDatasource","PcpLiveDatasource","instanceSettings","backendSrv","variableSrv","withCredentials","headers","Content-Type","basicAuth","pollIntervalMs","kbn_default","interval_to_ms","jsonData","pollInterval","keepPollingMs","keepPolling","localHistoryAgeMs","localHistoryAge","lib_context","datasourceRequest","doRequest","endpointRegistry","endpoint_registry","transformations","setInterval","doPollAll","container_name_filter","$inject","_a","list","endpoint","datastore","cleanExpiredMetrics","poller","cleanupExpiredMetrics","promises","poll","Promise","all","getOrCreateEndpoint","utils","url","container","options","status","title","_b","sent","values","hide","expr","types","external_lodash_default","every","query","metricsToPoll","queryMetrics","range","from","valueOf","to","refId","data","panelData","PCPMetricCompleter","datasource","identifierRegexps","childrenCache","getCompletions","editor","session","pos","prefix","callback","completers","slice","findCompletions","then","reason","getHelpText","metric","metadata","sem","units","id","suggestions","nonleaf","leaf","editorValue","getValue","metricPrefix","lastIndexOf","completions","apply","caption","meta","score","Number","MAX_VALUE","context","metricMetadatas","metadatas","docHTML","query_ctrl_PcpLiveDatasourceQueryCtrl","formats","getDefaultFormat","PcpLiveDatasourceQueryCtrl","panel","label","containers","unshift","getCompleter","templateUrl","config_ctrl_PcpLiveConfigCtrl","PcpLiveConfigCtrl","current","config_ctrl_generator","cloneDeep","trys","metricFindQuery","PcpLiveAnnotationsQueryCtrl","DataStore","store","ingestCounterMetric","instanceStore","pollTimeEpochMs","prevTimeMs","prevOrigVal","deltaSec","__generator","metricMetadata","console","info","metricStore","instanceName","isEmpty","ingestMetric","queryMetric","results","filter","metrics","keepExpiry","Date","getTime","lib_poller","Poller","requestedMetrics","poller_generator","fetch","ingest","returnedMetrics","missingMetrics","difference","debug","join","missingMetrics_1","missingMetric","ensurePolling","failOnError","validMetrics","intersection","invalidMetrics","now","validMetrics_1","removeMetricsFromPolling","metrics_1","pollExpiry","pickBy","lastRequested","endpoint_registry_EndpointRegistry","endpoints","EndpointRegistry","generateId","lib_datastore","synchronized","isBlank","getConnectionParams","propertyKey","descriptor","method","inflightCalls","arguments","result","str","isString","dashboardVariables","variables","forEach","variable","variableValue","isEqual","allValue","textValuePair","getDashboardVariables","Context","metricMetadataCache","indomCache","contextUrl","contextResponse","params","createContext","fn","error_1","isObject","requiredMetrics","metadata_1","indoms_1","indoms","indom","_f","refreshIndoms","_c","_d","_e","instanceNames","updateInstanceNames","__decorate","_utils__WEBPACK_IMPORTED_MODULE_1__","6","7"],"mappings":"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","file":"./datasources/live/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 134);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export interface MetricMetadata {\n    name: string,\n    pmid: number,\n    sem: string,\n    type: string,\n    units: string,\n    labels: Record<string, any>\n}\n\nexport type Datapoint = [number | string, number];\n\nexport interface TimeSeriesData {\n    target: string;\n    datapoints: Datapoint[]\n}\n\nexport interface TableData {\n    columns: any[]\n    rows: (string | number)[][]\n    type: string\n}\n\nexport type PanelData = TimeSeriesData | TableData;\n\nexport enum TargetFormat {\n    TimeSeries = \"time_series\",\n    Table = \"table\",\n    Heatmap = \"heatmap\",\n}\n\nexport interface DatastoreQueryResultRow {\n    name: string;\n    instances: TimeSeriesData[];\n}\n\nexport type DatastoreQueryResult = DatastoreQueryResultRow[];\n","import _ from 'lodash';\nimport { Datapoint, TargetFormat, TimeSeriesData, DatastoreQueryResult, PanelData, TableData, DatastoreQueryResultRow } from './types';\nimport { isBlank } from './utils';\n\nexport default class Transformations {\n\n    constructor(private templateSrv: any) {\n    }\n\n    getLabel(target: string, legendFormat: string) {\n        if (isBlank(legendFormat)) {\n            return target;\n        }\n        else {\n            const targetSpl = target.split('.');\n            let vars = {\n                instance: { value: target },\n                metric0: { value: targetSpl[targetSpl.length - 1] }\n            };\n            return this.templateSrv.replace(legendFormat, vars);\n        }\n    }\n\n    updateLabel(target: any, targetResult: TimeSeriesData) {\n        return { target: this.getLabel(targetResult.target, target.legendFormat), datapoints: targetResult.datapoints }\n    }\n\n    transformToTimeSeries(queryResult: DatastoreQueryResult, target: any): TimeSeriesData[] {\n        const instances: TimeSeriesData[] = _.flatten(queryResult.map((row: DatastoreQueryResultRow) => row.instances));\n        return instances.map(this.updateLabel.bind(this, target));\n    }\n\n    transformToHeatmap(queryResult: DatastoreQueryResult) {\n        const targetResults: TimeSeriesData[] = queryResult[0].instances;\n        for (const target of targetResults) {\n            // target name is the upper bound\n            const match = target.target.match(/^(.+?)\\-(.+?)$/);\n            if (match) {\n                target.target = match[2];\n            }\n\n            // round timestamps to one second - the heatmap panel calculates the x-axis size accordingly\n            target.datapoints = target.datapoints.map(\n                (dataPoint: Datapoint) => [dataPoint[0], Math.floor(dataPoint[1] / 1000) * 1000]\n            );\n        }\n        return targetResults;\n    }\n\n    transformStringToTable(tableText: string) {\n        let table: TableData = { columns: [], rows: [], type: 'table' };\n        let lines = tableText.split('\\n');\n        let columnSizes: [number, number | undefined][] = [];\n\n        for (let line of lines) {\n            line = line.trim();\n            if (line.length === 0 || line.includes(\"Ctrl-C\"))\n                continue;\n\n            if (table.columns.length === 0) {\n                let tableHeaders = line.split(/\\s\\s+/);\n                for (let i = 0; i < tableHeaders.length; i++) {\n                    const colStartAt = line.indexOf(tableHeaders[i]);\n                    const colEndAt = i + 1 < tableHeaders.length ? line.indexOf(tableHeaders[i + 1]) - 1 : undefined;\n                    table.columns.push({ text: tableHeaders[i] });\n                    columnSizes.push([colStartAt, colEndAt]);\n                }\n            }\n            else {\n                let row = columnSizes.map((colSize: any) => line.substring(colSize[0], colSize[1]).trim());\n                table.rows.push(row);\n            }\n        }\n        return table;\n    }\n\n    transformMultipleMetricsToTable(queryResult: DatastoreQueryResult) {\n        let table: TableData = { columns: [], rows: [], type: 'table' };\n        table.columns = queryResult.map((queryResultRow) => ({ text: queryResultRow.name }));\n        const instances = Object.keys(queryResult[0].instances).sort((a, b) => parseInt(a) - parseInt(b));\n        for (const instance of instances) {\n            const row: (string | number)[] = [];\n            for (const queryResultRow of queryResult) {\n                const target = queryResultRow.instances.find((target: TimeSeriesData) => target.target === instance);\n                if (target && target.datapoints.length > 0)\n                    row.push(target.datapoints[target.datapoints.length - 1][0]);\n                else\n                    row.push('?');\n            }\n            table.rows.push(row);\n\n        }\n        return table;\n    }\n\n    transformToTable(queryResult: DatastoreQueryResult) {\n        if (queryResult.length > 1) {\n            return this.transformMultipleMetricsToTable(queryResult);\n        }\n        else if (queryResult.length === 1) {\n            const targets = queryResult[0].instances;\n            if (targets.length > 0 && targets[0].datapoints.length > 0)\n                return this.transformStringToTable(targets[0].datapoints[0][0] as string);\n        }\n        return { columns: [], rows: [], type: 'table' };\n    }\n\n    transform(queryResult: DatastoreQueryResult, target: any): PanelData[] {\n        if (target.format === TargetFormat.TimeSeries)\n            return this.transformToTimeSeries(queryResult, target);\n        else if (target.format === TargetFormat.Heatmap)\n            return this.transformToHeatmap(queryResult);\n        else if (target.format == TargetFormat.Table)\n            return [this.transformToTable(queryResult)];\n        else\n            throw { message: `Invalid target format '${target.format}', possible options: ${TargetFormat.TimeSeries}, ${TargetFormat.Heatmap}, ${TargetFormat.Table}` };\n    }\n\n\n}\n","import _ from \"lodash\";\nimport { QueryCtrl } from 'grafana/app/plugins/sdk';\n\nexport abstract class PcpQueryCtrl extends QueryCtrl {\n\n    constructor($scope: any, $injector: any, private typingDebounceTime: number = 1000) {\n        super($scope, $injector);\n    }\n\n    stopTyping() {\n        // we don't want this property in the saved/exported JSON\n        delete this.target.isTyping;\n    }\n\n    // this method is called 1s after the last keypress\n    stopTypingDebounced = _.debounce(this.stopTyping, this.typingDebounceTime);\n\n    startTyping() {\n        this.target.isTyping = true;\n        this.stopTypingDebounced();\n    }\n\n    targetChanged() {\n        this.stopTyping();\n        this.panelCtrl.refresh();\n    }\n\n}\n","// jshint ignore: start\nace.define(\"ace/snippets/pcp\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n    \"use strict\";\n\n    exports.snippets = [];\n    exports.scope = \"pcp\";\n});\n\nace.define(\"ace/mode/pcp_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n    \"use strict\";\n\n    var oop = require(\"../lib/oop\");\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n    var PcpHighlightRules = function () {\n        this.$rules = {\n            \"start\": [{\n                token: \"punctuation\",\n                regex: \"\\\\.\"\n            }, {\n                token: \"entity.name.tag\",\n                regex: '[a-zA-Z]\\\\w*'\n            }]\n        };\n        this.normalizeRules();\n    };\n\n    oop.inherits(PcpHighlightRules, TextHighlightRules);\n\n    exports.PcpHighlightRules = PcpHighlightRules;\n});\n\nace.define(\"ace/mode/pcp\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/pcp_highlight_rules\"], function (require, exports, module) {\n    \"use strict\";\n\n    var oop = require(\"../lib/oop\");\n    var TextMode = require(\"./text\").Mode;\n    var PcpHighlightRules = require(\"./pcp_highlight_rules\").PcpHighlightRules;\n\n    var Mode = function () {\n        this.HighlightRules = PcpHighlightRules;\n        this.$behaviour = this.$defaultBehaviour;\n    };\n    oop.inherits(Mode, TextMode);\n\n    (function () {\n        this.$id = \"ace/mode/pcp\";\n    }).call(Mode.prototype);\n\n    exports.Mode = Mode;\n\n});\n","import _ from \"lodash\";\nimport kbn from \"grafana/app/core/utils/kbn\";\nimport { TargetFormat, PanelData } from \"../lib/types\";\nimport EndpointRegistry, { Endpoint } from \"../lib/endpoint_registry\";\nimport Transformations from \"../lib/transformations\";\nimport Context from \"../lib/context\";\nimport { getConnectionParams } from \"../lib/utils\";\n\nexport class PcpLiveDatasource {\n\n    name: string;\n    withCredentials: boolean;\n    headers: any;\n\n    pollIntervalMs: number; // poll metric sources every X ms\n    keepPollingMs: number; // we will keep polling a metric for up to X ms after it was last requested\n    localHistoryAgeMs: number; // age out time\n\n    endpointRegistry: EndpointRegistry<Endpoint>;\n    transformations: Transformations;\n\n    container_name_filter: any;\n\n    /** @ngInject **/\n    constructor(private instanceSettings: any, private backendSrv: any, private templateSrv: any, private variableSrv: any) {\n        this.name = instanceSettings.name;\n        this.withCredentials = instanceSettings.withCredentials;\n        this.headers = { 'Content-Type': 'application/json' };\n        if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n            this.headers['Authorization'] = instanceSettings.basicAuth;\n        }\n\n        this.pollIntervalMs = kbn.interval_to_ms(instanceSettings.jsonData.pollInterval || '1s');\n        this.keepPollingMs = kbn.interval_to_ms(instanceSettings.jsonData.keepPolling || '20s');\n        this.localHistoryAgeMs = kbn.interval_to_ms(instanceSettings.jsonData.localHistoryAge || '5m');\n\n        Context.datasourceRequest = this.doRequest.bind(this);\n        this.endpointRegistry = new EndpointRegistry();\n        this.transformations = new Transformations(this.templateSrv);\n\n        if (this.pollIntervalMs > 0)\n            setInterval(this.doPollAll.bind(this), this.pollIntervalMs);\n\n        const UUID_REGEX = /[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/\n        this.container_name_filter = name => true // name => name.match(UUID_REGEX)\n    }\n\n    doPollAll() {\n        let promises: Promise<void>[] = [];\n        for (const endpoint of this.endpointRegistry.list()) {\n            endpoint.datastore.cleanExpiredMetrics();\n            endpoint.poller.cleanupExpiredMetrics();\n            promises.push(endpoint.poller.poll());\n        }\n        return Promise.all(promises);\n    }\n\n    getOrCreateEndpoint(target: any = {}) {\n        const [url, container] = getConnectionParams(this.variableSrv, target, this.instanceSettings);\n        let endpoint = this.endpointRegistry.find(url, container);\n        if (!endpoint) {\n            endpoint = this.endpointRegistry.create(url, container, this.keepPollingMs, this.localHistoryAgeMs);\n        }\n        return endpoint;\n    }\n\n    async doRequest(options) {\n        options.withCredentials = this.withCredentials;\n        options.headers = this.headers;\n        return await this.backendSrv.datasourceRequest(options);\n    }\n\n    async testDatasource() {\n        const [url, container] = getConnectionParams(this.variableSrv, {}, this.instanceSettings);\n        const context = new Context(url, container);\n        try {\n            await context.createContext();\n            return { status: 'success', message: \"Data source is working\", title: \"Success\" };\n        }\n        catch (error) {\n            return {\n                status: 'error',\n                title: 'Additional configuration required',\n                message: `Could not connect to ${url}. To use this data source, ` +\n                    'please configure the url, and optionally the container dashboard variable(s).',\n            }\n        }\n    }\n\n    /**\n     * called by the templating engine (dashboard variables with type = query)\n     */\n    async metricFindQuery(query: string) {\n        let endpoint = this.getOrCreateEndpoint();\n        const metricsResponse = await endpoint.context.fetch([query]);\n        return metricsResponse.values[0].instances\n            .map((instance: any) => ({ text: instance.value, value: instance.value }));\n    }\n\n    async query(query: any) {\n        const panelData: PanelData[] = [];\n        for (const target of query.targets) {\n            if (target.hide || (!target.expr && !target.target) || target.isTyping)\n                continue;\n\n            // TODO: remove me: workaround for old dashboards\n            if (!target.expr)\n                target.expr = target.target;\n            if (!target.format && (target.type === \"timeseries\" || target.type === \"timeserie\"))\n                target.format = \"time_series\";\n\n            // TODO: allow templating\n            const expr: string = target.expr.trim();\n            if (expr.length === 0)\n                continue;\n\n            let endpoint = this.getOrCreateEndpoint(target);\n            try {\n                //const parser = new Parser();\n                //const expressions = parser.parse(expr);\n                //const metricsToPoll = expressions.variables({ withMembers: true });\n\n                let metricsToPoll: string[] = [];\n                if (target.format === TargetFormat.Table) {\n                    if (!_.every(query.targets, ['format', TargetFormat.Table]))\n                        throw { message: \"To use the table format, every query of this panel has to be in table format\" };\n                    // note: this ignores that the endpoint could be different for each query\n                    metricsToPoll = query.targets.map((target: any) => target.expr);\n                }\n                else {\n                    metricsToPoll = [expr];\n                }\n\n                await endpoint.poller.ensurePolling(metricsToPoll);\n                let queryResult = endpoint.datastore.queryMetrics(metricsToPoll, query.range.from.valueOf(), query.range.to.valueOf());\n                panelData.push(...this.transformations.transform(queryResult, target));\n                if (target.format === TargetFormat.Table) {\n                    break;\n                }\n            }\n            catch (error) {\n                // catch all exceptions and add the refId of the panel\n                error.refId = target.refId;\n                throw error;\n            }\n        }\n\n        return { data: panelData };\n    }\n}\n","import { PcpLiveDatasource } from \"./datasource\";\nimport Context from \"../lib/context\";\nimport { Endpoint } from \"../lib/endpoint_registry\";\nimport { MetricMetadata } from \"../lib/types\";\n\nexport default class PCPMetricCompleter {\n\n    identifierRegexps = [/\\./, /[a-zA-Z0-9_]/];\n    childrenCache: Record<string, Record<string, { leaf: string[], nonleaf: string[] }>> = {};\n\n    constructor(private datasource: PcpLiveDatasource, private target: any) {\n    }\n\n    getCompletions(editor: any, session: any, pos: any, prefix: any, callback: any) {\n        if (editor.completers.length > 1) {\n            // the ace editor comes with a snippetCompleter, textCompleter, keywordCompleter\n            // our completor is the last of the array - let's remove all other\n            // completers except ours\n            editor.completers = editor.completers.slice(-1);\n        }\n\n        this.findCompletions(editor, session, pos, prefix).then((value) => {\n            callback(null, value);\n        }, (reason: any) => {\n            callback(reason, []);\n        });\n    }\n\n    getHelpText(metric: string, metadata: MetricMetadata) {\n        const type = metadata.type;\n        const semantics = metadata.sem;\n        const units = metadata.units;\n        const help = metadata['text-help'] || metadata['text-oneline'];\n        return `<b>${metric}</b><hr />` +\n            `Type: ${type}<br />` +\n            `Semantics: ${semantics}<br />` +\n            `Units: ${units}<br /><br />` +\n            `${help}`;\n    }\n\n    async getChildren(endpoint: Endpoint, prefix: string) {\n        if (endpoint.id in this.childrenCache && prefix in this.childrenCache[endpoint.id])\n            return this.childrenCache[endpoint.id][prefix];\n\n        const suggestions = await endpoint.context.children(prefix);\n        if (!(endpoint.id in this.childrenCache))\n            this.childrenCache[endpoint.id] = {};\n        this.childrenCache[endpoint.id][prefix] = { nonleaf: suggestions.nonleaf, leaf: suggestions.leaf };\n\n        return this.childrenCache[endpoint.id][prefix];\n    }\n\n    async findCompletions(editor: any, session: any, pos: any, prefix: any) {\n        // don't do this in constructor of PCPMetricCompleter, as the user could\n        // change the endpoint settings of the query, but the constructor is only called once\n        const endpoint = this.datasource.getOrCreateEndpoint(this.target);\n\n        const editorValue: string = editor.getValue();\n        let metricPrefix = \"\";\n\n        if (editorValue.includes(\".\")) {\n            metricPrefix = editorValue.substring(0, editorValue.lastIndexOf(\".\"));\n        }\n\n        const suggestions = await this.getChildren(endpoint, metricPrefix);\n        if (prefix !== \".\")\n            prefix = \"\";\n\n        const completions: any[] = [];\n        completions.push(...suggestions.nonleaf.map((nonleaf: string) => ({\n            caption: nonleaf,\n            value: prefix + nonleaf,\n            meta: \"namespace\",\n            score: Number.MAX_VALUE\n        })));\n\n        const metadatas = await endpoint.context.metricMetadatas(suggestions.leaf.map((leaf: string) => `${metricPrefix}.${leaf}`));\n        completions.push(...suggestions.leaf.map((leaf: string) => ({\n            caption: leaf,\n            value: prefix + leaf,\n            meta: \"metric\",\n            score: Number.MAX_VALUE,\n            docHTML: this.getHelpText(`${metricPrefix}.${leaf}`, metadatas[`${metricPrefix}.${leaf}`])\n        })));\n\n        return completions;\n    }\n}\n","import { TargetFormat } from '../lib/types';\nimport PCPMetricCompleter from './completer';\nimport { PcpQueryCtrl } from \"../lib/pcp_query_ctrl\";\nimport './mode-pcp';\n\nexport class PcpLiveDatasourceQueryCtrl extends PcpQueryCtrl {\n    static templateUrl = 'datasources/live/partials/query.editor.html'\n\n    formats: any = [];\n\n    /** @ngInject **/\n    constructor($scope: any, $injector: any) {\n        super($scope, $injector);\n\n        // TODO: remove workaround\n        this.target.expr = this.target.expr || this.target.target || \"\";\n        this.target.format = this.target.format || this.getDefaultFormat();\n        this.target.url = this.target.url || null;\n        this.target.container = this.target.container || null;\n\n        this.formats = [\n            { text: \"Time series\", value: TargetFormat.TimeSeries },\n            { text: \"Table\", value: TargetFormat.Table },\n            { text: \"Heatmap\", value: TargetFormat.Heatmap },\n        ];\n    }\n\n    getDefaultFormat() {\n        if (this.panelCtrl.panel.type === 'table') {\n            return TargetFormat.Table;\n        } else if (this.panelCtrl.panel.type === 'heatmap') {\n            return TargetFormat.Heatmap;\n        }\n        return TargetFormat.TimeSeries;\n    }\n\n    async getContainers() {\n        let containers = await this.datasource.metricFindQuery('containers.name');\n        containers.unshift({ text: '-', value: null });\n        return containers;\n    }\n\n    getCompleter() {\n        return new PCPMetricCompleter(this.datasource, this.target);\n    }\n\n}\n","import _ from \"lodash\";\nimport { PcpLiveDatasource } from \"./datasource\";\n\nexport class PcpLiveConfigCtrl {\n    static templateUrl = 'datasources/live/partials/config.html'\n    current: any;\n\n    /** @ngInject **/\n    constructor(private backendSrv: any, private templateSrv: any, private variableSrv: any) {\n        this.current.jsonData.container = this.current.jsonData.container || null;\n    }\n\n    async getContainers() {\n        const instanceSettings = _.cloneDeep(this.current);\n        instanceSettings.jsonData.pollInterval = '0s'; // otherwise setInterval will be called in constructor\n        let datasource = new PcpLiveDatasource(instanceSettings, this.backendSrv, this.templateSrv, this.variableSrv);\n\n        let containers: any = [];\n        try {\n            containers = await datasource.metricFindQuery('containers.name');\n        }\n        catch (e) {\n            // probably URL is not set up correctly, ignore\n        }\n        containers.unshift({ text: '-', value: null });\n        return containers;\n    }\n\n}\n","import { PcpLiveDatasource } from './datasource';\nimport { PcpLiveDatasourceQueryCtrl } from './query_ctrl';\nimport { PcpLiveConfigCtrl } from './config_ctrl';\n\nclass PcpLiveAnnotationsQueryCtrl {\n  static templateUrl = 'datasources/live/partials/annotations.editor.html'\n}\n\nexport {\n  PcpLiveDatasource as Datasource,\n  PcpLiveDatasourceQueryCtrl as QueryCtrl,\n  PcpLiveConfigCtrl as ConfigCtrl,\n  PcpLiveAnnotationsQueryCtrl as AnnotationsQueryCtrl\n};\n","import _ from 'lodash';\nimport Context from './context';\nimport { Datapoint, TimeSeriesData, DatastoreQueryResultRow } from './types';\n\ntype StoredDatapoint = [number | string | undefined, number, number?];\n\nexport default class DataStore {\n    private store: Record<string, Record<string, StoredDatapoint[]>> = {}; // store[metric][instance] = [val,ts,origVal]\n\n    constructor(private context: Context, private localHistoryAgeMs: number) {\n    }\n\n    private ingestCounterMetric(instanceStore: StoredDatapoint[], instance: any, pollTimeEpochMs: number) {\n        // first value: store it as undefined, to be filtered by queryTimeSeries()\n        // subsequent values: perform rate conversation\n        if (instanceStore.length > 0) {\n            let [, prevTimeMs, prevOrigVal] = instanceStore[instanceStore.length - 1];\n            const deltaSec = (pollTimeEpochMs - prevTimeMs) / 1000;\n            instanceStore.push([(instance.value - prevOrigVal!) / deltaSec, pollTimeEpochMs, instance.value]);\n        }\n        else {\n            instanceStore.push([undefined, pollTimeEpochMs, instance.value]);\n        }\n    }\n\n    private async ingestMetric(metricStore: Record<string, StoredDatapoint[]>, metric: any, pollTimeEpochMs: number) {\n        const metadata = await this.context.metricMetadata(metric.name);\n        if (!metadata) {\n            console.info(`skipping ingestion of ${metric.name}: metadata not available`);\n            return;\n        }\n\n        for (const instance of metric.instances) {\n            // do not store history for the bpftrace control and output metrics\n            if (!(instance.instanceName in metricStore) ||\n                (metadata.labels && [\"control\", \"output\"].includes(metadata.labels.metrictype))) {\n                metricStore[instance.instanceName] = [];\n            }\n\n            if (metadata.sem === \"counter\") {\n                this.ingestCounterMetric(metricStore[instance.instanceName], instance, pollTimeEpochMs);\n            }\n            else {\n                metricStore[instance.instanceName].push([instance.value, pollTimeEpochMs]);\n            }\n        }\n    }\n\n    async ingest(data: any) {\n        if (_.isEmpty(data))\n            return;\n\n        const pollTimeEpochMs = data.timestamp.s ? data.timestamp.s * 1000 + data.timestamp.us / 1000 : data.timestamp * 1000;\n        for (const metric of data.values) {\n            if (!(metric.name in this.store)) {\n                this.store[metric.name] = {};\n            }\n\n            await this.ingestMetric(this.store[metric.name], metric, pollTimeEpochMs);\n        }\n    }\n\n    queryMetric(metric: string, from: number, to: number) {\n        const results: TimeSeriesData[] = [];\n        for (const instance in this.store[metric]) {\n            let target = {\n                // for metrics without instance domains, show metric name\n                target: instance === \"null\" ? metric : instance,\n                datapoints: this.store[metric][instance].filter((dataPoint: StoredDatapoint) => (\n                    from <= dataPoint[1] && dataPoint[1] <= to && dataPoint[0] != undefined\n                )) as Datapoint[]\n            };\n            results.push(target);\n        }\n        return results;\n    }\n\n    queryMetrics(metrics: string[], from: number, to: number) : DatastoreQueryResultRow[] {\n        return metrics.map((metric: string) => ({ name: metric, instances: this.queryMetric(metric, from, to) }));\n    }\n\n    cleanExpiredMetrics() {\n        const keepExpiry = new Date().getTime() - this.localHistoryAgeMs\n        for (const metric in this.store) {\n            for (const instance in this.store[metric]) {\n                this.store[metric][instance] = this.store[metric][instance].filter(\n                    (dataPoint: Datapoint) => dataPoint[1] > keepExpiry\n                );\n            }\n        }\n    }\n}\n","import Context from \"./context\";\nimport DataStore from \"./datastore\";\nimport Poller from './poller';\n\nexport interface Endpoint {\n    id: string;\n    context: Context;\n    poller: Poller;\n    datastore: DataStore;\n}\n\nexport default class EndpointRegistry<T extends Endpoint> {\n    private endpoints: Record<string, T> = {};\n\n    private generateId(url: string, container?: string) {\n        if (!container)\n            container = \"\";\n        return `${url}::${container}`;\n    }\n\n    find(url: string, container?: string) {\n        const id = this.generateId(url, container);\n        return this.endpoints[id];\n    }\n\n    create(url: string, container: string | undefined, keepPollingMs: number, localHistoryAgeMs: number) {\n        const id = this.generateId(url, container);\n        const context = new Context(url, container);\n        const datastore = new DataStore(context, localHistoryAgeMs);\n        const poller = new Poller(context, datastore, keepPollingMs);\n\n        this.endpoints[id] = { id, context, datastore, poller } as T;\n        return this.endpoints[id];\n    }\n\n    list() {\n        return Object.values(this.endpoints);\n    }\n\n}","import _ from \"lodash\";\nimport Context from \"./context\";\nimport DataStore from \"./datastore\";\n\nexport default class Poller {\n    private requestedMetrics: Record<string, number> = {}; // {metric: lastRequested}\n\n    constructor(private context: Context, private datastore: DataStore, private keepPollingMs: number) {\n    }\n\n    async poll() {\n        const metrics = Object.keys(this.requestedMetrics);\n        if (metrics.length == 0) {\n            return;\n        }\n\n        const data = await this.context.fetch(metrics, true);\n        await this.datastore.ingest(data);\n\n        const returnedMetrics = data.values.map((metric: any) => metric.name);\n        const missingMetrics = _.difference(metrics, returnedMetrics);\n        if (missingMetrics.length > 0) {\n            console.debug(`fetch didn't include result for ${missingMetrics.join(', ')}, clearing it from requested metrics`);\n            for (const missingMetric of missingMetrics) {\n                delete this.requestedMetrics[missingMetric];\n            }\n        }\n    }\n\n    async ensurePolling(metrics: string[], failOnError: boolean = true) {\n        const metadatas = await this.context.metricMetadatas(metrics);\n        const validMetrics = _.intersection(metrics, Object.keys(metadatas));\n\n        if (failOnError && validMetrics.length < metrics.length) {\n            const invalidMetrics = _.difference(metrics, validMetrics);\n            const s = invalidMetrics.length !== 1 ? 's' : '';\n            throw { message: `Cannot find metric${s} ${invalidMetrics.join(', ')}. Please check if the PMDA is enabled.` };\n        }\n\n        const now = new Date().getTime()\n        for (const metric of validMetrics) {\n            this.requestedMetrics[metric] = now\n        }\n        return validMetrics;\n    }\n\n    removeMetricsFromPolling(metrics: string[]) {\n        for (const metric of metrics) {\n            delete this.requestedMetrics[metric];\n        }\n    }\n\n    cleanupExpiredMetrics() {\n        // clean up any not required metrics\n        const pollExpiry = new Date().getTime() - this.keepPollingMs;\n        this.requestedMetrics = _.pickBy(this.requestedMetrics, (lastRequested: number) => lastRequested > pollExpiry);\n    }\n}\n","import _ from \"lodash\";\n\n// typescript decorator which makes sure that this function\n// is called only once at a time\n// subsequent calls return the promise of the first call\nexport function synchronized(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    let method = descriptor.value;\n\n    descriptor.value = function () {\n        if (!this.inflightCalls)\n            this.inflightCalls = {};\n        if (this.inflightCalls[propertyKey])\n            return this.inflightCalls[propertyKey];\n\n        this.inflightCalls[propertyKey] = method.apply(this, arguments);\n        return this.inflightCalls[propertyKey].then((result: any) => {\n            this.inflightCalls[propertyKey] = null;\n            return result;\n        }, (reason: any) => {\n            this.inflightCalls[propertyKey] = null;\n            throw reason;\n        });\n    }\n}\n\nexport function isBlank(str: string) {\n    return !(_.isString(str) && str.trim().length > 0);\n}\n\nexport function getDashboardVariables(variableSrv: any): any {\n    const variables = {};\n    if (!variableSrv.variables) {\n        // variables are not defined on the datasource settings page\n        return {};\n    }\n\n    variableSrv.variables.forEach((variable) => {\n        let variableValue = variable.current.value;\n        if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n            if (variable.allValue === null) {\n                variableValue = variable.options.slice(1).map((textValuePair: any) => textValuePair.value);\n            } else {\n                variableValue = variable.allValue;\n            }\n        }\n\n        variables[variable.name] = {\n            text: variable.current.text,\n            value: variableValue,\n        };\n    });\n\n    return variables;\n}\n\nexport function getConnectionParams(variableSrv: any, target: any, instanceSettings: any): [string, string?] {\n    const dashboardVariables = getDashboardVariables(variableSrv);\n    let url: string = \"\";\n    let container: string | undefined;\n\n    if (!isBlank(target.url))\n        url = target.url;\n    else if (dashboardVariables.url && !isBlank(dashboardVariables.url.value))\n        url = dashboardVariables.url.value;\n    else if (!isBlank(instanceSettings.url))\n        url = instanceSettings.url;\n    else\n        throw { message: \"Cannot find any connection url.\" };\n\n    if (!isBlank(target.container))\n        container = target.container;\n    else if (dashboardVariables.container && !isBlank(dashboardVariables.container.value))\n        container = dashboardVariables.container.value;\n    else if (!isBlank(instanceSettings.container))\n        container = instanceSettings.container;\n\n    return [url, container];\n}\n","import _ from 'lodash';\nimport { synchronized } from './utils';\nimport { MetricMetadata } from './types';\n\nexport default class Context {\n\n    static datasourceRequest: (options: any) => any;\n    private context: string;\n    private metricMetadataCache: Record<string, MetricMetadata> = {};\n    private indomCache: Record<string, Record<number, string>> = {}; // indomCache[metric][instance_id] = instance_name\n    private d: string = '';\n\n    constructor(readonly url: string, readonly container?: string) {\n        // if port != 44322, use pmwebd API with underscore\n        // TODO: remove once transition to pmproxy is done\n        if (!url.includes(\":44322\")) {\n            this.d = '_';\n        }\n    }\n\n    @synchronized\n    async createContext() {\n        let contextUrl = `${this.url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`;\n\n        const contextResponse = await Context.datasourceRequest({ url: contextUrl });\n        this.context = contextResponse.data.context;\n\n        if (this.container) {\n            await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: \"pmcd.client.container\", value: this.container }\n            });\n        }\n    }\n\n    private async ensureContext(fn: () => any) {\n        if (!this.context) {\n            await this.createContext();\n        }\n\n        try {\n            return await fn();\n        } catch (error) {\n            if ((_.isString(error.data) && error.data.includes(\"12376\")) ||\n                (_.isObject(error.data) && error.data.message.includes(\"unknown context identifier\"))) {\n                console.debug(\"context expired, creating new context...\");\n                await this.createContext();\n                return await fn();\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n\n    async metricMetadatas(metrics: string[]): Promise<{ [key: string]: MetricMetadata }> {\n        const requiredMetrics = _.difference(metrics, Object.keys(this.metricMetadataCache));\n        if (requiredMetrics.length > 0) {\n            requiredMetrics.push(\"pmcd.control.timeout\"); // TODO: remove workaround - server should return empty list if no metrics were found\n            const metadata = await this.ensureContext(async () => {\n                const response = await Context.datasourceRequest({\n                    //url: `${this.url}/pmapi/${this.context}/${this.d}metric`,\n                    url: `http://localhost:44322/pmapi/metric`,\n                    params: { names: requiredMetrics.join(',') }\n                });\n                return response.data.metrics;\n            });\n\n            for (const metric of metadata) {\n                this.metricMetadataCache[metric.name] = metric;\n            }\n        }\n        return _.pick(this.metricMetadataCache, metrics); // _.pick ignores non-existing keys\n    }\n\n    async metricMetadata(metric: string) {\n        const metadata = await this.metricMetadatas([metric]);\n        return metadata[metric];\n    }\n\n    private async refreshIndoms(metric: string) {\n        const indoms = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}indom`,\n                params: { name: metric }\n            });\n            return response.data.instances;\n        });\n\n        // convert [{instance: X, name: Y}] to {instance: name}\n        this.indomCache[metric] = {};\n        for (const indom of indoms) {\n            this.indomCache[metric][indom.instance] = indom.name;\n        }\n        return this.indomCache[metric];\n    }\n\n    private async updateInstanceNames(metric: any) {\n        if (metric.instances.length == 0) {\n            return;\n        } else if (metric.instances[0].instance === null || metric.instances[0].instance === -1) {\n            // this metric has no instances (single value)\n            metric.instances[0].instanceName = null;\n            return;\n        }\n\n        if (!(metric.name in this.indomCache))\n            this.indomCache[metric.name] = await this.refreshIndoms(metric.name);\n\n        let refreshed = false;\n        for (const instance of metric.instances) {\n            instance.instanceName = this.indomCache[metric.name][instance.instance];\n            if (!instance.instanceName && !refreshed) {\n                // refresh instances at max once per metric\n                this.indomCache[metric.name] = await this.refreshIndoms(metric.name);\n                instance.instanceName = this.indomCache[metric.name][instance.instance];\n                refreshed = true;\n            }\n        }\n    }\n\n    async fetch(metrics: string[], instanceNames: boolean = false) {\n        metrics.push(\"pmcd.control.timeout\"); // TODO: remove workaround - server should return empty list if no metrics were found\n\n        const data = await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}fetch`,\n                params: { names: metrics.join(',') }\n            });\n            return response.data;\n        });\n\n        const returnedMetrics = data.values.map((metric: any) => metric.name);\n        const missingMetrics = _.difference(metrics, returnedMetrics);\n        if (missingMetrics.length > 0) {\n            console.debug(`fetch didn't include result for ${missingMetrics.join(', ')}, clearing it from metric metadata and indom cache`);\n            for (const missingMetric of missingMetrics) {\n                delete this.metricMetadataCache[missingMetric];\n                delete this.indomCache[missingMetric];\n            }\n        }\n\n        if (instanceNames) {\n            for (const metric of data.values) {\n                await this.updateInstanceNames(metric);\n            }\n        }\n\n        return data;\n    }\n\n    async store(metric: string, value: string) {\n        return await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}store`,\n                params: { name: metric, value: value }\n            });\n            return response.data;\n        });\n    }\n\n    async children(prefix: string) {\n        return await this.ensureContext(async () => {\n            const response = await Context.datasourceRequest({\n                url: `${this.url}/pmapi/${this.context}/${this.d}children`,\n                params: { prefix: prefix }\n            });\n            return response.data;\n        });\n    }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;"],"sourceRoot":""}