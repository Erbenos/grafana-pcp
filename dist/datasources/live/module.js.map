{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./datasources/live/transforms.ts","webpack:///./datasources/live/poller.ts","webpack:///./datasources/live/utils.ts","webpack:///./datasources/live/extensions.ts","webpack:///./datasources/live/datasource.ts","webpack:///./datasources/live/query_ctrl.ts","webpack:///./datasources/live/module.ts","webpack:///../node_modules/expr-eval/dist/bundle.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","Transformations","this","transforms","init","metricInfo","_this","forEach","filter","sem","push","unaccumulate","applyTransforms","collected","map","hmd","fns","metric","out","datas","fn","endpoint","sort","a","b","output","previousTs","previousIvs","currentTs","currentIvs","deltaSec","newIvs","iv","prevIv","find","piv","instance","__assign","length","POLL_INTERVAL_MS","parseEndpoint","url","split","container","Poller","backendSrv","transformations","metricNames","contexts","required","setInterval","doPollAll","pollExpiry","Date","getTime","lastRequested","xs","mapFn","pollsGrouped","reduce","rv","x","polls","v","keys","result","requests","_i","_a","doPollOne","Promise","all","then","keepExpiry","tsv","getContext","refresh","contextUrl","datasourceRequest","contextResponse","_b","sent","context","data","metricsResponse","pmids","metrics","pmid","metricsResponse_1","indoms","missingMetrics","ensureContext","catch","e","console","log","getMetrics","lookupPmidForMetric","join","err_1","fetchResponse","appendFetchResultDataToCollection","fetchResponseData","pollTimeEpochMs","timestamp","us","this_1","renameIndoms","instances","concat","existing","values","needsRefresh","mapping","indom","poller_assign","instanceName","data_1","refreshIndoms","err_2","pmidentry","includes","ensurePolling","now","this_2","metrics_1","collectData","targeted","transformAfterCollected","containerName","ivContainerNameMatches","tsiv","removeTitusTcCollected","removeTitusOvfsBytesCollected","ivInstanceNameIsString","tsivHasData","ivExtractDuration","extensions_assign","cleanTitusOvfsLatencyCollected","datasource_PcpLiveDatasource","PcpLiveDatasource","instanceSettings","$q","templateSrv","variableSrv","q","withCredentials","headers","Content-Type","basicAuth","poller","container_name_filter","$inject","buildQueryTargets","options","targets","target","trim","match","replacedMatch","replace","substring","JSON","parse","scopedVars","displayName","refId","hide","type","getVariables","variables","variable","variableValue","external_lodash_default","isEqual","allValue","slice","textValuePair","text","current","getConfiguredEndpoint","_container","jsonData","targetName","iname","targetDisplay","array","A","a1","a2","L","charAt","sharedPrefixLength","firstInstanceValue","allInstancesTheSame","every","request","datasource_assign","status","title","message","datasource_generator","query","mn","_d","f","getAdhocFilters","adhocFilters","expressions","parser","withMembers","metricsToPoll","y","rawCollected","targets_1","applied","_loop_1","ts","_loop_4","ivToCollect","valuesAtTimestampForInstance","valuesAtTs","civ","set","calculated","expr","evaluate","ivout","collectApplied","_loop_2","_loop_5","foundIv","ivi","datapoints","plotted","_c","collectApplied_1","columns","rows_1","_loop_3","j","instanceAsString","colName","foundPoints","points","rows","GenericDatasourceQueryCtrl","_super","$scope","$injector","scope","getOptions","datasource","metricFindQuery","toggleEditorMode","rawQuery","onChangeInternal","panelCtrl","templateUrl","__webpack_exports__","GenericConfigCtrl","GenericQueryOptionsCtrl","GenericAnnotationsQueryCtrl","INUMBER","IOP1","IOP2","IOP3","IVAR","IFUNCALL","IEXPR","Instruction","unaryInstruction","binaryInstruction","ternaryInstruction","expressionToString","tokens","toJS","n1","n2","n3","nstack","item","stringify","pop","Error","argCount","args","unshift","IMEMBER","String","contains","obj","getSymbols","symbols","prevVar","Expression","unaryOps","binaryOps","ternaryOps","functions","toString","simplify","newexpression","shift","substitute","replitem","expritem","undefined","apply","vars","toJSFunction","param","Function","arguments","TOP","Token","index","TokenStream","expression","pos","consts","savedPosition","savedCurrent","newToken","save","restore","next","isWhitespace","isComment","isRadixInteger","isNumber","isOperator","isString","isParen","isComma","isNamedOp","isConst","isName","parseError","startPos","quote","indexOf","rawString","unescape","toUpperCase","toLowerCase","str","isOperatorEnabled","hasLetter","buffer","codePoint","codePointPattern","test","fromCharCode","parseInt","backslash","radix","validDigit","valid","resetPos","foundDot","foundDigits","acceptSign","validExponent","parseFloat","optionNameMap","+","-","*","/","%","^","!","<",">","<=",">=","==","!=","||","and","or","not","?",":","ParserState","tokenStream","nextToken","savedNextToken","allowMemberAccess","op","optionName","getOptionName","operators","getCoordinates","column","line","newline","msg","coords","tokenMatches","token","Array","isArray","accept","expect","parseAtom","instr","parseExpression","parseConditionalExpression","parseOrExpression","trueBranch","falseBranch","parseAndExpression","parseComparison","parseAddSub","COMPARISON_OPERATORS","parseTerm","ADD_SUB_OPERATORS","add","Number","sub","mul","div","mod","equal","notEqual","greaterThan","lessThan","greaterThanEqual","lessThanEqual","andOperator","Boolean","orOperator","inOperator","sinh","Math","exp","cosh","tanh","Infinity","asinh","sqrt","acosh","atanh","log10","LOG10E","neg","trunc","ceil","floor","random","factorial","gamma","parseFactor","TERM_OPERATORS","parseExponential","parsePostfixExpression","parseFunctionCall","parseMemberExpression","parseArgumentList","GAMMA_G","GAMMA_P","isFinite","round","isInteger","NaN","res","PI","sin","twoN","threeN","fourN","fiveN","pow","E","stringLength","hypot","sum","larg","arg","abs","condition","cond","yep","nope","roundTo","isNaN","Parser","cos","tan","asin","acos","atan","ln","lg","in","fac","min","max","pyt","atan2","if","true","false","parserState","sharedParser","factory"],"mappings":"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","file":"./datasources/live/module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 128);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export default class Transformations {\n\n    transforms: any;\n\n    constructor() {\n        this.transforms = {};\n    }\n\n    init(metricInfo) {\n        // set up empty transform list\n        metricInfo.forEach(m => this.transforms[m.name] = [])\n\n        // for counter objects, unaccumulate them\n        metricInfo\n            .filter(m => m.sem === 'counter')\n            .forEach(m => this.transforms[m.name].push(this.unaccumulate))\n    }\n\n    applyTransforms(collected) {\n        return collected.map(hmd => {\n            const fns = this.transforms[hmd.metric] || []\n            let out = hmd.datas\n            fns.forEach(fn => out = fn(out))\n            return {\n                endpoint: hmd.endpoint,\n                metric: hmd.metric,\n                datas: out,\n            }\n        })\n    }\n\n    unaccumulate(datas) {\n        // sort by timestamp, just to be sure\n        datas = datas.sort((a, b) => a[0] - b[0])\n\n        const output = [] as any\n        // start at 1, not zero, so we will always have a previous\n        for(let i = 1; i < datas.length; i++) {\n            const previousTs = datas[i - 1][0]\n            const previousIvs = datas[i - 1][1]\n            const currentTs = datas[i][0]\n            const currentIvs = datas[i][1]\n\n            // the accumulated value will include increments from\n            // some period of time, which may or may not be exactly\n            // matching the poll interval\n            // TODO really, the rate should be divided by the interval\n            const deltaSec = (currentTs - previousTs) / 1000\n\n            const newIvs = currentIvs.map(iv => {\n                const prevIv = previousIvs.find(piv => piv.instance === iv.instance)\n                return prevIv\n                    ? { ...iv, value: (iv.value - prevIv.value) / deltaSec }\n                    : null\n            }).filter(iv => !!iv)\n\n            output.push([ datas[i][0], newIvs ])\n        }\n        return output\n    }\n}\n","import { groupBy, objectMap } from './utils'\nimport Transformations from './transforms'\n\n// poll metric sources every X ms\nconst POLL_INTERVAL_MS = 1000\n// we will keep polling a metric for up to X ms after it was last requested\nconst KEEP_POLLING_MS = 20000\n// age out time\nconst OLDEST_DATA_MS = 5*60*1000\n\nconst parseEndpoint = (endpoint) => ({\n    url: endpoint.split('::')[0],\n    container: endpoint.split('::')[1] || null,\n})\n\nexport default class Poller {\n\n    backendSrv: any;\n    transformations: any;\n    metricInfo: any;\n    metricNames: any;\n    contexts: any;\n    required: any;\n    collected: any;\n\n    constructor(backendSrv) {\n        this.backendSrv = backendSrv;\n        this.transformations = new Transformations();\n        this.metricInfo = null;\n        this.metricNames = [];\n        this.contexts = {} // endpoint -> Promise { context, pmidMap, indomMap } // pmidMap is metrictext -> number, indomMap is metrictext -> { num : text }\n        this.required = [] // list of { endpoint, metric text, lastRequested }\n        this.collected = [] // list of { endpoint, metric text, datas[[ts,value],..] }\n\n        setInterval(this.doPollAll.bind(this), POLL_INTERVAL_MS)\n    }\n\n    doPollAll() {\n        // clean up any not required metrics before we poll\n        const pollExpiry = new Date().getTime() - KEEP_POLLING_MS\n        this.required = this.required.filter(r => r.lastRequested > pollExpiry)\n\n        // group each metric to be polled by endpoint \n        const pollsGrouped = groupBy(this.required, 'endpoint')\n        const polls = objectMap(pollsGrouped, v => v.map(r => r.metric))\n\n        const requests = [] as any\n        for (const endpoint of Object.keys(polls)) {\n            requests.push(this.doPollOne(endpoint, polls[endpoint]))\n        }\n\n        Promise.all(requests).then(() => {\n            const keepExpiry = new Date().getTime() - OLDEST_DATA_MS\n            for (const c of this.collected) {\n                c.datas = c.datas.filter(tsv => tsv[0] > keepExpiry)\n            }\n        })\n    }\n\n    async getContext(endpoint, refresh) {\n        const { url, container } = parseEndpoint(endpoint)\n\n        //console.log('** making request for context')\n        let contextUrl = `${url}/pmapi/context?hostspec=127.0.0.1&polltimeout=30`\n        if (container)\n            contextUrl += `&container=${container}`\n\n        const contextResponse = await this.backendSrv.datasourceRequest({ url: contextUrl })\n        //console.log('** contextResponse:', contextResponse)\n        const context = contextResponse.data.context\n\n        if (container) {\n            //console.log('selecting container..')\n            const containerResponse = await this.backendSrv.datasourceRequest({\n                url: `${url}/pmapi/${context}/_store?name=pmcd.client.container&value=${container}`\n            })\n            //console.log('selected', containerResponse)\n        }\n\n        // fetch pmids\n        //console.log('** making request for metrics')\n        const metricsResponse = await this.backendSrv.datasourceRequest({\n            url: `${url}/pmapi/${context}/_metric`\n        })\n        //console.log('** metricsResponse:', metricsResponse)\n        const pmids = metricsResponse.data.metrics.map(m => ({ name: m.name, pmid: m.pmid }))\n\n        // fetch metric info (if not already done)\n        if (!this.metricInfo) {\n            // TODO: instead of loading metric name on context creation, load them on dropdown click\n            const metricsResponse = await this.backendSrv.datasourceRequest({\n                url: `${url}/pmapi/${context}/_metric`\n            })\n            this.metricInfo = metricsResponse.data.metrics;\n            this.metricNames = this.metricInfo.map(m => m.name);\n            this.metricNames.sort()\n            this.transformations.init(this.metricInfo);\n        }\n\n        return { context, pmids, indoms: {}, missingMetrics: [] }\n    }\n\n    ensureContext(endpoint, refresh) {\n        if (!refresh && endpoint in this.contexts) {\n            return this.contexts[endpoint]\n        }\n\n        this.contexts[endpoint] = this.getContext(endpoint, refresh)\n        return this.contexts[endpoint].catch(e => {\n            console.log(`error acquiring context for ${endpoint}`, e);\n            return false;\n        })\n    }\n\n    async getMetrics(endpoint, metrics) {\n        const { url } = parseEndpoint(endpoint)\n        const context = await this.ensureContext(endpoint, false)\n        if (!context) {\n            // not ready for polling or failed, skip it\n            return\n        }\n\n        // extract pmid for metric name\n        const pmids = metrics.map(m => this.lookupPmidForMetric(context, m)).filter(m => !!m)\n        if (!pmids.length) return\n\n        // by now we have a context, the pmids to fetch, so lets do it\n        try {\n            return await this.backendSrv.datasourceRequest({\n                url: `${url}/pmapi/${context.context}/_fetch?pmids=${pmids.join(',')}`\n            })\n        } catch (err) {\n            // context will be dropped pretty quickly by pmwebd after we abandon polling\n            // so we need to reconnect and wait for next poll iteration\n            console.log('err fetching pmids', err)\n            this.ensureContext(endpoint, true)\n            // TODO: try again\n            return\n        }\n    }\n\n    async doPollOne(endpoint, metrics) {\n        const fetchResponse = await this.getMetrics(endpoint, metrics);\n        await this.appendFetchResultDataToCollection(endpoint, fetchResponse.data);\n    }\n\n    async appendFetchResultDataToCollection(endpoint, fetchResponseData) {\n        const pollTimeEpochMs = fetchResponseData.timestamp.s * 1000 + fetchResponseData.timestamp.us / 1000\n\n        // add the data to that already collected for the endpoint/metric\n        for(const v of fetchResponseData.values) {\n            const data = [pollTimeEpochMs, await this.renameIndoms(endpoint, v.name, v.instances)]\n\n            const existing = this.collected.find(c => c.endpoint === endpoint && c.metric === v.name)\n            if (existing) {\n                existing.datas.push(data)\n            } else {\n                // unless this is the first result for the endpoint/metric, in this case: create one\n                this.collected.push({ endpoint, metric: v.name, datas: [data] })\n            }\n        }\n    }\n\n    async renameIndoms(endpoint, metric, data) {\n        let needsRefresh = false\n        const context = await this.ensureContext(endpoint, false)\n\n        let output = [] as any\n        for(const iv of data) {\n            if (iv.instance === -1) {\n                output.push(iv)\n            } else {\n                const mapping = (context.indoms[metric] || []).find(indom => indom.instance === iv.instance)\n                output.push({\n                    ...iv,\n                    instanceName: mapping ? mapping.name : iv.instance,\n                })\n                if (!mapping)\n                    needsRefresh = true;\n            }\n        }\n        if (needsRefresh) {\n            this.refreshIndoms(endpoint, metric)\n        }\n        return output\n    }\n\n    async refreshIndoms(endpoint, metric) {\n        const { url } = parseEndpoint(endpoint)\n        const context = await this.ensureContext(endpoint, false)\n        if (!context) {\n            // not ready for polling or failed, skip it\n            return\n        }\n\n        let fetchResponse\n        try {\n            fetchResponse = await this.backendSrv.datasourceRequest({\n                url: `${url}/pmapi/${context.context}/_indom?name=${metric}`\n            })\n        } catch (err) {\n            // unfortunately errors might be caused by no indom mapping\n            // ignore it for now\n            // TODO we should explicitly check for missing indom error code\n            // then we can discard context or not as appropriate\n            console.log('err fetching indoms', err)\n            return\n        }\n\n        context.indoms[metric] = fetchResponse.data.instances\n    }\n\n    lookupPmidForMetric(context, m) {\n        const pmidentry = context.pmids.find(p => p.name === m)\n        if (pmidentry) {\n            return pmidentry.pmid\n        } else { // no pmid found\n            if (!context.missingMetrics.includes(m)) {\n                context.missingMetrics.push(m)\n                console.log('is pmda enabled? missing pmid for:', m)\n            }\n            return null\n        }\n    }\n\n    ensurePolling(endpoint, metrics) {\n        const now = new Date().getTime()\n        for (const metric of metrics) {\n            // TODO replace with reduce?\n            const existing = this.required.find(r => r.endpoint === endpoint && r.metric === metric)\n            if (!existing) {\n                this.required.push({ endpoint, metric, lastRequested: now })\n            } else {\n                existing.lastRequested = now\n            }\n        }\n    }\n\n    collectData(endpoint, metrics) {\n        const targeted = this.collected.filter(c => c.endpoint === endpoint && metrics.includes(c.metric))\n        const output = this.transformations.applyTransforms(targeted)\n        return output\n    }\n}\n","// stackoverflow development ftw\n//\n// https://stackoverflow.com/a/34890276/\nfunction groupBy(xs, key) {\n  return xs.reduce(function(rv, x) {\n    (rv[x[key]] = rv[x[key]] || []).push(x)\n    return rv\n  }, {})\n}\n\n// https://stackoverflow.com/a/14810722/\nfunction objectMap(object, mapFn) {\n  return Object.keys(object).reduce(function(result, key) {\n    result[key] = mapFn(object[key])\n    return result\n  }, {})\n}\n\n// https://stackoverflow.com/a/1917041/\nfunction sharedPrefixLength(array) {\n  var A = array.concat().sort()\n  var a1= A[0], a2= A[A.length-1], L= a1.length, i= 0;\n  while(i<L && a1.charAt(i)=== a2.charAt(i))\n      i++;\n  return i\n}\n\nconst flatMap = (f, arr) => arr.reduce((x, y) => [...x, ...f(y)], [])\n\n// https://stackoverflow.com/a/31464652/\nfunction expandDottedStringToObject(str, value)\n{\n    var items = str.split(\".\") // split on dot notation\n    var output = {} // prepare an empty object, to fill later\n    var ref = output // keep a reference of the new object\n\n    //  loop through all nodes, except the last one\n    for(var i = 0; i < items.length - 1; i ++)\n    {\n        ref[items[i]] = {} // create a new element inside the reference\n        ref = ref[items[i]] // shift the reference to the newly created object\n    }\n\n    ref[items[items.length - 1]] = value // apply the final value\n\n    return output // return the full object\n}\n\nexport {\n    groupBy,\n    objectMap,\n    sharedPrefixLength,\n    flatMap,\n    expandDottedStringToObject,\n}\n","export function cleanTitusOvfsLatencyCollected(c, containerName) {\n    const TO_FILTER = [\n        'titusovfs.read.latency',\n        'titusovfs.write.latency',\n        'titusovfs.open.latency',\n        'titusovfs.fsync.latency',\n        // do not do anything with\n        // titusovfs.read.bytes_per_sec\n        // titusovfs.write.bytes_per_sec\n    ]\n\n    if (!TO_FILTER.includes(c.metric) || !containerName) {\n        return c\n    }\n\n    const ivInstanceNameIsString = (iv) => (typeof (iv.instanceName)) === 'string'\n    const tsivHasData = (tsiv) => tsiv[1].length > 0\n\n    const ivContainerNameMatches = (iv) => \n        iv.instanceName.split(':').length === 2\n        && iv.instanceName.split(':')[0].includes(containerName)\n\n    const ivExtractDuration = (iv) => ({\n        ...iv,\n        instanceName: iv.instanceName.split(':')[1].split('-')[1]\n    })\n\n    return {\n        endpoint: c.endpoint,\n        metric: c.metric,\n        datas: c.datas\n            .map(tsiv => ([ tsiv[0], tsiv[1].filter(ivInstanceNameIsString) ]))\n            .filter(tsivHasData)\n            .map(tsiv => ([ tsiv[0], tsiv[1].filter(ivContainerNameMatches) ]))\n            .filter(tsivHasData)\n            .map(tsiv => ([ tsiv[0], tsiv[1].map(ivExtractDuration) ]))\n    }\n}\n\nfunction removeTitusOvfsBytesCollected(c, containerName) {\n    const TO_FILTER = [\n        'titusovfs.read.bytes_per_sec',\n        'titusovfs.write.bytes_per_sec',\n    ]\n\n    if (!TO_FILTER.includes(c.metric) || !containerName) {\n        return c\n    }\n\n    const ivContainerNameMatches = (iv) => containerName\n        && (typeof iv.instanceName === 'string') // has been indom'd\n        && iv.instanceName.includes(containerName)\n\n    return {\n        endpoint: c.endpoint,\n        metric: c.metric,\n        datas: c.datas\n            .map(tsiv => ([ tsiv[0], tsiv[1].filter(ivContainerNameMatches) ]))\n            .filter(tsiv => tsiv[1].length > 0)\n    }\n}\n\nfunction removeTitusTcCollected(c, containerName) {\n    const TO_FILTER = [\n        'titustc.network.out.requeues_packets',\n        'titustc.network.out.overlimits_packets',\n        'titustc.network.out.dropped_packets',\n        'titustc.network.out.packets',\n        'titustc.network.out.bytes',\n        'titustc.network.out.ceiling',\n        'titustc.network.out.rate',\n        'titustc.network.in.requeues_packets',\n        'titustc.network.in.overlimits_packets',\n        'titustc.network.in.dropped_packets',\n        'titustc.network.in.packets',\n        'titustc.network.in.bytes',\n        'titustc.network.in.ceiling',\n        'titustc.network.in.rate',\n    ]\n\n    if (!TO_FILTER.includes(c.metric)) {\n        return c\n    }\n\n    const ivContainerNameMatches = (iv) => containerName\n        && (typeof iv.instanceName === 'string') // has been indom'd\n        && iv.instanceName.includes(containerName)\n\n    return {\n        endpoint: c.endpoint,\n        metric: c.metric,\n        datas: c.datas\n            .map(tsiv => ([ tsiv[0], tsiv[1].filter(ivContainerNameMatches) ]))\n            .filter(tsiv => tsiv[1].length > 0)\n    }\n}\n\nexport function transformAfterCollected(collected, containerName) {\n    return collected\n        .map(c => removeTitusTcCollected(c, containerName))\n        .map(c => removeTitusOvfsBytesCollected(c, containerName))\n        .map(c => cleanTitusOvfsLatencyCollected(c, containerName))\n        .filter(c => c.datas.length > 0)\n}\n","import _ from \"lodash\";\nimport { Parser } from 'expr-eval'\n\nimport Poller from './poller'\nimport * as utils from './utils'\nimport * as extensions from './extensions'\n\nexport class PcpLiveDatasource {\n\n  instanceSettings: any;\n  name: string;\n  url: string;\n  q: any;\n  backendSrv: any;\n  templateSrv: any;\n  variableSrv: any;\n  withCredentials: boolean;\n  headers: any;\n  poller: Poller;\n  container_name_filter: any;\n\n  /** @ngInject **/\n  constructor(instanceSettings, $q, backendSrv, templateSrv, variableSrv) {\n    this.instanceSettings = instanceSettings;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.variableSrv = variableSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n\n    this.poller = new Poller(backendSrv);\n\n    const UUID_REGEX = /[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}/\n    this.container_name_filter = name => true // name => name.match(UUID_REGEX)\n  }\n\n  buildQueryTargets(options) {\n    return options.targets\n      .filter((target) => {\n        // remove placeholder targets\n        return target.target !== 'select metric';\n      })\n      .map((target) => {\n        let data = _.isUndefined(target.data) ? null : target.data;\n\n        if (typeof data === 'string' && data.trim() === '') {\n          data = null;\n        }\n\n        if (data !== null) {\n          const match = data.match(/(\"(\\$.+?)\")/g);\n          if (match !== null) {\n            data\n              .match(/(\"(\\$.+?)\")/g)\n              .map((match) => {\n                const replacedMatch = this.templateSrv.replace(match, options.scopedVars, 'json');\n                if (replacedMatch !== match) {\n                  data = data.replace(match, replacedMatch.substring(1, replacedMatch.length - 1));\n                }\n              });\n          }\n          data = JSON.parse(data);\n        }\n\n        return {\n          data,\n          target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n          displayName: this.templateSrv.replace(target.displayName, options.scopedVars, 'regex'),\n          refId: target.refId,\n          hide: target.hide,\n          type: target.type,\n        };\n      });\n  }\n\n  getVariables(): any {\n    const variables = {};\n    if (!this.variableSrv.variables) {\n        // variables are not defined on the datasource settings page\n        return {};\n    }\n\n    this.variableSrv.variables.forEach((variable) => {\n      let variableValue = variable.current.value;\n      if (variableValue === '$__all' || _.isEqual(variableValue, ['$__all'])) {\n        if (variable.allValue === null) {\n          variableValue = variable.options.slice(1).map(textValuePair => textValuePair.value);\n        } else {\n          variableValue = variable.allValue;\n        }\n      }\n\n      variables[variable.name] = {\n        text: variable.current.text,\n        value: variableValue,\n      };\n    });\n\n    return variables;\n  }\n\n  getConfiguredEndpoint() {\n      const variables = this.getVariables();\n      if ('_proto' in variables && '_host' in variables && '_port' in variables) {\n          let endpoint = `${variables._proto.value}://${variables._host.value}:${variables._port.value}`;\n          if ('_container' in variables) {\n              endpoint += `::${variables._container.value}`;\n          }\n          return endpoint;\n      }\n      else {\n          let endpoint = this.instanceSettings.url;\n          if (this.instanceSettings.jsonData.container) {\n            endpoint += `::${this.instanceSettings.jsonData.container}`;\n        }\n        return endpoint;\n      }\n  }\n\n// above here, standard simple json datasource\n/////////////////////////\n// below here, pcp specific stuff\n\n    targetName(instances, instance, targets, target) {\n        // special fixes for these histogram labels\n        const HISTOGRAM_INSTANCE_NAME_FIX_TARGETS = ['bcc.runq.latency', 'bcc.disk.all.latency']\n        if (HISTOGRAM_INSTANCE_NAME_FIX_TARGETS.includes(target)) {\n            const iname = instances[instance]\n            return (iname.split && iname.split('-')[1]) || iname\n        }\n\n        const targetDisplay = (targets.length <= 1)\n            ? target\n            : target.substring(utils.sharedPrefixLength(targets.map(t => t.target)))\n\n        const firstInstanceValue = instances && Object.values(instances)[0]\n        const allInstancesTheSame = instances && Object.values(instances).every(i => i === firstInstanceValue)\n\n        if (instances[instance]) {\n            if (targets.length > 1) {\n                if (allInstancesTheSame) {\n                    return targetDisplay\n                } else {\n                    return `${targetDisplay} (${instances[instance]})`\n                }\n            } else {\n                return instances[instance]\n            }\n        } else {\n            return targetDisplay\n        }\n    }\n\n    async doRequest(options) {\n        const request = {\n            ...options,\n            withCredentials: this.withCredentials,\n            headers: this.headers,\n        }\n\n        return await this.backendSrv.datasourceRequest(request);\n    }\n\n    async testDatasource() {\n        const metrics = await this.poller.getMetrics(this.getConfiguredEndpoint(), [\"pmcd.version\"])\n\n        if (metrics) {\n            return {\n                status: 'success',\n                title: 'Success',\n                message: 'Data source configured successfully. If you wish to override the PCP endpoint for specific dashboards, '+\n                         'you can use the  _host, _port, _proto, (and optionally _container) variables.'\n            }\n        }\n        else {\n            return {\n                status: 'error',\n                title: 'Additional configuration required',\n                message: 'Could not connect to the specified url. To use this data source, '+\n                         'please configure the _host, _port, _proto, (and optionally _container) dashboard variables.',\n            }\n        }\n    }\n\n    async annotationQuery(options) {\n        return []\n    }\n\n    /**\n     * called by the query editor for auto completion of metric names\n     * also used by the templating engine (dashboard variables with type = query)\n     */\n    async metricFindQuery(query) {\n        let target = this.templateSrv.replace(query, null, 'regex');\n\n        // if the query is for containers.name, return the containers\n        // otherwise, default to providing a list of all metrics\n        if (target === 'containers.name') {\n            const metricsResponse = await this.poller.getMetrics(this.getConfiguredEndpoint(), [query])\n            return metricsResponse.data.values[0].instances\n                .map(iv => iv.value)\n                .filter(this.container_name_filter)\n                .map(i => ({ text: i, value: i }))\n        } else {\n            const filteredMetrics = this.poller.metricNames\n                .filter(mn => !target || mn.includes(target))\n            return filteredMetrics\n                .map(mn => ({ text: mn, value: mn }))\n        }\n    }\n\n    async query(options) {\n        // TODO all this is generic boilerplate, we can probably get rid of it\n        // by cutting down to only what we need\n        const query = options\n        query.targets = this.buildQueryTargets(options);\n\n        const parser = new Parser()\n\n        if (this.templateSrv.getAdhocFilters) {\n            query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n        } else {\n            query.adhocFilters = [];\n        }\n\n        options.scopedVars = { ...this.getVariables(), ...options.scopedVars };\n\n        const { targets } = options\n        const endpoint = this.getConfiguredEndpoint();\n        const container = endpoint.split('::')[1] || null\n\n        const expressions = targets.map(t => t.target).map(t => parser.parse(t))\n        const metricsToPoll = utils.flatMap(e => e.variables({ withMembers: true }), expressions)\n        this.poller.ensurePolling(endpoint, metricsToPoll)\n\n        const rawCollected = this.poller.collectData(endpoint, metricsToPoll)\n        const collected = extensions.transformAfterCollected(rawCollected, container)\n\n        const collectApplied = [] as any\n\n        // oh the for loops\n\n        if (collected[0]) {\n            for(const t of targets) {\n                // for now we just take the first timeslot as the reference for the series\n                const applied = [] as any\n                const expr = parser.parse(t.target)\n                for(const data of collected[0].datas) {\n                    const ts = data[0]\n                    const ivout = [] as any\n                    for(const ivToCollect of data[1]) {\n                        // look up all available data for this ts/instance combo\n                        const valuesAtTimestampForInstance = collected.map(c => {\n                            const valuesAtTs = c.datas.find(data => data[0] === ts)\n                            const v = valuesAtTs\n                                    && valuesAtTs[1]\n                                    && valuesAtTs[1].find(civ => civ.instance === ivToCollect.instance)\n                            return {\n                                metric: c.metric,\n                                value: v && v.value,\n                            }\n                        })\n\n                        // provide a default 0, load in all of the values\n                        const variables = {}\n                        metricsToPoll.forEach(\n                            v => _.set(variables, v, 0))\n                        valuesAtTimestampForInstance.forEach(\n                            v => _.set(variables, v.metric, v.value))\n                        const calculated = expr.evaluate(variables)\n                        ivout.push({\n                            instance: ivToCollect.instance,\n                            instanceName: ivToCollect.instanceName,\n                            value: calculated,\n                        })\n                    }\n                    applied.push([ts, ivout])\n                }\n\n                collectApplied.push({\n                    datas: applied,\n                    endpoint,\n                    metric: t.displayName || t.target,\n                })\n            }\n        }\n\n        // flatten the metric instance data out\n        const plotted : any[] = [];\n\n        for(const data of collectApplied) {\n            // TODO this looping is a bit O(n^2) but should be ok for proof of concept\n\n            // get a list of all unique instances and carry forward the instance name\n            const instances = {}\n            data.datas.forEach(d => d[1].forEach(iv => instances[iv.instance] = iv.instanceName))\n\n            for(const instance of Object.keys(instances)) {\n                const target = this.targetName(instances, instance, targets, data.metric)\n\n                const datapoints = [] as any // array of: [ value, unix_epoch_ms ]\n                for (const tsiv of data.datas) {\n                    const ts = tsiv[0]\n                    const iv = tsiv[1]\n                    const foundIv = iv.find(ivi => ivi.instance == instance)\n                    if (foundIv) {\n                        const value = foundIv.value\n                        datapoints.push([ value, ts ])\n                    }\n                }\n\n                plotted.push({\n                    metric: data.metric,\n                    instance,\n                    target,\n                    datapoints,\n                })\n            }\n        }\n\n        // most data is for a request of type 'timeserie'[sic]\n        // if the user requests everything of type 'table'\n        // then let's make them a table\n        let output\n        if (targets.every(t => t.type === 'table')) {\n            // for a table, we are going to assume just take the LATEST of the dataset\n            // output everything as a string:\n            // each metric is a column, each instance is a row\n            const type = 'table'\n            const columns = targets.map(t => ({ text: t.target, type: 'string' }))\n            const rows = [] as any\n            plotted.forEach(p => rows.push([]))\n            for (let i = 0; i < rows.length; i++) {\n                for (let j = 0; j < columns.length; j++) {\n                    const instanceAsString = `${i}`\n                    const colName = columns[j].text\n                    const foundPoints = plotted.find(p => p.instance === instanceAsString && p.metric === colName)\n                    if (foundPoints) {\n                        const points = foundPoints.datapoints\n                        rows[i][j] = points[points.length - 1][0]\n                    }\n                }\n            }\n            output = [{\n                columns,\n                rows,\n                type,\n            }]\n        } else {\n            output = plotted.map(p => ({ target: p.target, datapoints: p.datapoints }))\n        }\n\n        return {\n            data: output\n        }\n    }\n//////////\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n  static templateUrl = 'datasources/live/partials/query.editor.html'\n\n  scope: any;\n\n  constructor($scope, $injector)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.target.target = this.target.target || 'select metric';\n    this.target.displayName = this.target.displayName || this.target.target;\n    this.target.type = this.target.type || 'timeserie';\n  }\n\n  getOptions(query) {\n    return this.datasource.metricFindQuery(query || '');\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n","import {PcpLiveDatasource} from './datasource';\nimport {GenericDatasourceQueryCtrl} from './query_ctrl';\n\nclass GenericConfigCtrl {\n  static templateUrl = 'datasources/live/partials/config.html'\n}\n\nclass GenericQueryOptionsCtrl {\n  static templateUrl = 'datasources/live/partials/query.options.html'\n}\n\nclass GenericAnnotationsQueryCtrl {\n  static templateUrl = 'datasources/live/partials/annotations.editor.html'\n}\n\nexport {\n  PcpLiveDatasource as Datasource,\n  GenericDatasourceQueryCtrl as QueryCtrl,\n  GenericConfigCtrl as ConfigCtrl,\n  GenericQueryOptionsCtrl as QueryOptionsCtrl,\n  GenericAnnotationsQueryCtrl as AnnotationsQueryCtrl\n};\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.exprEval = factory());\n}(this, (function () { 'use strict';\n\n  var INUMBER = 'INUMBER';\n  var IOP1 = 'IOP1';\n  var IOP2 = 'IOP2';\n  var IOP3 = 'IOP3';\n  var IVAR = 'IVAR';\n  var IFUNCALL = 'IFUNCALL';\n  var IEXPR = 'IEXPR';\n  var IMEMBER = 'IMEMBER';\n\n  function Instruction(type, value) {\n    this.type = type;\n    this.value = (value !== undefined && value !== null) ? value : 0;\n  }\n\n  Instruction.prototype.toString = function () {\n    switch (this.type) {\n      case INUMBER:\n      case IOP1:\n      case IOP2:\n      case IOP3:\n      case IVAR:\n        return this.value;\n      case IFUNCALL:\n        return 'CALL ' + this.value;\n      case IMEMBER:\n        return '.' + this.value;\n      default:\n        return 'Invalid Instruction';\n    }\n  };\n\n  function unaryInstruction(value) {\n    return new Instruction(IOP1, value);\n  }\n\n  function binaryInstruction(value) {\n    return new Instruction(IOP2, value);\n  }\n\n  function ternaryInstruction(value) {\n    return new Instruction(IOP3, value);\n  }\n\n  function simplify(tokens, unaryOps, binaryOps, ternaryOps, values) {\n    var nstack = [];\n    var newexpression = [];\n    var n1, n2, n3;\n    var f;\n    for (var i = 0; i < tokens.length; i++) {\n      var item = tokens[i];\n      var type = item.type;\n      if (type === INUMBER) {\n        nstack.push(item);\n      } else if (type === IVAR && values.hasOwnProperty(item.value)) {\n        item = new Instruction(INUMBER, values[item.value]);\n        nstack.push(item);\n      } else if (type === IOP2 && nstack.length > 1) {\n        n2 = nstack.pop();\n        n1 = nstack.pop();\n        f = binaryOps[item.value];\n        item = new Instruction(INUMBER, f(n1.value, n2.value));\n        nstack.push(item);\n      } else if (type === IOP3 && nstack.length > 2) {\n        n3 = nstack.pop();\n        n2 = nstack.pop();\n        n1 = nstack.pop();\n        if (item.value === '?') {\n          nstack.push(n1.value ? n2.value : n3.value);\n        } else {\n          f = ternaryOps[item.value];\n          item = new Instruction(INUMBER, f(n1.value, n2.value, n3.value));\n          nstack.push(item);\n        }\n      } else if (type === IOP1 && nstack.length > 0) {\n        n1 = nstack.pop();\n        f = unaryOps[item.value];\n        item = new Instruction(INUMBER, f(n1.value));\n        nstack.push(item);\n      } else if (type === IEXPR) {\n        while (nstack.length > 0) {\n          newexpression.push(nstack.shift());\n        }\n        newexpression.push(new Instruction(IEXPR, simplify(item.value, unaryOps, binaryOps, ternaryOps, values)));\n      } else if (type === IMEMBER && nstack.length > 0) {\n        n1 = nstack.pop();\n        nstack.push(new Instruction(INUMBER, n1.value[item.value]));\n      } else {\n        while (nstack.length > 0) {\n          newexpression.push(nstack.shift());\n        }\n        newexpression.push(item);\n      }\n    }\n    while (nstack.length > 0) {\n      newexpression.push(nstack.shift());\n    }\n    return newexpression;\n  }\n\n  function substitute(tokens, variable, expr) {\n    var newexpression = [];\n    for (var i = 0; i < tokens.length; i++) {\n      var item = tokens[i];\n      var type = item.type;\n      if (type === IVAR && item.value === variable) {\n        for (var j = 0; j < expr.tokens.length; j++) {\n          var expritem = expr.tokens[j];\n          var replitem;\n          if (expritem.type === IOP1) {\n            replitem = unaryInstruction(expritem.value);\n          } else if (expritem.type === IOP2) {\n            replitem = binaryInstruction(expritem.value);\n          } else if (expritem.type === IOP3) {\n            replitem = ternaryInstruction(expritem.value);\n          } else {\n            replitem = new Instruction(expritem.type, expritem.value);\n          }\n          newexpression.push(replitem);\n        }\n      } else if (type === IEXPR) {\n        newexpression.push(new Instruction(IEXPR, substitute(item.value, variable, expr)));\n      } else {\n        newexpression.push(item);\n      }\n    }\n    return newexpression;\n  }\n\n  function evaluate(tokens, expr, values) {\n    var nstack = [];\n    var n1, n2, n3;\n    var f;\n    for (var i = 0; i < tokens.length; i++) {\n      var item = tokens[i];\n      var type = item.type;\n      if (type === INUMBER) {\n        nstack.push(item.value);\n      } else if (type === IOP2) {\n        n2 = nstack.pop();\n        n1 = nstack.pop();\n        if (item.value === 'and') {\n          nstack.push(n1 ? !!evaluate(n2, expr, values) : false);\n        } else if (item.value === 'or') {\n          nstack.push(n1 ? true : !!evaluate(n2, expr, values));\n        } else {\n          f = expr.binaryOps[item.value];\n          nstack.push(f(n1, n2));\n        }\n      } else if (type === IOP3) {\n        n3 = nstack.pop();\n        n2 = nstack.pop();\n        n1 = nstack.pop();\n        if (item.value === '?') {\n          nstack.push(evaluate(n1 ? n2 : n3, expr, values));\n        } else {\n          f = expr.ternaryOps[item.value];\n          nstack.push(f(n1, n2, n3));\n        }\n      } else if (type === IVAR) {\n        if (item.value in expr.functions) {\n          nstack.push(expr.functions[item.value]);\n        } else {\n          var v = values[item.value];\n          if (v !== undefined) {\n            nstack.push(v);\n          } else {\n            throw new Error('undefined variable: ' + item.value);\n          }\n        }\n      } else if (type === IOP1) {\n        n1 = nstack.pop();\n        f = expr.unaryOps[item.value];\n        nstack.push(f(n1));\n      } else if (type === IFUNCALL) {\n        var argCount = item.value;\n        var args = [];\n        while (argCount-- > 0) {\n          args.unshift(nstack.pop());\n        }\n        f = nstack.pop();\n        if (f.apply && f.call) {\n          nstack.push(f.apply(undefined, args));\n        } else {\n          throw new Error(f + ' is not a function');\n        }\n      } else if (type === IEXPR) {\n        nstack.push(item.value);\n      } else if (type === IMEMBER) {\n        n1 = nstack.pop();\n        nstack.push(n1[item.value]);\n      } else {\n        throw new Error('invalid Expression');\n      }\n    }\n    if (nstack.length > 1) {\n      throw new Error('invalid Expression (parity)');\n    }\n    return nstack[0] === -0 ? 0: nstack[0];\n  }\n\n  function expressionToString(tokens, toJS) {\n    var nstack = [];\n    var n1, n2, n3;\n    var f;\n    for (var i = 0; i < tokens.length; i++) {\n      var item = tokens[i];\n      var type = item.type;\n      if (type === INUMBER) {\n        if (typeof item.value === 'number' && item.value < 0) {\n          nstack.push('(' + item.value + ')');\n        } else {\n          nstack.push(escapeValue(item.value));\n        }\n      } else if (type === IOP2) {\n        n2 = nstack.pop();\n        n1 = nstack.pop();\n        f = item.value;\n        if (toJS) {\n          if (f === '^') {\n            nstack.push('Math.pow(' + n1 + ', ' + n2 + ')');\n          } else if (f === 'and') {\n            nstack.push('(!!' + n1 + ' && !!' + n2 + ')');\n          } else if (f === 'or') {\n            nstack.push('(!!' + n1 + ' || !!' + n2 + ')');\n          } else if (f === '||') {\n            nstack.push('(String(' + n1 + ') + String(' + n2 + '))');\n          } else if (f === '==') {\n            nstack.push('(' + n1 + ' === ' + n2 + ')');\n          } else if (f === '!=') {\n            nstack.push('(' + n1 + ' !== ' + n2 + ')');\n          } else {\n            nstack.push('(' + n1 + ' ' + f + ' ' + n2 + ')');\n          }\n        } else {\n          nstack.push('(' + n1 + ' ' + f + ' ' + n2 + ')');\n        }\n      } else if (type === IOP3) {\n        n3 = nstack.pop();\n        n2 = nstack.pop();\n        n1 = nstack.pop();\n        f = item.value;\n        if (f === '?') {\n          nstack.push('(' + n1 + ' ? ' + n2 + ' : ' + n3 + ')');\n        } else {\n          throw new Error('invalid Expression');\n        }\n      } else if (type === IVAR) {\n        nstack.push(item.value);\n      } else if (type === IOP1) {\n        n1 = nstack.pop();\n        f = item.value;\n        if (f === '-' || f === '+') {\n          nstack.push('(' + f + n1 + ')');\n        } else if (toJS) {\n          if (f === 'not') {\n            nstack.push('(' + '!' + n1 + ')');\n          } else if (f === '!') {\n            nstack.push('fac(' + n1 + ')');\n          } else {\n            nstack.push(f + '(' + n1 + ')');\n          }\n        } else if (f === '!') {\n          nstack.push('(' + n1 + '!)');\n        } else {\n          nstack.push('(' + f + ' ' + n1 + ')');\n        }\n      } else if (type === IFUNCALL) {\n        var argCount = item.value;\n        var args = [];\n        while (argCount-- > 0) {\n          args.unshift(nstack.pop());\n        }\n        f = nstack.pop();\n        nstack.push(f + '(' + args.join(', ') + ')');\n      } else if (type === IMEMBER) {\n        n1 = nstack.pop();\n        nstack.push(n1 + '.' + item.value);\n      } else if (type === IEXPR) {\n        nstack.push('(' + expressionToString(item.value, toJS) + ')');\n      } else {\n        throw new Error('invalid Expression');\n      }\n    }\n    if (nstack.length > 1) {\n      throw new Error('invalid Expression (parity)');\n    }\n    return String(nstack[0]);\n  }\n\n  function escapeValue(v) {\n    if (typeof v === 'string') {\n      return JSON.stringify(v).replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\n    }\n    return v;\n  }\n\n  function contains(array, obj) {\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === obj) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function getSymbols(tokens, symbols, options) {\n    options = options || {};\n    var withMembers = !!options.withMembers;\n    var prevVar = null;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var item = tokens[i];\n      if (item.type === IVAR) {\n        if (!withMembers && !contains(symbols, item.value)) {\n          symbols.push(item.value);\n        } else if (prevVar !== null) {\n          if (!contains(symbols, prevVar)) {\n            symbols.push(prevVar);\n          }\n          prevVar = item.value;\n        } else {\n          prevVar = item.value;\n        }\n      } else if (item.type === IMEMBER && withMembers && prevVar !== null) {\n        prevVar += '.' + item.value;\n      } else if (item.type === IEXPR) {\n        getSymbols(item.value, symbols, options);\n      } else if (prevVar !== null) {\n        if (!contains(symbols, prevVar)) {\n          symbols.push(prevVar);\n        }\n        prevVar = null;\n      }\n    }\n\n    if (prevVar !== null && !contains(symbols, prevVar)) {\n      symbols.push(prevVar);\n    }\n  }\n\n  function Expression(tokens, parser) {\n    this.tokens = tokens;\n    this.parser = parser;\n    this.unaryOps = parser.unaryOps;\n    this.binaryOps = parser.binaryOps;\n    this.ternaryOps = parser.ternaryOps;\n    this.functions = parser.functions;\n  }\n\n  Expression.prototype.simplify = function (values) {\n    values = values || {};\n    return new Expression(simplify(this.tokens, this.unaryOps, this.binaryOps, this.ternaryOps, values), this.parser);\n  };\n\n  Expression.prototype.substitute = function (variable, expr) {\n    if (!(expr instanceof Expression)) {\n      expr = this.parser.parse(String(expr));\n    }\n\n    return new Expression(substitute(this.tokens, variable, expr), this.parser);\n  };\n\n  Expression.prototype.evaluate = function (values) {\n    values = values || {};\n    return evaluate(this.tokens, this, values);\n  };\n\n  Expression.prototype.toString = function () {\n    return expressionToString(this.tokens, false);\n  };\n\n  Expression.prototype.symbols = function (options) {\n    options = options || {};\n    var vars = [];\n    getSymbols(this.tokens, vars, options);\n    return vars;\n  };\n\n  Expression.prototype.variables = function (options) {\n    options = options || {};\n    var vars = [];\n    getSymbols(this.tokens, vars, options);\n    var functions = this.functions;\n    return vars.filter(function (name) {\n      return !(name in functions);\n    });\n  };\n\n  Expression.prototype.toJSFunction = function (param, variables) {\n    var expr = this;\n    var f = new Function(param, 'with(this.functions) with (this.ternaryOps) with (this.binaryOps) with (this.unaryOps) { return ' + expressionToString(this.simplify(variables).tokens, true) + '; }'); // eslint-disable-line no-new-func\n    return function () {\n      return f.apply(expr, arguments);\n    };\n  };\n\n  var TEOF = 'TEOF';\n  var TOP = 'TOP';\n  var TNUMBER = 'TNUMBER';\n  var TSTRING = 'TSTRING';\n  var TPAREN = 'TPAREN';\n  var TCOMMA = 'TCOMMA';\n  var TNAME = 'TNAME';\n\n  function Token(type, value, index) {\n    this.type = type;\n    this.value = value;\n    this.index = index;\n  }\n\n  Token.prototype.toString = function () {\n    return this.type + ': ' + this.value;\n  };\n\n  function TokenStream(parser, expression) {\n    this.pos = 0;\n    this.current = null;\n    this.unaryOps = parser.unaryOps;\n    this.binaryOps = parser.binaryOps;\n    this.ternaryOps = parser.ternaryOps;\n    this.consts = parser.consts;\n    this.expression = expression;\n    this.savedPosition = 0;\n    this.savedCurrent = null;\n    this.options = parser.options;\n  }\n\n  TokenStream.prototype.newToken = function (type, value, pos) {\n    return new Token(type, value, pos != null ? pos : this.pos);\n  };\n\n  TokenStream.prototype.save = function () {\n    this.savedPosition = this.pos;\n    this.savedCurrent = this.current;\n  };\n\n  TokenStream.prototype.restore = function () {\n    this.pos = this.savedPosition;\n    this.current = this.savedCurrent;\n  };\n\n  TokenStream.prototype.next = function () {\n    if (this.pos >= this.expression.length) {\n      return this.newToken(TEOF, 'EOF');\n    }\n\n    if (this.isWhitespace() || this.isComment()) {\n      return this.next();\n    } else if (this.isRadixInteger() ||\n        this.isNumber() ||\n        this.isOperator() ||\n        this.isString() ||\n        this.isParen() ||\n        this.isComma() ||\n        this.isNamedOp() ||\n        this.isConst() ||\n        this.isName()) {\n      return this.current;\n    } else {\n      this.parseError('Unknown character \"' + this.expression.charAt(this.pos) + '\"');\n    }\n  };\n\n  TokenStream.prototype.isString = function () {\n    var r = false;\n    var startPos = this.pos;\n    var quote = this.expression.charAt(startPos);\n\n    if (quote === '\\'' || quote === '\"') {\n      var index = this.expression.indexOf(quote, startPos + 1);\n      while (index >= 0 && this.pos < this.expression.length) {\n        this.pos = index + 1;\n        if (this.expression.charAt(index - 1) !== '\\\\') {\n          var rawString = this.expression.substring(startPos + 1, index);\n          this.current = this.newToken(TSTRING, this.unescape(rawString), startPos);\n          r = true;\n          break;\n        }\n        index = this.expression.indexOf(quote, index + 1);\n      }\n    }\n    return r;\n  };\n\n  TokenStream.prototype.isParen = function () {\n    var c = this.expression.charAt(this.pos);\n    if (c === '(' || c === ')') {\n      this.current = this.newToken(TPAREN, c);\n      this.pos++;\n      return true;\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isComma = function () {\n    var c = this.expression.charAt(this.pos);\n    if (c === ',') {\n      this.current = this.newToken(TCOMMA, ',');\n      this.pos++;\n      return true;\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isConst = function () {\n    var startPos = this.pos;\n    var i = startPos;\n    for (; i < this.expression.length; i++) {\n      var c = this.expression.charAt(i);\n      if (c.toUpperCase() === c.toLowerCase()) {\n        if (i === this.pos || (c !== '_' && c !== '.' && (c < '0' || c > '9'))) {\n          break;\n        }\n      }\n    }\n    if (i > startPos) {\n      var str = this.expression.substring(startPos, i);\n      if (str in this.consts) {\n        this.current = this.newToken(TNUMBER, this.consts[str]);\n        this.pos += str.length;\n        return true;\n      }\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isNamedOp = function () {\n    var startPos = this.pos;\n    var i = startPos;\n    for (; i < this.expression.length; i++) {\n      var c = this.expression.charAt(i);\n      if (c.toUpperCase() === c.toLowerCase()) {\n        if (i === this.pos || (c !== '_' && (c < '0' || c > '9'))) {\n          break;\n        }\n      }\n    }\n    if (i > startPos) {\n      var str = this.expression.substring(startPos, i);\n      if (this.isOperatorEnabled(str) && (str in this.binaryOps || str in this.unaryOps || str in this.ternaryOps)) {\n        this.current = this.newToken(TOP, str);\n        this.pos += str.length;\n        return true;\n      }\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isName = function () {\n    var startPos = this.pos;\n    var i = startPos;\n    var hasLetter = false;\n    for (; i < this.expression.length; i++) {\n      var c = this.expression.charAt(i);\n      if (c.toUpperCase() === c.toLowerCase()) {\n        if (i === this.pos && (c === '$' || c === '_')) {\n          if (c === '_') {\n            hasLetter = true;\n          }\n          continue;\n        } else if (i === this.pos || !hasLetter || (c !== '_' && (c < '0' || c > '9'))) {\n          break;\n        }\n      } else {\n        hasLetter = true;\n      }\n    }\n    if (hasLetter) {\n      var str = this.expression.substring(startPos, i);\n      this.current = this.newToken(TNAME, str);\n      this.pos += str.length;\n      return true;\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isWhitespace = function () {\n    var r = false;\n    var c = this.expression.charAt(this.pos);\n    while (c === ' ' || c === '\\t' || c === '\\n' || c === '\\r') {\n      r = true;\n      this.pos++;\n      if (this.pos >= this.expression.length) {\n        break;\n      }\n      c = this.expression.charAt(this.pos);\n    }\n    return r;\n  };\n\n  var codePointPattern = /^[0-9a-f]{4}$/i;\n\n  TokenStream.prototype.unescape = function (v) {\n    var index = v.indexOf('\\\\');\n    if (index < 0) {\n      return v;\n    }\n\n    var buffer = v.substring(0, index);\n    while (index >= 0) {\n      var c = v.charAt(++index);\n      switch (c) {\n        case '\\'':\n          buffer += '\\'';\n          break;\n        case '\"':\n          buffer += '\"';\n          break;\n        case '\\\\':\n          buffer += '\\\\';\n          break;\n        case '/':\n          buffer += '/';\n          break;\n        case 'b':\n          buffer += '\\b';\n          break;\n        case 'f':\n          buffer += '\\f';\n          break;\n        case 'n':\n          buffer += '\\n';\n          break;\n        case 'r':\n          buffer += '\\r';\n          break;\n        case 't':\n          buffer += '\\t';\n          break;\n        case 'u':\n          // interpret the following 4 characters as the hex of the unicode code point\n          var codePoint = v.substring(index + 1, index + 5);\n          if (!codePointPattern.test(codePoint)) {\n            this.parseError('Illegal escape sequence: \\\\u' + codePoint);\n          }\n          buffer += String.fromCharCode(parseInt(codePoint, 16));\n          index += 4;\n          break;\n        default:\n          throw this.parseError('Illegal escape sequence: \"\\\\' + c + '\"');\n      }\n      ++index;\n      var backslash = v.indexOf('\\\\', index);\n      buffer += v.substring(index, backslash < 0 ? v.length : backslash);\n      index = backslash;\n    }\n\n    return buffer;\n  };\n\n  TokenStream.prototype.isComment = function () {\n    var c = this.expression.charAt(this.pos);\n    if (c === '/' && this.expression.charAt(this.pos + 1) === '*') {\n      this.pos = this.expression.indexOf('*/', this.pos) + 2;\n      if (this.pos === 1) {\n        this.pos = this.expression.length;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  TokenStream.prototype.isRadixInteger = function () {\n    var pos = this.pos;\n\n    if (pos >= this.expression.length - 2 || this.expression.charAt(pos) !== '0') {\n      return false;\n    }\n    ++pos;\n\n    var radix;\n    var validDigit;\n    if (this.expression.charAt(pos) === 'x') {\n      radix = 16;\n      validDigit = /^[0-9a-f]$/i;\n      ++pos;\n    } else if (this.expression.charAt(pos) === 'b') {\n      radix = 2;\n      validDigit = /^[01]$/i;\n      ++pos;\n    } else {\n      return false;\n    }\n\n    var valid = false;\n    var startPos = pos;\n\n    while (pos < this.expression.length) {\n      var c = this.expression.charAt(pos);\n      if (validDigit.test(c)) {\n        pos++;\n        valid = true;\n      } else {\n        break;\n      }\n    }\n\n    if (valid) {\n      this.current = this.newToken(TNUMBER, parseInt(this.expression.substring(startPos, pos), radix));\n      this.pos = pos;\n    }\n    return valid;\n  };\n\n  TokenStream.prototype.isNumber = function () {\n    var valid = false;\n    var pos = this.pos;\n    var startPos = pos;\n    var resetPos = pos;\n    var foundDot = false;\n    var foundDigits = false;\n    var c;\n\n    while (pos < this.expression.length) {\n      c = this.expression.charAt(pos);\n      if ((c >= '0' && c <= '9') || (!foundDot && c === '.')) {\n        if (c === '.') {\n          foundDot = true;\n        } else {\n          foundDigits = true;\n        }\n        pos++;\n        valid = foundDigits;\n      } else {\n        break;\n      }\n    }\n\n    if (valid) {\n      resetPos = pos;\n    }\n\n    if (c === 'e' || c === 'E') {\n      pos++;\n      var acceptSign = true;\n      var validExponent = false;\n      while (pos < this.expression.length) {\n        c = this.expression.charAt(pos);\n        if (acceptSign && (c === '+' || c === '-')) {\n          acceptSign = false;\n        } else if (c >= '0' && c <= '9') {\n          validExponent = true;\n          acceptSign = false;\n        } else {\n          break;\n        }\n        pos++;\n      }\n\n      if (!validExponent) {\n        pos = resetPos;\n      }\n    }\n\n    if (valid) {\n      this.current = this.newToken(TNUMBER, parseFloat(this.expression.substring(startPos, pos)));\n      this.pos = pos;\n    } else {\n      this.pos = resetPos;\n    }\n    return valid;\n  };\n\n  TokenStream.prototype.isOperator = function () {\n    var startPos = this.pos;\n    var c = this.expression.charAt(this.pos);\n\n    if (c === '+' || c === '-' || c === '*' || c === '/' || c === '%' || c === '^' || c === '?' || c === ':' || c === '.') {\n      this.current = this.newToken(TOP, c);\n    } else if (c === '∙' || c === '•') {\n      this.current = this.newToken(TOP, '*');\n    } else if (c === '>') {\n      if (this.expression.charAt(this.pos + 1) === '=') {\n        this.current = this.newToken(TOP, '>=');\n        this.pos++;\n      } else {\n        this.current = this.newToken(TOP, '>');\n      }\n    } else if (c === '<') {\n      if (this.expression.charAt(this.pos + 1) === '=') {\n        this.current = this.newToken(TOP, '<=');\n        this.pos++;\n      } else {\n        this.current = this.newToken(TOP, '<');\n      }\n    } else if (c === '|') {\n      if (this.expression.charAt(this.pos + 1) === '|') {\n        this.current = this.newToken(TOP, '||');\n        this.pos++;\n      } else {\n        return false;\n      }\n    } else if (c === '=') {\n      if (this.expression.charAt(this.pos + 1) === '=') {\n        this.current = this.newToken(TOP, '==');\n        this.pos++;\n      } else {\n        return false;\n      }\n    } else if (c === '!') {\n      if (this.expression.charAt(this.pos + 1) === '=') {\n        this.current = this.newToken(TOP, '!=');\n        this.pos++;\n      } else {\n        this.current = this.newToken(TOP, c);\n      }\n    } else {\n      return false;\n    }\n    this.pos++;\n\n    if (this.isOperatorEnabled(this.current.value)) {\n      return true;\n    } else {\n      this.pos = startPos;\n      return false;\n    }\n  };\n\n  var optionNameMap = {\n    '+': 'add',\n    '-': 'subtract',\n    '*': 'multiply',\n    '/': 'divide',\n    '%': 'remainder',\n    '^': 'power',\n    '!': 'factorial',\n    '<': 'comparison',\n    '>': 'comparison',\n    '<=': 'comparison',\n    '>=': 'comparison',\n    '==': 'comparison',\n    '!=': 'comparison',\n    '||': 'concatenate',\n    'and': 'logical',\n    'or': 'logical',\n    'not': 'logical',\n    '?': 'conditional',\n    ':': 'conditional'\n  };\n\n  function getOptionName(op) {\n    return optionNameMap.hasOwnProperty(op) ? optionNameMap[op] : op;\n  }\n\n  TokenStream.prototype.isOperatorEnabled = function (op) {\n    var optionName = getOptionName(op);\n    var operators = this.options.operators || {};\n\n    // in is a special case for now because it's disabled by default\n    if (optionName === 'in') {\n      return !!operators['in'];\n    }\n\n    return !(optionName in operators) || !!operators[optionName];\n  };\n\n  TokenStream.prototype.getCoordinates = function () {\n    var line = 0;\n    var column;\n    var newline = -1;\n    do {\n      line++;\n      column = this.pos - newline;\n      newline = this.expression.indexOf('\\n', newline + 1);\n    } while (newline >= 0 && newline < this.pos);\n\n    return {\n      line: line,\n      column: column\n    };\n  };\n\n  TokenStream.prototype.parseError = function (msg) {\n    var coords = this.getCoordinates();\n    throw new Error('parse error [' + coords.line + ':' + coords.column + ']: ' + msg);\n  };\n\n  function ParserState(parser, tokenStream, options) {\n    this.parser = parser;\n    this.tokens = tokenStream;\n    this.current = null;\n    this.nextToken = null;\n    this.next();\n    this.savedCurrent = null;\n    this.savedNextToken = null;\n    this.allowMemberAccess = options.allowMemberAccess !== false;\n  }\n\n  ParserState.prototype.next = function () {\n    this.current = this.nextToken;\n    return (this.nextToken = this.tokens.next());\n  };\n\n  ParserState.prototype.tokenMatches = function (token, value) {\n    if (typeof value === 'undefined') {\n      return true;\n    } else if (Array.isArray(value)) {\n      return contains(value, token.value);\n    } else if (typeof value === 'function') {\n      return value(token);\n    } else {\n      return token.value === value;\n    }\n  };\n\n  ParserState.prototype.save = function () {\n    this.savedCurrent = this.current;\n    this.savedNextToken = this.nextToken;\n    this.tokens.save();\n  };\n\n  ParserState.prototype.restore = function () {\n    this.tokens.restore();\n    this.current = this.savedCurrent;\n    this.nextToken = this.savedNextToken;\n  };\n\n  ParserState.prototype.accept = function (type, value) {\n    if (this.nextToken.type === type && this.tokenMatches(this.nextToken, value)) {\n      this.next();\n      return true;\n    }\n    return false;\n  };\n\n  ParserState.prototype.expect = function (type, value) {\n    if (!this.accept(type, value)) {\n      var coords = this.tokens.getCoordinates();\n      throw new Error('parse error [' + coords.line + ':' + coords.column + ']: Expected ' + (value || type));\n    }\n  };\n\n  ParserState.prototype.parseAtom = function (instr) {\n    if (this.accept(TNAME)) {\n      instr.push(new Instruction(IVAR, this.current.value));\n    } else if (this.accept(TNUMBER)) {\n      instr.push(new Instruction(INUMBER, this.current.value));\n    } else if (this.accept(TSTRING)) {\n      instr.push(new Instruction(INUMBER, this.current.value));\n    } else if (this.accept(TPAREN, '(')) {\n      this.parseExpression(instr);\n      this.expect(TPAREN, ')');\n    } else {\n      throw new Error('unexpected ' + this.nextToken);\n    }\n  };\n\n  ParserState.prototype.parseExpression = function (instr) {\n    this.parseConditionalExpression(instr);\n  };\n\n  ParserState.prototype.parseConditionalExpression = function (instr) {\n    this.parseOrExpression(instr);\n    while (this.accept(TOP, '?')) {\n      var trueBranch = [];\n      var falseBranch = [];\n      this.parseConditionalExpression(trueBranch);\n      this.expect(TOP, ':');\n      this.parseConditionalExpression(falseBranch);\n      instr.push(new Instruction(IEXPR, trueBranch));\n      instr.push(new Instruction(IEXPR, falseBranch));\n      instr.push(ternaryInstruction('?'));\n    }\n  };\n\n  ParserState.prototype.parseOrExpression = function (instr) {\n    this.parseAndExpression(instr);\n    while (this.accept(TOP, 'or')) {\n      var falseBranch = [];\n      this.parseAndExpression(falseBranch);\n      instr.push(new Instruction(IEXPR, falseBranch));\n      instr.push(binaryInstruction('or'));\n    }\n  };\n\n  ParserState.prototype.parseAndExpression = function (instr) {\n    this.parseComparison(instr);\n    while (this.accept(TOP, 'and')) {\n      var trueBranch = [];\n      this.parseComparison(trueBranch);\n      instr.push(new Instruction(IEXPR, trueBranch));\n      instr.push(binaryInstruction('and'));\n    }\n  };\n\n  var COMPARISON_OPERATORS = ['==', '!=', '<', '<=', '>=', '>', 'in'];\n\n  ParserState.prototype.parseComparison = function (instr) {\n    this.parseAddSub(instr);\n    while (this.accept(TOP, COMPARISON_OPERATORS)) {\n      var op = this.current;\n      this.parseAddSub(instr);\n      instr.push(binaryInstruction(op.value));\n    }\n  };\n\n  var ADD_SUB_OPERATORS = ['+', '-', '||'];\n\n  ParserState.prototype.parseAddSub = function (instr) {\n    this.parseTerm(instr);\n    while (this.accept(TOP, ADD_SUB_OPERATORS)) {\n      var op = this.current;\n      this.parseTerm(instr);\n      instr.push(binaryInstruction(op.value));\n    }\n  };\n\n  var TERM_OPERATORS = ['*', '/', '%'];\n\n  ParserState.prototype.parseTerm = function (instr) {\n    this.parseFactor(instr);\n    while (this.accept(TOP, TERM_OPERATORS)) {\n      var op = this.current;\n      this.parseFactor(instr);\n      instr.push(binaryInstruction(op.value));\n    }\n  };\n\n  ParserState.prototype.parseFactor = function (instr) {\n    var unaryOps = this.tokens.unaryOps;\n    function isPrefixOperator(token) {\n      return token.value in unaryOps;\n    }\n\n    this.save();\n    if (this.accept(TOP, isPrefixOperator)) {\n      if ((this.current.value !== '-' && this.current.value !== '+' && this.nextToken.type === TPAREN && this.nextToken.value === '(')) {\n        this.restore();\n        this.parseExponential(instr);\n      } else {\n        var op = this.current;\n        this.parseFactor(instr);\n        instr.push(unaryInstruction(op.value));\n      }\n    } else {\n      this.parseExponential(instr);\n    }\n  };\n\n  ParserState.prototype.parseExponential = function (instr) {\n    this.parsePostfixExpression(instr);\n    while (this.accept(TOP, '^')) {\n      this.parseFactor(instr);\n      instr.push(binaryInstruction('^'));\n    }\n  };\n\n  ParserState.prototype.parsePostfixExpression = function (instr) {\n    this.parseFunctionCall(instr);\n    while (this.accept(TOP, '!')) {\n      instr.push(unaryInstruction('!'));\n    }\n  };\n\n  ParserState.prototype.parseFunctionCall = function (instr) {\n    var unaryOps = this.tokens.unaryOps;\n    function isPrefixOperator(token) {\n      return token.value in unaryOps;\n    }\n\n    if (this.accept(TOP, isPrefixOperator)) {\n      var op = this.current;\n      this.parseAtom(instr);\n      instr.push(unaryInstruction(op.value));\n    } else {\n      this.parseMemberExpression(instr);\n      while (this.accept(TPAREN, '(')) {\n        if (this.accept(TPAREN, ')')) {\n          instr.push(new Instruction(IFUNCALL, 0));\n        } else {\n          var argCount = this.parseArgumentList(instr);\n          instr.push(new Instruction(IFUNCALL, argCount));\n        }\n      }\n    }\n  };\n\n  ParserState.prototype.parseArgumentList = function (instr) {\n    var argCount = 0;\n\n    while (!this.accept(TPAREN, ')')) {\n      this.parseExpression(instr);\n      ++argCount;\n      while (this.accept(TCOMMA)) {\n        this.parseExpression(instr);\n        ++argCount;\n      }\n    }\n\n    return argCount;\n  };\n\n  ParserState.prototype.parseMemberExpression = function (instr) {\n    this.parseAtom(instr);\n    while (this.accept(TOP, '.')) {\n      if (!this.allowMemberAccess) {\n        throw new Error('unexpected \".\", member access is not permitted');\n      }\n\n      this.expect(TNAME);\n      instr.push(new Instruction(IMEMBER, this.current.value));\n    }\n  };\n\n  function add(a, b) {\n    return Number(a) + Number(b);\n  }\n\n  function sub(a, b) {\n    return a - b;\n  }\n\n  function mul(a, b) {\n    return a * b;\n  }\n\n  function div(a, b) {\n    return a / b;\n  }\n\n  function mod(a, b) {\n    return a % b;\n  }\n\n  function concat(a, b) {\n    return '' + a + b;\n  }\n\n  function equal(a, b) {\n    return a === b;\n  }\n\n  function notEqual(a, b) {\n    return a !== b;\n  }\n\n  function greaterThan(a, b) {\n    return a > b;\n  }\n\n  function lessThan(a, b) {\n    return a < b;\n  }\n\n  function greaterThanEqual(a, b) {\n    return a >= b;\n  }\n\n  function lessThanEqual(a, b) {\n    return a <= b;\n  }\n\n  function andOperator(a, b) {\n    return Boolean(a && b);\n  }\n\n  function orOperator(a, b) {\n    return Boolean(a || b);\n  }\n\n  function inOperator(a, b) {\n    return contains(b, a);\n  }\n\n  function sinh(a) {\n    return ((Math.exp(a) - Math.exp(-a)) / 2);\n  }\n\n  function cosh(a) {\n    return ((Math.exp(a) + Math.exp(-a)) / 2);\n  }\n\n  function tanh(a) {\n    if (a === Infinity) return 1;\n    if (a === -Infinity) return -1;\n    return (Math.exp(a) - Math.exp(-a)) / (Math.exp(a) + Math.exp(-a));\n  }\n\n  function asinh(a) {\n    if (a === -Infinity) return a;\n    return Math.log(a + Math.sqrt((a * a) + 1));\n  }\n\n  function acosh(a) {\n    return Math.log(a + Math.sqrt((a * a) - 1));\n  }\n\n  function atanh(a) {\n    return (Math.log((1 + a) / (1 - a)) / 2);\n  }\n\n  function log10(a) {\n    return Math.log(a) * Math.LOG10E;\n  }\n\n  function neg(a) {\n    return -a;\n  }\n\n  function not(a) {\n    return !a;\n  }\n\n  function trunc(a) {\n    return a < 0 ? Math.ceil(a) : Math.floor(a);\n  }\n\n  function random(a) {\n    return Math.random() * (a || 1);\n  }\n\n  function factorial(a) { // a!\n    return gamma(a + 1);\n  }\n\n  function isInteger(value) {\n    return isFinite(value) && (value === Math.round(value));\n  }\n\n  var GAMMA_G = 4.7421875;\n  var GAMMA_P = [\n    0.99999999999999709182,\n    57.156235665862923517, -59.597960355475491248,\n    14.136097974741747174, -0.49191381609762019978,\n    0.33994649984811888699e-4,\n    0.46523628927048575665e-4, -0.98374475304879564677e-4,\n    0.15808870322491248884e-3, -0.21026444172410488319e-3,\n    0.21743961811521264320e-3, -0.16431810653676389022e-3,\n    0.84418223983852743293e-4, -0.26190838401581408670e-4,\n    0.36899182659531622704e-5\n  ];\n\n  // Gamma function from math.js\n  function gamma(n) {\n    var t, x;\n\n    if (isInteger(n)) {\n      if (n <= 0) {\n        return isFinite(n) ? Infinity : NaN;\n      }\n\n      if (n > 171) {\n        return Infinity; // Will overflow\n      }\n\n      var value = n - 2;\n      var res = n - 1;\n      while (value > 1) {\n        res *= value;\n        value--;\n      }\n\n      if (res === 0) {\n        res = 1; // 0! is per definition 1\n      }\n\n      return res;\n    }\n\n    if (n < 0.5) {\n      return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));\n    }\n\n    if (n >= 171.35) {\n      return Infinity; // will overflow\n    }\n\n    if (n > 85.0) { // Extended Stirling Approx\n      var twoN = n * n;\n      var threeN = twoN * n;\n      var fourN = threeN * n;\n      var fiveN = fourN * n;\n      return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *\n        (1 + (1 / (12 * n)) + (1 / (288 * twoN)) - (139 / (51840 * threeN)) -\n        (571 / (2488320 * fourN)) + (163879 / (209018880 * fiveN)) +\n        (5246819 / (75246796800 * fiveN * n)));\n    }\n\n    --n;\n    x = GAMMA_P[0];\n    for (var i = 1; i < GAMMA_P.length; ++i) {\n      x += GAMMA_P[i] / (n + i);\n    }\n\n    t = n + GAMMA_G + 0.5;\n    return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;\n  }\n\n  function stringLength(s) {\n    return String(s).length;\n  }\n\n  function hypot() {\n    var sum = 0;\n    var larg = 0;\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = Math.abs(arguments[i]);\n      var div;\n      if (larg < arg) {\n        div = larg / arg;\n        sum = (sum * div * div) + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else {\n        sum += arg;\n      }\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n\n  function condition(cond, yep, nope) {\n    return cond ? yep : nope;\n  }\n\n  /**\n  * Decimal adjustment of a number.\n  * From @escopecz.\n  *\n  * @param {Number} value The number.\n  * @param {Integer} exp  The exponent (the 10 logarithm of the adjustment base).\n  * @return {Number} The adjusted value.\n  */\n  function roundTo(value, exp) {\n    // If the exp is undefined or zero...\n    if (typeof exp === 'undefined' || +exp === 0) {\n      return Math.round(value);\n    }\n    value = +value;\n    exp = -(+exp);\n    // If the value is not a number or the exp is not an integer...\n    if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\n      return NaN;\n    }\n    // Shift\n    value = value.toString().split('e');\n    value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\n    // Shift back\n    value = value.toString().split('e');\n    return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\n  }\n\n  function Parser(options) {\n    this.options = options || {};\n    this.unaryOps = {\n      sin: Math.sin,\n      cos: Math.cos,\n      tan: Math.tan,\n      asin: Math.asin,\n      acos: Math.acos,\n      atan: Math.atan,\n      sinh: Math.sinh || sinh,\n      cosh: Math.cosh || cosh,\n      tanh: Math.tanh || tanh,\n      asinh: Math.asinh || asinh,\n      acosh: Math.acosh || acosh,\n      atanh: Math.atanh || atanh,\n      sqrt: Math.sqrt,\n      log: Math.log,\n      ln: Math.log,\n      lg: Math.log10 || log10,\n      log10: Math.log10 || log10,\n      abs: Math.abs,\n      ceil: Math.ceil,\n      floor: Math.floor,\n      round: Math.round,\n      trunc: Math.trunc || trunc,\n      '-': neg,\n      '+': Number,\n      exp: Math.exp,\n      not: not,\n      length: stringLength,\n      '!': factorial\n    };\n\n    this.binaryOps = {\n      '+': add,\n      '-': sub,\n      '*': mul,\n      '/': div,\n      '%': mod,\n      '^': Math.pow,\n      '||': concat,\n      '==': equal,\n      '!=': notEqual,\n      '>': greaterThan,\n      '<': lessThan,\n      '>=': greaterThanEqual,\n      '<=': lessThanEqual,\n      and: andOperator,\n      or: orOperator,\n      'in': inOperator\n    };\n\n    this.ternaryOps = {\n      '?': condition\n    };\n\n    this.functions = {\n      random: random,\n      fac: factorial,\n      min: Math.min,\n      max: Math.max,\n      hypot: Math.hypot || hypot,\n      pyt: Math.hypot || hypot, // backward compat\n      pow: Math.pow,\n      atan2: Math.atan2,\n      'if': condition,\n      gamma: gamma,\n      roundTo: roundTo\n    };\n\n    this.consts = {\n      E: Math.E,\n      PI: Math.PI,\n      'true': true,\n      'false': false\n    };\n  }\n\n  Parser.prototype.parse = function (expr) {\n    var instr = [];\n    var parserState = new ParserState(\n      this,\n      new TokenStream(this, expr),\n      { allowMemberAccess: this.options.allowMemberAccess }\n    );\n\n    parserState.parseExpression(instr);\n    parserState.expect(TEOF, 'EOF');\n\n    return new Expression(instr, this);\n  };\n\n  Parser.prototype.evaluate = function (expr, variables) {\n    return this.parse(expr).evaluate(variables);\n  };\n\n  var sharedParser = new Parser();\n\n  Parser.parse = function (expr) {\n    return sharedParser.parse(expr);\n  };\n\n  Parser.evaluate = function (expr, variables) {\n    return sharedParser.parse(expr).evaluate(variables);\n  };\n\n  /*!\n   Based on ndef.parser, by Raphael Graf(r@undefined.ch)\n   http://www.undefined.ch/mparser/index.html\n\n   Ported to JavaScript and modified by Matthew Crumley (email@matthewcrumley.com, http://silentmatt.com/)\n\n   You are free to use and modify this code in anyway you find useful. Please leave this comment in the code\n   to acknowledge its original source. If you feel like it, I enjoy hearing about projects that use my code,\n   but don't feel like you have to let me know or ask permission.\n  */\n\n  var index = {\n    Parser: Parser,\n    Expression: Expression\n  };\n\n  return index;\n\n})));\n"],"sourceRoot":""}